
Temp1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dc4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003f94  08003f94  00013f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004048  08004048  00014048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004050  08004050  00014050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004054  08004054  00014054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  08004058  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000041d8  20000078  080040d0  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20004250  080040d0  00024250  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ce44  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004553  00000000  00000000  0003ceec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000b350  00000000  00000000  0004143f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001188  00000000  00000000  0004c790  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000015a8  00000000  00000000  0004d918  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000090ca  00000000  00000000  0004eec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006b7a  00000000  00000000  00057f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005eb04  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003528  00000000  00000000  0005eb80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003f7c 	.word	0x08003f7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08003f7c 	.word	0x08003f7c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b97a 	b.w	80005cc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	468c      	mov	ip, r1
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	9e08      	ldr	r6, [sp, #32]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d151      	bne.n	80003a4 <__udivmoddi4+0xb4>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d96d      	bls.n	80003e2 <__udivmoddi4+0xf2>
 8000306:	fab2 fe82 	clz	lr, r2
 800030a:	f1be 0f00 	cmp.w	lr, #0
 800030e:	d00b      	beq.n	8000328 <__udivmoddi4+0x38>
 8000310:	f1ce 0c20 	rsb	ip, lr, #32
 8000314:	fa01 f50e 	lsl.w	r5, r1, lr
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000320:	ea4c 0c05 	orr.w	ip, ip, r5
 8000324:	fa00 f40e 	lsl.w	r4, r0, lr
 8000328:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800032c:	0c25      	lsrs	r5, r4, #16
 800032e:	fbbc f8fa 	udiv	r8, ip, sl
 8000332:	fa1f f987 	uxth.w	r9, r7
 8000336:	fb0a cc18 	mls	ip, sl, r8, ip
 800033a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800033e:	fb08 f309 	mul.w	r3, r8, r9
 8000342:	42ab      	cmp	r3, r5
 8000344:	d90a      	bls.n	800035c <__udivmoddi4+0x6c>
 8000346:	19ed      	adds	r5, r5, r7
 8000348:	f108 32ff 	add.w	r2, r8, #4294967295
 800034c:	f080 8123 	bcs.w	8000596 <__udivmoddi4+0x2a6>
 8000350:	42ab      	cmp	r3, r5
 8000352:	f240 8120 	bls.w	8000596 <__udivmoddi4+0x2a6>
 8000356:	f1a8 0802 	sub.w	r8, r8, #2
 800035a:	443d      	add	r5, r7
 800035c:	1aed      	subs	r5, r5, r3
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb5 f0fa 	udiv	r0, r5, sl
 8000364:	fb0a 5510 	mls	r5, sl, r0, r5
 8000368:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800036c:	fb00 f909 	mul.w	r9, r0, r9
 8000370:	45a1      	cmp	r9, r4
 8000372:	d909      	bls.n	8000388 <__udivmoddi4+0x98>
 8000374:	19e4      	adds	r4, r4, r7
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	f080 810a 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800037e:	45a1      	cmp	r9, r4
 8000380:	f240 8107 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000384:	3802      	subs	r0, #2
 8000386:	443c      	add	r4, r7
 8000388:	eba4 0409 	sub.w	r4, r4, r9
 800038c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000390:	2100      	movs	r1, #0
 8000392:	2e00      	cmp	r6, #0
 8000394:	d061      	beq.n	800045a <__udivmoddi4+0x16a>
 8000396:	fa24 f40e 	lsr.w	r4, r4, lr
 800039a:	2300      	movs	r3, #0
 800039c:	6034      	str	r4, [r6, #0]
 800039e:	6073      	str	r3, [r6, #4]
 80003a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0xc8>
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d054      	beq.n	8000456 <__udivmoddi4+0x166>
 80003ac:	2100      	movs	r1, #0
 80003ae:	e886 0021 	stmia.w	r6, {r0, r5}
 80003b2:	4608      	mov	r0, r1
 80003b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b8:	fab3 f183 	clz	r1, r3
 80003bc:	2900      	cmp	r1, #0
 80003be:	f040 808e 	bne.w	80004de <__udivmoddi4+0x1ee>
 80003c2:	42ab      	cmp	r3, r5
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xdc>
 80003c6:	4282      	cmp	r2, r0
 80003c8:	f200 80fa 	bhi.w	80005c0 <__udivmoddi4+0x2d0>
 80003cc:	1a84      	subs	r4, r0, r2
 80003ce:	eb65 0503 	sbc.w	r5, r5, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	46ac      	mov	ip, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d03f      	beq.n	800045a <__udivmoddi4+0x16a>
 80003da:	e886 1010 	stmia.w	r6, {r4, ip}
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	b912      	cbnz	r2, 80003ea <__udivmoddi4+0xfa>
 80003e4:	2701      	movs	r7, #1
 80003e6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ea:	fab7 fe87 	clz	lr, r7
 80003ee:	f1be 0f00 	cmp.w	lr, #0
 80003f2:	d134      	bne.n	800045e <__udivmoddi4+0x16e>
 80003f4:	1beb      	subs	r3, r5, r7
 80003f6:	0c3a      	lsrs	r2, r7, #16
 80003f8:	fa1f fc87 	uxth.w	ip, r7
 80003fc:	2101      	movs	r1, #1
 80003fe:	fbb3 f8f2 	udiv	r8, r3, r2
 8000402:	0c25      	lsrs	r5, r4, #16
 8000404:	fb02 3318 	mls	r3, r2, r8, r3
 8000408:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800040c:	fb0c f308 	mul.w	r3, ip, r8
 8000410:	42ab      	cmp	r3, r5
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x134>
 8000414:	19ed      	adds	r5, r5, r7
 8000416:	f108 30ff 	add.w	r0, r8, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x132>
 800041c:	42ab      	cmp	r3, r5
 800041e:	f200 80d1 	bhi.w	80005c4 <__udivmoddi4+0x2d4>
 8000422:	4680      	mov	r8, r0
 8000424:	1aed      	subs	r5, r5, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb5 f0f2 	udiv	r0, r5, r2
 800042c:	fb02 5510 	mls	r5, r2, r0, r5
 8000430:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000434:	fb0c fc00 	mul.w	ip, ip, r0
 8000438:	45a4      	cmp	ip, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x15c>
 800043c:	19e4      	adds	r4, r4, r7
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x15a>
 8000444:	45a4      	cmp	ip, r4
 8000446:	f200 80b8 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 040c 	sub.w	r4, r4, ip
 8000450:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000454:	e79d      	b.n	8000392 <__udivmoddi4+0xa2>
 8000456:	4631      	mov	r1, r6
 8000458:	4630      	mov	r0, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1ce 0420 	rsb	r4, lr, #32
 8000462:	fa05 f30e 	lsl.w	r3, r5, lr
 8000466:	fa07 f70e 	lsl.w	r7, r7, lr
 800046a:	fa20 f804 	lsr.w	r8, r0, r4
 800046e:	0c3a      	lsrs	r2, r7, #16
 8000470:	fa25 f404 	lsr.w	r4, r5, r4
 8000474:	ea48 0803 	orr.w	r8, r8, r3
 8000478:	fbb4 f1f2 	udiv	r1, r4, r2
 800047c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000480:	fb02 4411 	mls	r4, r2, r1, r4
 8000484:	fa1f fc87 	uxth.w	ip, r7
 8000488:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800048c:	fb01 f30c 	mul.w	r3, r1, ip
 8000490:	42ab      	cmp	r3, r5
 8000492:	fa00 f40e 	lsl.w	r4, r0, lr
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x1bc>
 8000498:	19ed      	adds	r5, r5, r7
 800049a:	f101 30ff 	add.w	r0, r1, #4294967295
 800049e:	f080 808a 	bcs.w	80005b6 <__udivmoddi4+0x2c6>
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	f240 8087 	bls.w	80005b6 <__udivmoddi4+0x2c6>
 80004a8:	3902      	subs	r1, #2
 80004aa:	443d      	add	r5, r7
 80004ac:	1aeb      	subs	r3, r5, r3
 80004ae:	fa1f f588 	uxth.w	r5, r8
 80004b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004b6:	fb02 3310 	mls	r3, r2, r0, r3
 80004ba:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004be:	fb00 f30c 	mul.w	r3, r0, ip
 80004c2:	42ab      	cmp	r3, r5
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x1e6>
 80004c6:	19ed      	adds	r5, r5, r7
 80004c8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004cc:	d26f      	bcs.n	80005ae <__udivmoddi4+0x2be>
 80004ce:	42ab      	cmp	r3, r5
 80004d0:	d96d      	bls.n	80005ae <__udivmoddi4+0x2be>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443d      	add	r5, r7
 80004d6:	1aeb      	subs	r3, r5, r3
 80004d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004dc:	e78f      	b.n	80003fe <__udivmoddi4+0x10e>
 80004de:	f1c1 0720 	rsb	r7, r1, #32
 80004e2:	fa22 f807 	lsr.w	r8, r2, r7
 80004e6:	408b      	lsls	r3, r1
 80004e8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ec:	ea48 0303 	orr.w	r3, r8, r3
 80004f0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004f4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004f8:	40fd      	lsrs	r5, r7
 80004fa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004fe:	fbb5 f9fc 	udiv	r9, r5, ip
 8000502:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000506:	fb0c 5519 	mls	r5, ip, r9, r5
 800050a:	fa1f f883 	uxth.w	r8, r3
 800050e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000512:	fb09 f408 	mul.w	r4, r9, r8
 8000516:	42ac      	cmp	r4, r5
 8000518:	fa02 f201 	lsl.w	r2, r2, r1
 800051c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x244>
 8000522:	18ed      	adds	r5, r5, r3
 8000524:	f109 30ff 	add.w	r0, r9, #4294967295
 8000528:	d243      	bcs.n	80005b2 <__udivmoddi4+0x2c2>
 800052a:	42ac      	cmp	r4, r5
 800052c:	d941      	bls.n	80005b2 <__udivmoddi4+0x2c2>
 800052e:	f1a9 0902 	sub.w	r9, r9, #2
 8000532:	441d      	add	r5, r3
 8000534:	1b2d      	subs	r5, r5, r4
 8000536:	fa1f fe8e 	uxth.w	lr, lr
 800053a:	fbb5 f0fc 	udiv	r0, r5, ip
 800053e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000542:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000546:	fb00 f808 	mul.w	r8, r0, r8
 800054a:	45a0      	cmp	r8, r4
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x26e>
 800054e:	18e4      	adds	r4, r4, r3
 8000550:	f100 35ff 	add.w	r5, r0, #4294967295
 8000554:	d229      	bcs.n	80005aa <__udivmoddi4+0x2ba>
 8000556:	45a0      	cmp	r8, r4
 8000558:	d927      	bls.n	80005aa <__udivmoddi4+0x2ba>
 800055a:	3802      	subs	r0, #2
 800055c:	441c      	add	r4, r3
 800055e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000562:	eba4 0408 	sub.w	r4, r4, r8
 8000566:	fba0 8902 	umull	r8, r9, r0, r2
 800056a:	454c      	cmp	r4, r9
 800056c:	46c6      	mov	lr, r8
 800056e:	464d      	mov	r5, r9
 8000570:	d315      	bcc.n	800059e <__udivmoddi4+0x2ae>
 8000572:	d012      	beq.n	800059a <__udivmoddi4+0x2aa>
 8000574:	b156      	cbz	r6, 800058c <__udivmoddi4+0x29c>
 8000576:	ebba 030e 	subs.w	r3, sl, lr
 800057a:	eb64 0405 	sbc.w	r4, r4, r5
 800057e:	fa04 f707 	lsl.w	r7, r4, r7
 8000582:	40cb      	lsrs	r3, r1
 8000584:	431f      	orrs	r7, r3
 8000586:	40cc      	lsrs	r4, r1
 8000588:	6037      	str	r7, [r6, #0]
 800058a:	6074      	str	r4, [r6, #4]
 800058c:	2100      	movs	r1, #0
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	4618      	mov	r0, r3
 8000594:	e6f8      	b.n	8000388 <__udivmoddi4+0x98>
 8000596:	4690      	mov	r8, r2
 8000598:	e6e0      	b.n	800035c <__udivmoddi4+0x6c>
 800059a:	45c2      	cmp	sl, r8
 800059c:	d2ea      	bcs.n	8000574 <__udivmoddi4+0x284>
 800059e:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a2:	eb69 0503 	sbc.w	r5, r9, r3
 80005a6:	3801      	subs	r0, #1
 80005a8:	e7e4      	b.n	8000574 <__udivmoddi4+0x284>
 80005aa:	4628      	mov	r0, r5
 80005ac:	e7d7      	b.n	800055e <__udivmoddi4+0x26e>
 80005ae:	4640      	mov	r0, r8
 80005b0:	e791      	b.n	80004d6 <__udivmoddi4+0x1e6>
 80005b2:	4681      	mov	r9, r0
 80005b4:	e7be      	b.n	8000534 <__udivmoddi4+0x244>
 80005b6:	4601      	mov	r1, r0
 80005b8:	e778      	b.n	80004ac <__udivmoddi4+0x1bc>
 80005ba:	3802      	subs	r0, #2
 80005bc:	443c      	add	r4, r7
 80005be:	e745      	b.n	800044c <__udivmoddi4+0x15c>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e708      	b.n	80003d6 <__udivmoddi4+0xe6>
 80005c4:	f1a8 0802 	sub.w	r8, r8, #2
 80005c8:	443d      	add	r5, r7
 80005ca:	e72b      	b.n	8000424 <__udivmoddi4+0x134>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <HAL_Init+0x30>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005da:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005e2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005ea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ec:	2003      	movs	r0, #3
 80005ee:	f000 f809 	bl	8000604 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005f2:	2000      	movs	r0, #0
 80005f4:	f002 fb3e 	bl	8002c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f8:	f002 faa4 	bl	8002b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80005fc:	2000      	movs	r0, #0
 80005fe:	bd08      	pop	{r3, pc}
 8000600:	40023c00 	.word	0x40023c00

08000604 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4a07      	ldr	r2, [pc, #28]	; (8000624 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000606:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000608:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800060c:	041b      	lsls	r3, r3, #16
 800060e:	0c1b      	lsrs	r3, r3, #16
 8000610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000614:	0200      	lsls	r0, r0, #8
 8000616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800061a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800061e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000620:	60d3      	str	r3, [r2, #12]
 8000622:	4770      	bx	lr
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	68dc      	ldr	r4, [r3, #12]
 800062e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000632:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000636:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000638:	2b04      	cmp	r3, #4
 800063a:	bf28      	it	cs
 800063c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800063e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000640:	f04f 0501 	mov.w	r5, #1
 8000644:	fa05 f303 	lsl.w	r3, r5, r3
 8000648:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800064c:	bf8c      	ite	hi
 800064e:	3c03      	subhi	r4, #3
 8000650:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000652:	4019      	ands	r1, r3
 8000654:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000656:	fa05 f404 	lsl.w	r4, r5, r4
 800065a:	3c01      	subs	r4, #1
 800065c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800065e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000660:	ea42 0201 	orr.w	r2, r2, r1
 8000664:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000668:	bfad      	iteet	ge
 800066a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066e:	f000 000f 	andlt.w	r0, r0, #15
 8000672:	4b06      	ldrlt	r3, [pc, #24]	; (800068c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000674:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000678:	bfb5      	itete	lt
 800067a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000680:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	bf00      	nop
 8000688:	e000ed00 	.word	0xe000ed00
 800068c:	e000ed14 	.word	0xe000ed14

08000690 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000690:	2800      	cmp	r0, #0
 8000692:	db08      	blt.n	80006a6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000694:	0942      	lsrs	r2, r0, #5
 8000696:	2301      	movs	r3, #1
 8000698:	f000 001f 	and.w	r0, r0, #31
 800069c:	fa03 f000 	lsl.w	r0, r3, r0
 80006a0:	4b01      	ldr	r3, [pc, #4]	; (80006a8 <HAL_NVIC_EnableIRQ+0x18>)
 80006a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006a6:	4770      	bx	lr
 80006a8:	e000e100 	.word	0xe000e100

080006ac <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80006ac:	6803      	ldr	r3, [r0, #0]
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80006b4:	f023 0303 	bic.w	r3, r3, #3
 80006b8:	2118      	movs	r1, #24
 80006ba:	3a10      	subs	r2, #16
 80006bc:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80006c0:	4904      	ldr	r1, [pc, #16]	; (80006d4 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80006c2:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80006c4:	bf88      	it	hi
 80006c6:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80006c8:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80006ca:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80006cc:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 80006ce:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	08003fcc 	.word	0x08003fcc

080006d8 <HAL_DMA_Init>:
{
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006dc:	f002 fbb8 	bl	8002e50 <HAL_GetTick>
 80006e0:	4605      	mov	r5, r0
  if(hdma == NULL)
 80006e2:	2c00      	cmp	r4, #0
 80006e4:	d071      	beq.n	80007ca <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80006e6:	2300      	movs	r3, #0
 80006e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80006ec:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80006ee:	2302      	movs	r3, #2
 80006f0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80006f4:	6813      	ldr	r3, [r2, #0]
 80006f6:	f023 0301 	bic.w	r3, r3, #1
 80006fa:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80006fc:	6821      	ldr	r1, [r4, #0]
 80006fe:	680b      	ldr	r3, [r1, #0]
 8000700:	07d8      	lsls	r0, r3, #31
 8000702:	d43c      	bmi.n	800077e <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000704:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000706:	4d32      	ldr	r5, [pc, #200]	; (80007d0 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000708:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800070a:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800070c:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800070e:	68a3      	ldr	r3, [r4, #8]
 8000710:	4313      	orrs	r3, r2
 8000712:	68e2      	ldr	r2, [r4, #12]
 8000714:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000716:	6922      	ldr	r2, [r4, #16]
 8000718:	4313      	orrs	r3, r2
 800071a:	6962      	ldr	r2, [r4, #20]
 800071c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800071e:	69e2      	ldr	r2, [r4, #28]
 8000720:	4303      	orrs	r3, r0
 8000722:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000724:	6a22      	ldr	r2, [r4, #32]
 8000726:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000728:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800072a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800072c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000730:	bf01      	itttt	eq
 8000732:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000734:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8000736:	4335      	orreq	r5, r6
 8000738:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 800073a:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 800073c:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800073e:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000740:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000744:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000748:	d10b      	bne.n	8000762 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 800074a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800074c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800074e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000750:	b13d      	cbz	r5, 8000762 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000752:	b9f8      	cbnz	r0, 8000794 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000754:	2a01      	cmp	r2, #1
 8000756:	d02d      	beq.n	80007b4 <HAL_DMA_Init+0xdc>
 8000758:	d301      	bcc.n	800075e <HAL_DMA_Init+0x86>
 800075a:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800075c:	d101      	bne.n	8000762 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800075e:	01ea      	lsls	r2, r5, #7
 8000760:	d42b      	bmi.n	80007ba <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000762:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000764:	4620      	mov	r0, r4
 8000766:	f7ff ffa1 	bl	80006ac <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800076a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800076c:	233f      	movs	r3, #63	; 0x3f
 800076e:	4093      	lsls	r3, r2
 8000770:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000772:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000774:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000776:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000778:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800077c:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800077e:	f002 fb67 	bl	8002e50 <HAL_GetTick>
 8000782:	1b40      	subs	r0, r0, r5
 8000784:	2805      	cmp	r0, #5
 8000786:	d9b9      	bls.n	80006fc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000788:	2320      	movs	r3, #32
 800078a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800078c:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 800078e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000792:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000794:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000798:	d113      	bne.n	80007c2 <HAL_DMA_Init+0xea>
    switch (tmp)
 800079a:	2a03      	cmp	r2, #3
 800079c:	d8e1      	bhi.n	8000762 <HAL_DMA_Init+0x8a>
 800079e:	a001      	add	r0, pc, #4	; (adr r0, 80007a4 <HAL_DMA_Init+0xcc>)
 80007a0:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80007a4:	080007bb 	.word	0x080007bb
 80007a8:	0800075f 	.word	0x0800075f
 80007ac:	080007bb 	.word	0x080007bb
 80007b0:	080007b5 	.word	0x080007b5
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80007b4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80007b8:	d1d3      	bne.n	8000762 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80007ba:	2340      	movs	r3, #64	; 0x40
 80007bc:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80007be:	2001      	movs	r0, #1
 80007c0:	e7e5      	b.n	800078e <HAL_DMA_Init+0xb6>
    switch (tmp)
 80007c2:	2a02      	cmp	r2, #2
 80007c4:	d9f9      	bls.n	80007ba <HAL_DMA_Init+0xe2>
 80007c6:	2a03      	cmp	r2, #3
 80007c8:	e7c8      	b.n	800075c <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80007ca:	2001      	movs	r0, #1
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	bf00      	nop
 80007d0:	f010803f 	.word	0xf010803f

080007d4 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80007d4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d003      	beq.n	80007e4 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007dc:	2380      	movs	r3, #128	; 0x80
 80007de:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80007e0:	2001      	movs	r0, #1
 80007e2:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80007e4:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80007e6:	2305      	movs	r3, #5
 80007e8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80007ec:	6813      	ldr	r3, [r2, #0]
 80007ee:	f023 0301 	bic.w	r3, r3, #1
 80007f2:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80007f4:	2000      	movs	r0, #0
}
 80007f6:	4770      	bx	lr

080007f8 <HAL_DMA_IRQHandler>:
{
 80007f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80007fa:	2300      	movs	r3, #0
 80007fc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80007fe:	4b5a      	ldr	r3, [pc, #360]	; (8000968 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000800:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8000802:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000804:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000806:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000808:	2208      	movs	r2, #8
 800080a:	409a      	lsls	r2, r3
 800080c:	4216      	tst	r6, r2
{
 800080e:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000810:	d00c      	beq.n	800082c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000812:	6801      	ldr	r1, [r0, #0]
 8000814:	6808      	ldr	r0, [r1, #0]
 8000816:	0740      	lsls	r0, r0, #29
 8000818:	d508      	bpl.n	800082c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800081a:	6808      	ldr	r0, [r1, #0]
 800081c:	f020 0004 	bic.w	r0, r0, #4
 8000820:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000822:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000824:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000826:	f042 0201 	orr.w	r2, r2, #1
 800082a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800082c:	2201      	movs	r2, #1
 800082e:	409a      	lsls	r2, r3
 8000830:	4216      	tst	r6, r2
 8000832:	d008      	beq.n	8000846 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000834:	6821      	ldr	r1, [r4, #0]
 8000836:	6949      	ldr	r1, [r1, #20]
 8000838:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800083a:	bf41      	itttt	mi
 800083c:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800083e:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000840:	f042 0202 	orrmi.w	r2, r2, #2
 8000844:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000846:	2204      	movs	r2, #4
 8000848:	409a      	lsls	r2, r3
 800084a:	4216      	tst	r6, r2
 800084c:	d008      	beq.n	8000860 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800084e:	6821      	ldr	r1, [r4, #0]
 8000850:	6809      	ldr	r1, [r1, #0]
 8000852:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000854:	bf41      	itttt	mi
 8000856:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000858:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800085a:	f042 0204 	orrmi.w	r2, r2, #4
 800085e:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000860:	2210      	movs	r2, #16
 8000862:	409a      	lsls	r2, r3
 8000864:	4216      	tst	r6, r2
 8000866:	d010      	beq.n	800088a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000868:	6823      	ldr	r3, [r4, #0]
 800086a:	6819      	ldr	r1, [r3, #0]
 800086c:	0709      	lsls	r1, r1, #28
 800086e:	d50c      	bpl.n	800088a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000870:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	0350      	lsls	r0, r2, #13
 8000876:	d535      	bpl.n	80008e4 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	0319      	lsls	r1, r3, #12
 800087c:	d401      	bmi.n	8000882 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800087e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000880:	e000      	b.n	8000884 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000882:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000884:	b10b      	cbz	r3, 800088a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000886:	4620      	mov	r0, r4
 8000888:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800088a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800088c:	2220      	movs	r2, #32
 800088e:	408a      	lsls	r2, r1
 8000890:	4216      	tst	r6, r2
 8000892:	d038      	beq.n	8000906 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000894:	6823      	ldr	r3, [r4, #0]
 8000896:	6818      	ldr	r0, [r3, #0]
 8000898:	06c6      	lsls	r6, r0, #27
 800089a:	d534      	bpl.n	8000906 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800089c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800089e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80008a2:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80008a4:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80008a6:	d125      	bne.n	80008f4 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80008a8:	f022 0216 	bic.w	r2, r2, #22
 80008ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80008ae:	695a      	ldr	r2, [r3, #20]
 80008b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80008b4:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80008b6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80008b8:	b90a      	cbnz	r2, 80008be <HAL_DMA_IRQHandler+0xc6>
 80008ba:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80008bc:	b11a      	cbz	r2, 80008c6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	f022 0208 	bic.w	r2, r2, #8
 80008c4:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80008c6:	233f      	movs	r3, #63	; 0x3f
 80008c8:	408b      	lsls	r3, r1
 80008ca:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 80008cc:	2300      	movs	r3, #0
 80008ce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80008d2:	2301      	movs	r3, #1
 80008d4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80008d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80008da:	b10b      	cbz	r3, 80008e0 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 80008dc:	4620      	mov	r0, r4
 80008de:	4798      	blx	r3
}
 80008e0:	b003      	add	sp, #12
 80008e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80008e8:	bf5e      	ittt	pl
 80008ea:	681a      	ldrpl	r2, [r3, #0]
 80008ec:	f022 0208 	bicpl.w	r2, r2, #8
 80008f0:	601a      	strpl	r2, [r3, #0]
 80008f2:	e7c4      	b.n	800087e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80008f4:	0350      	lsls	r0, r2, #13
 80008f6:	d528      	bpl.n	800094a <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	0319      	lsls	r1, r3, #12
 80008fc:	d432      	bmi.n	8000964 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 80008fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000900:	b10b      	cbz	r3, 8000906 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000902:	4620      	mov	r0, r4
 8000904:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000906:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000908:	2b00      	cmp	r3, #0
 800090a:	d0e9      	beq.n	80008e0 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800090c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800090e:	07da      	lsls	r2, r3, #31
 8000910:	d519      	bpl.n	8000946 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000912:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000914:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000916:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800091a:	6813      	ldr	r3, [r2, #0]
 800091c:	f023 0301 	bic.w	r3, r3, #1
 8000920:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000922:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000926:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 800092a:	9b01      	ldr	r3, [sp, #4]
 800092c:	3301      	adds	r3, #1
 800092e:	429f      	cmp	r7, r3
 8000930:	9301      	str	r3, [sp, #4]
 8000932:	d302      	bcc.n	800093a <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000934:	6813      	ldr	r3, [r2, #0]
 8000936:	07db      	lsls	r3, r3, #31
 8000938:	d4f7      	bmi.n	800092a <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 800093a:	2300      	movs	r3, #0
 800093c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000940:	2301      	movs	r3, #1
 8000942:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000946:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000948:	e7c7      	b.n	80008da <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000950:	d108      	bne.n	8000964 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000952:	6819      	ldr	r1, [r3, #0]
 8000954:	f021 0110 	bic.w	r1, r1, #16
 8000958:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800095a:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 800095c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000960:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000964:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000966:	e7cb      	b.n	8000900 <HAL_DMA_IRQHandler+0x108>
 8000968:	20000010 	.word	0x20000010

0800096c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800096c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000970:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000972:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000974:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000b18 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000978:	4a65      	ldr	r2, [pc, #404]	; (8000b10 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800097a:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000b1c <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800097e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000980:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000982:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000986:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000988:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800098c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000990:	45b6      	cmp	lr, r6
 8000992:	f040 80aa 	bne.w	8000aea <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000996:	684c      	ldr	r4, [r1, #4]
 8000998:	f024 0710 	bic.w	r7, r4, #16
 800099c:	2f02      	cmp	r7, #2
 800099e:	d116      	bne.n	80009ce <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80009a0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80009a4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009a8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80009ac:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009b0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80009b4:	f04f 0c0f 	mov.w	ip, #15
 80009b8:	fa0c fc0b 	lsl.w	ip, ip, fp
 80009bc:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009c0:	690d      	ldr	r5, [r1, #16]
 80009c2:	fa05 f50b 	lsl.w	r5, r5, fp
 80009c6:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80009ca:	f8ca 5020 	str.w	r5, [sl, #32]
 80009ce:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009d2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80009d4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009d8:	fa05 f50a 	lsl.w	r5, r5, sl
 80009dc:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009de:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009e2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009e6:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009ea:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009ec:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009f0:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80009f2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009f6:	d811      	bhi.n	8000a1c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80009f8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009fa:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009fe:	68cf      	ldr	r7, [r1, #12]
 8000a00:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000a04:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000a08:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a0a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a0c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a10:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000a14:	409f      	lsls	r7, r3
 8000a16:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000a1a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000a1c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a1e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a20:	688f      	ldr	r7, [r1, #8]
 8000a22:	fa07 f70a 	lsl.w	r7, r7, sl
 8000a26:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000a28:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a2a:	00e5      	lsls	r5, r4, #3
 8000a2c:	d55d      	bpl.n	8000aea <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	f04f 0b00 	mov.w	fp, #0
 8000a32:	f8cd b00c 	str.w	fp, [sp, #12]
 8000a36:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a3a:	4d36      	ldr	r5, [pc, #216]	; (8000b14 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000a40:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000a44:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000a48:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000a4c:	9703      	str	r7, [sp, #12]
 8000a4e:	9f03      	ldr	r7, [sp, #12]
 8000a50:	f023 0703 	bic.w	r7, r3, #3
 8000a54:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000a58:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a5c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000a60:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a64:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000a68:	f04f 0e0f 	mov.w	lr, #15
 8000a6c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a70:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a72:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a76:	d03f      	beq.n	8000af8 <HAL_GPIO_Init+0x18c>
 8000a78:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a7c:	42a8      	cmp	r0, r5
 8000a7e:	d03d      	beq.n	8000afc <HAL_GPIO_Init+0x190>
 8000a80:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a84:	42a8      	cmp	r0, r5
 8000a86:	d03b      	beq.n	8000b00 <HAL_GPIO_Init+0x194>
 8000a88:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a8c:	42a8      	cmp	r0, r5
 8000a8e:	d039      	beq.n	8000b04 <HAL_GPIO_Init+0x198>
 8000a90:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a94:	42a8      	cmp	r0, r5
 8000a96:	d037      	beq.n	8000b08 <HAL_GPIO_Init+0x19c>
 8000a98:	4548      	cmp	r0, r9
 8000a9a:	d037      	beq.n	8000b0c <HAL_GPIO_Init+0x1a0>
 8000a9c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000aa0:	42a8      	cmp	r0, r5
 8000aa2:	bf14      	ite	ne
 8000aa4:	2507      	movne	r5, #7
 8000aa6:	2506      	moveq	r5, #6
 8000aa8:	fa05 f50c 	lsl.w	r5, r5, ip
 8000aac:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ab0:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000ab2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ab4:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ab6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000aba:	bf0c      	ite	eq
 8000abc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000abe:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000ac0:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000ac2:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ac4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000ac8:	bf0c      	ite	eq
 8000aca:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000acc:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000ace:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ad0:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ad2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000ad6:	bf0c      	ite	eq
 8000ad8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000ada:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000adc:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000ade:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ae0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000ae2:	bf54      	ite	pl
 8000ae4:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000ae6:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000ae8:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aea:	3301      	adds	r3, #1
 8000aec:	2b10      	cmp	r3, #16
 8000aee:	f47f af48 	bne.w	8000982 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000af2:	b005      	add	sp, #20
 8000af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000af8:	465d      	mov	r5, fp
 8000afa:	e7d5      	b.n	8000aa8 <HAL_GPIO_Init+0x13c>
 8000afc:	2501      	movs	r5, #1
 8000afe:	e7d3      	b.n	8000aa8 <HAL_GPIO_Init+0x13c>
 8000b00:	2502      	movs	r5, #2
 8000b02:	e7d1      	b.n	8000aa8 <HAL_GPIO_Init+0x13c>
 8000b04:	2503      	movs	r5, #3
 8000b06:	e7cf      	b.n	8000aa8 <HAL_GPIO_Init+0x13c>
 8000b08:	2504      	movs	r5, #4
 8000b0a:	e7cd      	b.n	8000aa8 <HAL_GPIO_Init+0x13c>
 8000b0c:	2505      	movs	r5, #5
 8000b0e:	e7cb      	b.n	8000aa8 <HAL_GPIO_Init+0x13c>
 8000b10:	40013c00 	.word	0x40013c00
 8000b14:	40020000 	.word	0x40020000
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40021400 	.word	0x40021400

08000b20 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b20:	6903      	ldr	r3, [r0, #16]
 8000b22:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000b24:	bf14      	ite	ne
 8000b26:	2001      	movne	r0, #1
 8000b28:	2000      	moveq	r0, #0
 8000b2a:	4770      	bx	lr

08000b2c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b2c:	b10a      	cbz	r2, 8000b32 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b2e:	6181      	str	r1, [r0, #24]
 8000b30:	4770      	bx	lr
 8000b32:	0409      	lsls	r1, r1, #16
 8000b34:	e7fb      	b.n	8000b2e <HAL_GPIO_WritePin+0x2>
	...

08000b38 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000b40:	4c18      	ldr	r4, [pc, #96]	; (8000ba4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b44:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b48:	641a      	str	r2, [r3, #64]	; 0x40
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b50:	9301      	str	r3, [sp, #4]
 8000b52:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000b54:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <HAL_PWREx_EnableOverDrive+0x70>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000b5a:	f002 f979 	bl	8002e50 <HAL_GetTick>
 8000b5e:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000b60:	6863      	ldr	r3, [r4, #4]
 8000b62:	03da      	lsls	r2, r3, #15
 8000b64:	d50b      	bpl.n	8000b7e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000b68:	4c0e      	ldr	r4, [pc, #56]	; (8000ba4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000b6e:	f002 f96f 	bl	8002e50 <HAL_GetTick>
 8000b72:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000b74:	6863      	ldr	r3, [r4, #4]
 8000b76:	039b      	lsls	r3, r3, #14
 8000b78:	d50a      	bpl.n	8000b90 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	e006      	b.n	8000b8c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000b7e:	f002 f967 	bl	8002e50 <HAL_GetTick>
 8000b82:	1b40      	subs	r0, r0, r5
 8000b84:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000b88:	d9ea      	bls.n	8000b60 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8000b8a:	2003      	movs	r0, #3
}
 8000b8c:	b003      	add	sp, #12
 8000b8e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000b90:	f002 f95e 	bl	8002e50 <HAL_GetTick>
 8000b94:	1b40      	subs	r0, r0, r5
 8000b96:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000b9a:	d9eb      	bls.n	8000b74 <HAL_PWREx_EnableOverDrive+0x3c>
 8000b9c:	e7f5      	b.n	8000b8a <HAL_PWREx_EnableOverDrive+0x52>
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40007000 	.word	0x40007000
 8000ba8:	420e0040 	.word	0x420e0040
 8000bac:	420e0044 	.word	0x420e0044

08000bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bb4:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	b910      	cbnz	r0, 8000bc0 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8000bba:	2001      	movs	r0, #1
 8000bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000bc0:	4b44      	ldr	r3, [pc, #272]	; (8000cd4 <HAL_RCC_ClockConfig+0x124>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	f002 020f 	and.w	r2, r2, #15
 8000bc8:	428a      	cmp	r2, r1
 8000bca:	d328      	bcc.n	8000c1e <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bcc:	6821      	ldr	r1, [r4, #0]
 8000bce:	078f      	lsls	r7, r1, #30
 8000bd0:	d42d      	bmi.n	8000c2e <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bd2:	07c8      	lsls	r0, r1, #31
 8000bd4:	d440      	bmi.n	8000c58 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000bd6:	4b3f      	ldr	r3, [pc, #252]	; (8000cd4 <HAL_RCC_ClockConfig+0x124>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	f002 020f 	and.w	r2, r2, #15
 8000bde:	4295      	cmp	r5, r2
 8000be0:	d366      	bcc.n	8000cb0 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000be2:	6822      	ldr	r2, [r4, #0]
 8000be4:	0751      	lsls	r1, r2, #29
 8000be6:	d46c      	bmi.n	8000cc2 <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000be8:	0713      	lsls	r3, r2, #28
 8000bea:	d507      	bpl.n	8000bfc <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000bec:	4a3a      	ldr	r2, [pc, #232]	; (8000cd8 <HAL_RCC_ClockConfig+0x128>)
 8000bee:	6921      	ldr	r1, [r4, #16]
 8000bf0:	6893      	ldr	r3, [r2, #8]
 8000bf2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000bf6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000bfa:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000bfc:	f000 f8b6 	bl	8000d6c <HAL_RCC_GetSysClockFreq>
 8000c00:	4b35      	ldr	r3, [pc, #212]	; (8000cd8 <HAL_RCC_ClockConfig+0x128>)
 8000c02:	4a36      	ldr	r2, [pc, #216]	; (8000cdc <HAL_RCC_ClockConfig+0x12c>)
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c0a:	5cd3      	ldrb	r3, [r2, r3]
 8000c0c:	40d8      	lsrs	r0, r3
 8000c0e:	4b34      	ldr	r3, [pc, #208]	; (8000ce0 <HAL_RCC_ClockConfig+0x130>)
 8000c10:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c12:	2000      	movs	r0, #0
 8000c14:	f002 f82e 	bl	8002c74 <HAL_InitTick>

  return HAL_OK;
 8000c18:	2000      	movs	r0, #0
 8000c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c1e:	b2ca      	uxtb	r2, r1
 8000c20:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f003 030f 	and.w	r3, r3, #15
 8000c28:	4299      	cmp	r1, r3
 8000c2a:	d1c6      	bne.n	8000bba <HAL_RCC_ClockConfig+0xa>
 8000c2c:	e7ce      	b.n	8000bcc <HAL_RCC_ClockConfig+0x1c>
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c30:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c34:	bf1e      	ittt	ne
 8000c36:	689a      	ldrne	r2, [r3, #8]
 8000c38:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000c3c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c3e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c40:	bf42      	ittt	mi
 8000c42:	689a      	ldrmi	r2, [r3, #8]
 8000c44:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000c48:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c4a:	689a      	ldr	r2, [r3, #8]
 8000c4c:	68a0      	ldr	r0, [r4, #8]
 8000c4e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c52:	4302      	orrs	r2, r0
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	e7bc      	b.n	8000bd2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c58:	6862      	ldr	r2, [r4, #4]
 8000c5a:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <HAL_RCC_ClockConfig+0x128>)
 8000c5c:	2a01      	cmp	r2, #1
 8000c5e:	d11d      	bne.n	8000c9c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c66:	d0a8      	beq.n	8000bba <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c68:	4e1b      	ldr	r6, [pc, #108]	; (8000cd8 <HAL_RCC_ClockConfig+0x128>)
 8000c6a:	68b3      	ldr	r3, [r6, #8]
 8000c6c:	f023 0303 	bic.w	r3, r3, #3
 8000c70:	4313      	orrs	r3, r2
 8000c72:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c74:	f002 f8ec 	bl	8002e50 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c78:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c7c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c7e:	68b3      	ldr	r3, [r6, #8]
 8000c80:	6862      	ldr	r2, [r4, #4]
 8000c82:	f003 030c 	and.w	r3, r3, #12
 8000c86:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c8a:	d0a4      	beq.n	8000bd6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c8c:	f002 f8e0 	bl	8002e50 <HAL_GetTick>
 8000c90:	1bc0      	subs	r0, r0, r7
 8000c92:	4540      	cmp	r0, r8
 8000c94:	d9f3      	bls.n	8000c7e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000c96:	2003      	movs	r0, #3
}
 8000c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c9c:	1e91      	subs	r1, r2, #2
 8000c9e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ca0:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ca2:	d802      	bhi.n	8000caa <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ca4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000ca8:	e7dd      	b.n	8000c66 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000caa:	f013 0f02 	tst.w	r3, #2
 8000cae:	e7da      	b.n	8000c66 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cb0:	b2ea      	uxtb	r2, r5
 8000cb2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 030f 	and.w	r3, r3, #15
 8000cba:	429d      	cmp	r5, r3
 8000cbc:	f47f af7d 	bne.w	8000bba <HAL_RCC_ClockConfig+0xa>
 8000cc0:	e78f      	b.n	8000be2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000cc2:	4905      	ldr	r1, [pc, #20]	; (8000cd8 <HAL_RCC_ClockConfig+0x128>)
 8000cc4:	68e0      	ldr	r0, [r4, #12]
 8000cc6:	688b      	ldr	r3, [r1, #8]
 8000cc8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000ccc:	4303      	orrs	r3, r0
 8000cce:	608b      	str	r3, [r1, #8]
 8000cd0:	e78a      	b.n	8000be8 <HAL_RCC_ClockConfig+0x38>
 8000cd2:	bf00      	nop
 8000cd4:	40023c00 	.word	0x40023c00
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	08003ffd 	.word	0x08003ffd
 8000ce0:	20000010 	.word	0x20000010

08000ce4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000ce4:	4b01      	ldr	r3, [pc, #4]	; (8000cec <HAL_RCC_GetHCLKFreq+0x8>)
 8000ce6:	6818      	ldr	r0, [r3, #0]
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000010 	.word	0x20000010

08000cf0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000cf2:	4a05      	ldr	r2, [pc, #20]	; (8000d08 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000cfa:	5cd3      	ldrb	r3, [r2, r3]
 8000cfc:	4a03      	ldr	r2, [pc, #12]	; (8000d0c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000cfe:	6810      	ldr	r0, [r2, #0]
}
 8000d00:	40d8      	lsrs	r0, r3
 8000d02:	4770      	bx	lr
 8000d04:	40023800 	.word	0x40023800
 8000d08:	0800400d 	.word	0x0800400d
 8000d0c:	20000010 	.word	0x20000010

08000d10 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000d1a:	5cd3      	ldrb	r3, [r2, r3]
 8000d1c:	4a03      	ldr	r2, [pc, #12]	; (8000d2c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000d1e:	6810      	ldr	r0, [r2, #0]
}
 8000d20:	40d8      	lsrs	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	40023800 	.word	0x40023800
 8000d28:	0800400d 	.word	0x0800400d
 8000d2c:	20000010 	.word	0x20000010

08000d30 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000d30:	230f      	movs	r3, #15
 8000d32:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <HAL_RCC_GetClockConfig+0x34>)
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	f002 0203 	and.w	r2, r2, #3
 8000d3c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000d3e:	689a      	ldr	r2, [r3, #8]
 8000d40:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000d44:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000d46:	689a      	ldr	r2, [r3, #8]
 8000d48:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000d4c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	08db      	lsrs	r3, r3, #3
 8000d52:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000d56:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <HAL_RCC_GetClockConfig+0x38>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f003 030f 	and.w	r3, r3, #15
 8000d60:	600b      	str	r3, [r1, #0]
 8000d62:	4770      	bx	lr
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40023c00 	.word	0x40023c00

08000d6c <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d6c:	4920      	ldr	r1, [pc, #128]	; (8000df0 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8000d6e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d70:	688b      	ldr	r3, [r1, #8]
 8000d72:	f003 030c 	and.w	r3, r3, #12
 8000d76:	2b08      	cmp	r3, #8
 8000d78:	d007      	beq.n	8000d8a <HAL_RCC_GetSysClockFreq+0x1e>
 8000d7a:	2b0c      	cmp	r3, #12
 8000d7c:	d020      	beq.n	8000dc0 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000d7e:	4a1d      	ldr	r2, [pc, #116]	; (8000df4 <HAL_RCC_GetSysClockFreq+0x88>)
 8000d80:	481d      	ldr	r0, [pc, #116]	; (8000df8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	bf18      	it	ne
 8000d86:	4610      	movne	r0, r2
 8000d88:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d8a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d8c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d8e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d90:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d94:	bf14      	ite	ne
 8000d96:	4818      	ldrne	r0, [pc, #96]	; (8000df8 <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d98:	4816      	ldreq	r0, [pc, #88]	; (8000df4 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d9a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000d9e:	bf18      	it	ne
 8000da0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000da2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000da6:	fba1 0100 	umull	r0, r1, r1, r0
 8000daa:	f7ff fa89 	bl	80002c0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <HAL_RCC_GetSysClockFreq+0x84>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000db6:	3301      	adds	r3, #1
 8000db8:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 8000dba:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000dbe:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000dc0:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000dc2:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000dc4:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000dc6:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000dca:	bf14      	ite	ne
 8000dcc:	480a      	ldrne	r0, [pc, #40]	; (8000df8 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000dce:	4809      	ldreq	r0, [pc, #36]	; (8000df4 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000dd0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000dd8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ddc:	fba1 0100 	umull	r0, r1, r1, r0
 8000de0:	f7ff fa6e 	bl	80002c0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000de4:	4b02      	ldr	r3, [pc, #8]	; (8000df0 <HAL_RCC_GetSysClockFreq+0x84>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8000dec:	e7e5      	b.n	8000dba <HAL_RCC_GetSysClockFreq+0x4e>
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800
 8000df4:	00f42400 	.word	0x00f42400
 8000df8:	007a1200 	.word	0x007a1200

08000dfc <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dfc:	6803      	ldr	r3, [r0, #0]
{
 8000dfe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e02:	07df      	lsls	r7, r3, #31
{
 8000e04:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e06:	d410      	bmi.n	8000e2a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e08:	6823      	ldr	r3, [r4, #0]
 8000e0a:	079e      	lsls	r6, r3, #30
 8000e0c:	d467      	bmi.n	8000ede <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e0e:	6823      	ldr	r3, [r4, #0]
 8000e10:	071a      	lsls	r2, r3, #28
 8000e12:	f100 80b2 	bmi.w	8000f7a <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e16:	6823      	ldr	r3, [r4, #0]
 8000e18:	075b      	lsls	r3, r3, #29
 8000e1a:	f100 80d0 	bmi.w	8000fbe <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e1e:	69a2      	ldr	r2, [r4, #24]
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f040 8139 	bne.w	8001098 <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000e26:	2000      	movs	r0, #0
 8000e28:	e01e      	b.n	8000e68 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000e2a:	4b97      	ldr	r3, [pc, #604]	; (8001088 <HAL_RCC_OscConfig+0x28c>)
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	f002 020c 	and.w	r2, r2, #12
 8000e32:	2a04      	cmp	r2, #4
 8000e34:	d010      	beq.n	8000e58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000e36:	689a      	ldr	r2, [r3, #8]
 8000e38:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000e3c:	2a08      	cmp	r2, #8
 8000e3e:	d102      	bne.n	8000e46 <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	025d      	lsls	r5, r3, #9
 8000e44:	d408      	bmi.n	8000e58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e46:	4b90      	ldr	r3, [pc, #576]	; (8001088 <HAL_RCC_OscConfig+0x28c>)
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000e4e:	2a0c      	cmp	r2, #12
 8000e50:	d10d      	bne.n	8000e6e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	0250      	lsls	r0, r2, #9
 8000e56:	d50a      	bpl.n	8000e6e <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e58:	4b8b      	ldr	r3, [pc, #556]	; (8001088 <HAL_RCC_OscConfig+0x28c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	0399      	lsls	r1, r3, #14
 8000e5e:	d5d3      	bpl.n	8000e08 <HAL_RCC_OscConfig+0xc>
 8000e60:	6863      	ldr	r3, [r4, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1d0      	bne.n	8000e08 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000e66:	2001      	movs	r0, #1
}
 8000e68:	b002      	add	sp, #8
 8000e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e6e:	6862      	ldr	r2, [r4, #4]
 8000e70:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000e74:	d111      	bne.n	8000e9a <HAL_RCC_OscConfig+0x9e>
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000e7c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e7e:	f001 ffe7 	bl	8002e50 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e82:	4d81      	ldr	r5, [pc, #516]	; (8001088 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000e84:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e86:	682b      	ldr	r3, [r5, #0]
 8000e88:	039a      	lsls	r2, r3, #14
 8000e8a:	d4bd      	bmi.n	8000e08 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e8c:	f001 ffe0 	bl	8002e50 <HAL_GetTick>
 8000e90:	1b80      	subs	r0, r0, r6
 8000e92:	2864      	cmp	r0, #100	; 0x64
 8000e94:	d9f7      	bls.n	8000e86 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8000e96:	2003      	movs	r0, #3
 8000e98:	e7e6      	b.n	8000e68 <HAL_RCC_OscConfig+0x6c>
 8000e9a:	4d7b      	ldr	r5, [pc, #492]	; (8001088 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e9c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000ea0:	682b      	ldr	r3, [r5, #0]
 8000ea2:	d107      	bne.n	8000eb4 <HAL_RCC_OscConfig+0xb8>
 8000ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ea8:	602b      	str	r3, [r5, #0]
 8000eaa:	682b      	ldr	r3, [r5, #0]
 8000eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb0:	602b      	str	r3, [r5, #0]
 8000eb2:	e7e4      	b.n	8000e7e <HAL_RCC_OscConfig+0x82>
 8000eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eb8:	602b      	str	r3, [r5, #0]
 8000eba:	682b      	ldr	r3, [r5, #0]
 8000ebc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ec0:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ec2:	2a00      	cmp	r2, #0
 8000ec4:	d1db      	bne.n	8000e7e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000ec6:	f001 ffc3 	bl	8002e50 <HAL_GetTick>
 8000eca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ecc:	682b      	ldr	r3, [r5, #0]
 8000ece:	039b      	lsls	r3, r3, #14
 8000ed0:	d59a      	bpl.n	8000e08 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ed2:	f001 ffbd 	bl	8002e50 <HAL_GetTick>
 8000ed6:	1b80      	subs	r0, r0, r6
 8000ed8:	2864      	cmp	r0, #100	; 0x64
 8000eda:	d9f7      	bls.n	8000ecc <HAL_RCC_OscConfig+0xd0>
 8000edc:	e7db      	b.n	8000e96 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000ede:	4b6a      	ldr	r3, [pc, #424]	; (8001088 <HAL_RCC_OscConfig+0x28c>)
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	f012 0f0c 	tst.w	r2, #12
 8000ee6:	d010      	beq.n	8000f0a <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000eee:	2a08      	cmp	r2, #8
 8000ef0:	d102      	bne.n	8000ef8 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	025f      	lsls	r7, r3, #9
 8000ef6:	d508      	bpl.n	8000f0a <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ef8:	4a63      	ldr	r2, [pc, #396]	; (8001088 <HAL_RCC_OscConfig+0x28c>)
 8000efa:	6893      	ldr	r3, [r2, #8]
 8000efc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000f00:	2b0c      	cmp	r3, #12
 8000f02:	d111      	bne.n	8000f28 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f04:	6853      	ldr	r3, [r2, #4]
 8000f06:	025e      	lsls	r6, r3, #9
 8000f08:	d40e      	bmi.n	8000f28 <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f0a:	4b5f      	ldr	r3, [pc, #380]	; (8001088 <HAL_RCC_OscConfig+0x28c>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	0795      	lsls	r5, r2, #30
 8000f10:	d502      	bpl.n	8000f18 <HAL_RCC_OscConfig+0x11c>
 8000f12:	68e2      	ldr	r2, [r4, #12]
 8000f14:	2a01      	cmp	r2, #1
 8000f16:	d1a6      	bne.n	8000e66 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	6921      	ldr	r1, [r4, #16]
 8000f1c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000f20:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000f24:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f26:	e772      	b.n	8000e0e <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f28:	68e2      	ldr	r2, [r4, #12]
 8000f2a:	4b58      	ldr	r3, [pc, #352]	; (800108c <HAL_RCC_OscConfig+0x290>)
 8000f2c:	b1b2      	cbz	r2, 8000f5c <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8000f2e:	2201      	movs	r2, #1
 8000f30:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f32:	f001 ff8d 	bl	8002e50 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f36:	4d54      	ldr	r5, [pc, #336]	; (8001088 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000f38:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f3a:	682b      	ldr	r3, [r5, #0]
 8000f3c:	0798      	lsls	r0, r3, #30
 8000f3e:	d507      	bpl.n	8000f50 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f40:	682b      	ldr	r3, [r5, #0]
 8000f42:	6922      	ldr	r2, [r4, #16]
 8000f44:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f48:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f4c:	602b      	str	r3, [r5, #0]
 8000f4e:	e75e      	b.n	8000e0e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f50:	f001 ff7e 	bl	8002e50 <HAL_GetTick>
 8000f54:	1b80      	subs	r0, r0, r6
 8000f56:	2802      	cmp	r0, #2
 8000f58:	d9ef      	bls.n	8000f3a <HAL_RCC_OscConfig+0x13e>
 8000f5a:	e79c      	b.n	8000e96 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8000f5c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f5e:	f001 ff77 	bl	8002e50 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f62:	4d49      	ldr	r5, [pc, #292]	; (8001088 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000f64:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f66:	682b      	ldr	r3, [r5, #0]
 8000f68:	0799      	lsls	r1, r3, #30
 8000f6a:	f57f af50 	bpl.w	8000e0e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f6e:	f001 ff6f 	bl	8002e50 <HAL_GetTick>
 8000f72:	1b80      	subs	r0, r0, r6
 8000f74:	2802      	cmp	r0, #2
 8000f76:	d9f6      	bls.n	8000f66 <HAL_RCC_OscConfig+0x16a>
 8000f78:	e78d      	b.n	8000e96 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f7a:	6962      	ldr	r2, [r4, #20]
 8000f7c:	4b44      	ldr	r3, [pc, #272]	; (8001090 <HAL_RCC_OscConfig+0x294>)
 8000f7e:	b17a      	cbz	r2, 8000fa0 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8000f80:	2201      	movs	r2, #1
 8000f82:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f84:	f001 ff64 	bl	8002e50 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f88:	4d3f      	ldr	r5, [pc, #252]	; (8001088 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000f8a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f8c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f8e:	079f      	lsls	r7, r3, #30
 8000f90:	f53f af41 	bmi.w	8000e16 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f94:	f001 ff5c 	bl	8002e50 <HAL_GetTick>
 8000f98:	1b80      	subs	r0, r0, r6
 8000f9a:	2802      	cmp	r0, #2
 8000f9c:	d9f6      	bls.n	8000f8c <HAL_RCC_OscConfig+0x190>
 8000f9e:	e77a      	b.n	8000e96 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8000fa0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000fa2:	f001 ff55 	bl	8002e50 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fa6:	4d38      	ldr	r5, [pc, #224]	; (8001088 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000fa8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000faa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000fac:	0798      	lsls	r0, r3, #30
 8000fae:	f57f af32 	bpl.w	8000e16 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fb2:	f001 ff4d 	bl	8002e50 <HAL_GetTick>
 8000fb6:	1b80      	subs	r0, r0, r6
 8000fb8:	2802      	cmp	r0, #2
 8000fba:	d9f6      	bls.n	8000faa <HAL_RCC_OscConfig+0x1ae>
 8000fbc:	e76b      	b.n	8000e96 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fbe:	4b32      	ldr	r3, [pc, #200]	; (8001088 <HAL_RCC_OscConfig+0x28c>)
 8000fc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc2:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000fc6:	d128      	bne.n	800101a <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fc8:	9201      	str	r2, [sp, #4]
 8000fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fcc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fd0:	641a      	str	r2, [r3, #64]	; 0x40
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000fdc:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fde:	4d2d      	ldr	r5, [pc, #180]	; (8001094 <HAL_RCC_OscConfig+0x298>)
 8000fe0:	682b      	ldr	r3, [r5, #0]
 8000fe2:	05d9      	lsls	r1, r3, #23
 8000fe4:	d51b      	bpl.n	800101e <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe6:	68a3      	ldr	r3, [r4, #8]
 8000fe8:	4d27      	ldr	r5, [pc, #156]	; (8001088 <HAL_RCC_OscConfig+0x28c>)
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d127      	bne.n	800103e <HAL_RCC_OscConfig+0x242>
 8000fee:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000ff6:	f001 ff2b 	bl	8002e50 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ffa:	4d23      	ldr	r5, [pc, #140]	; (8001088 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000ffc:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ffe:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001002:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001004:	079b      	lsls	r3, r3, #30
 8001006:	d539      	bpl.n	800107c <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 8001008:	2e00      	cmp	r6, #0
 800100a:	f43f af08 	beq.w	8000e1e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800100e:	4a1e      	ldr	r2, [pc, #120]	; (8001088 <HAL_RCC_OscConfig+0x28c>)
 8001010:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001016:	6413      	str	r3, [r2, #64]	; 0x40
 8001018:	e701      	b.n	8000e1e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800101a:	2600      	movs	r6, #0
 800101c:	e7df      	b.n	8000fde <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800101e:	682b      	ldr	r3, [r5, #0]
 8001020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001024:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001026:	f001 ff13 	bl	8002e50 <HAL_GetTick>
 800102a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800102c:	682b      	ldr	r3, [r5, #0]
 800102e:	05da      	lsls	r2, r3, #23
 8001030:	d4d9      	bmi.n	8000fe6 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001032:	f001 ff0d 	bl	8002e50 <HAL_GetTick>
 8001036:	1bc0      	subs	r0, r0, r7
 8001038:	2802      	cmp	r0, #2
 800103a:	d9f7      	bls.n	800102c <HAL_RCC_OscConfig+0x230>
 800103c:	e72b      	b.n	8000e96 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800103e:	2b05      	cmp	r3, #5
 8001040:	d104      	bne.n	800104c <HAL_RCC_OscConfig+0x250>
 8001042:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001044:	f043 0304 	orr.w	r3, r3, #4
 8001048:	672b      	str	r3, [r5, #112]	; 0x70
 800104a:	e7d0      	b.n	8000fee <HAL_RCC_OscConfig+0x1f2>
 800104c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800104e:	f022 0201 	bic.w	r2, r2, #1
 8001052:	672a      	str	r2, [r5, #112]	; 0x70
 8001054:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001056:	f022 0204 	bic.w	r2, r2, #4
 800105a:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1ca      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8001060:	f001 fef6 	bl	8002e50 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001064:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001068:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800106a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800106c:	0798      	lsls	r0, r3, #30
 800106e:	d5cb      	bpl.n	8001008 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001070:	f001 feee 	bl	8002e50 <HAL_GetTick>
 8001074:	1bc0      	subs	r0, r0, r7
 8001076:	4540      	cmp	r0, r8
 8001078:	d9f7      	bls.n	800106a <HAL_RCC_OscConfig+0x26e>
 800107a:	e70c      	b.n	8000e96 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800107c:	f001 fee8 	bl	8002e50 <HAL_GetTick>
 8001080:	1bc0      	subs	r0, r0, r7
 8001082:	4540      	cmp	r0, r8
 8001084:	d9bd      	bls.n	8001002 <HAL_RCC_OscConfig+0x206>
 8001086:	e706      	b.n	8000e96 <HAL_RCC_OscConfig+0x9a>
 8001088:	40023800 	.word	0x40023800
 800108c:	42470000 	.word	0x42470000
 8001090:	42470e80 	.word	0x42470e80
 8001094:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001098:	4d23      	ldr	r5, [pc, #140]	; (8001128 <HAL_RCC_OscConfig+0x32c>)
 800109a:	68ab      	ldr	r3, [r5, #8]
 800109c:	f003 030c 	and.w	r3, r3, #12
 80010a0:	2b08      	cmp	r3, #8
 80010a2:	f43f aee0 	beq.w	8000e66 <HAL_RCC_OscConfig+0x6a>
 80010a6:	4e21      	ldr	r6, [pc, #132]	; (800112c <HAL_RCC_OscConfig+0x330>)
 80010a8:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010aa:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80010ac:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010ae:	d12d      	bne.n	800110c <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 80010b0:	f001 fece 	bl	8002e50 <HAL_GetTick>
 80010b4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010b6:	682b      	ldr	r3, [r5, #0]
 80010b8:	0199      	lsls	r1, r3, #6
 80010ba:	d421      	bmi.n	8001100 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010bc:	6a22      	ldr	r2, [r4, #32]
 80010be:	69e3      	ldr	r3, [r4, #28]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80010c4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80010c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80010ca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80010ce:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80010d0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80010d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010d6:	4c14      	ldr	r4, [pc, #80]	; (8001128 <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010d8:	0852      	lsrs	r2, r2, #1
 80010da:	3a01      	subs	r2, #1
 80010dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80010e0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80010e2:	2301      	movs	r3, #1
 80010e4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80010e6:	f001 feb3 	bl	8002e50 <HAL_GetTick>
 80010ea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ec:	6823      	ldr	r3, [r4, #0]
 80010ee:	019a      	lsls	r2, r3, #6
 80010f0:	f53f ae99 	bmi.w	8000e26 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010f4:	f001 feac 	bl	8002e50 <HAL_GetTick>
 80010f8:	1b40      	subs	r0, r0, r5
 80010fa:	2802      	cmp	r0, #2
 80010fc:	d9f6      	bls.n	80010ec <HAL_RCC_OscConfig+0x2f0>
 80010fe:	e6ca      	b.n	8000e96 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001100:	f001 fea6 	bl	8002e50 <HAL_GetTick>
 8001104:	1bc0      	subs	r0, r0, r7
 8001106:	2802      	cmp	r0, #2
 8001108:	d9d5      	bls.n	80010b6 <HAL_RCC_OscConfig+0x2ba>
 800110a:	e6c4      	b.n	8000e96 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 800110c:	f001 fea0 	bl	8002e50 <HAL_GetTick>
 8001110:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001112:	682b      	ldr	r3, [r5, #0]
 8001114:	019b      	lsls	r3, r3, #6
 8001116:	f57f ae86 	bpl.w	8000e26 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800111a:	f001 fe99 	bl	8002e50 <HAL_GetTick>
 800111e:	1b00      	subs	r0, r0, r4
 8001120:	2802      	cmp	r0, #2
 8001122:	d9f6      	bls.n	8001112 <HAL_RCC_OscConfig+0x316>
 8001124:	e6b7      	b.n	8000e96 <HAL_RCC_OscConfig+0x9a>
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800
 800112c:	42470060 	.word	0x42470060

08001130 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001130:	6803      	ldr	r3, [r0, #0]
 8001132:	68da      	ldr	r2, [r3, #12]
 8001134:	f042 0201 	orr.w	r2, r2, #1
 8001138:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001140:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8001142:	bf1e      	ittt	ne
 8001144:	681a      	ldrne	r2, [r3, #0]
 8001146:	f042 0201 	orrne.w	r2, r2, #1
 800114a:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800114c:	2000      	movs	r0, #0
 800114e:	4770      	bx	lr

08001150 <HAL_TIM_OC_DelayElapsedCallback>:
 8001150:	4770      	bx	lr

08001152 <HAL_TIM_IC_CaptureCallback>:
 8001152:	4770      	bx	lr

08001154 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001154:	4770      	bx	lr

08001156 <HAL_TIM_TriggerCallback>:
 8001156:	4770      	bx	lr

08001158 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001158:	6803      	ldr	r3, [r0, #0]
 800115a:	691a      	ldr	r2, [r3, #16]
 800115c:	0791      	lsls	r1, r2, #30
{
 800115e:	b510      	push	{r4, lr}
 8001160:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001162:	d50e      	bpl.n	8001182 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	0792      	lsls	r2, r2, #30
 8001168:	d50b      	bpl.n	8001182 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800116a:	f06f 0202 	mvn.w	r2, #2
 800116e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001170:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001172:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001174:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001176:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001178:	d077      	beq.n	800126a <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800117a:	f7ff ffea 	bl	8001152 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800117e:	2300      	movs	r3, #0
 8001180:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001182:	6823      	ldr	r3, [r4, #0]
 8001184:	691a      	ldr	r2, [r3, #16]
 8001186:	0750      	lsls	r0, r2, #29
 8001188:	d510      	bpl.n	80011ac <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800118a:	68da      	ldr	r2, [r3, #12]
 800118c:	0751      	lsls	r1, r2, #29
 800118e:	d50d      	bpl.n	80011ac <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001190:	f06f 0204 	mvn.w	r2, #4
 8001194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001196:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001198:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800119a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800119e:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011a0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80011a2:	d068      	beq.n	8001276 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80011a4:	f7ff ffd5 	bl	8001152 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011a8:	2300      	movs	r3, #0
 80011aa:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80011ac:	6823      	ldr	r3, [r4, #0]
 80011ae:	691a      	ldr	r2, [r3, #16]
 80011b0:	0712      	lsls	r2, r2, #28
 80011b2:	d50f      	bpl.n	80011d4 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80011b4:	68da      	ldr	r2, [r3, #12]
 80011b6:	0710      	lsls	r0, r2, #28
 80011b8:	d50c      	bpl.n	80011d4 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80011ba:	f06f 0208 	mvn.w	r2, #8
 80011be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80011c0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80011c2:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80011c4:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80011c6:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011c8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80011ca:	d05a      	beq.n	8001282 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80011cc:	f7ff ffc1 	bl	8001152 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011d0:	2300      	movs	r3, #0
 80011d2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80011d4:	6823      	ldr	r3, [r4, #0]
 80011d6:	691a      	ldr	r2, [r3, #16]
 80011d8:	06d2      	lsls	r2, r2, #27
 80011da:	d510      	bpl.n	80011fe <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	06d0      	lsls	r0, r2, #27
 80011e0:	d50d      	bpl.n	80011fe <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80011e2:	f06f 0210 	mvn.w	r2, #16
 80011e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80011e8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80011ea:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80011ec:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80011f0:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011f2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80011f4:	d04b      	beq.n	800128e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80011f6:	f7ff ffac 	bl	8001152 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011fa:	2300      	movs	r3, #0
 80011fc:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80011fe:	6823      	ldr	r3, [r4, #0]
 8001200:	691a      	ldr	r2, [r3, #16]
 8001202:	07d1      	lsls	r1, r2, #31
 8001204:	d508      	bpl.n	8001218 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001206:	68da      	ldr	r2, [r3, #12]
 8001208:	07d2      	lsls	r2, r2, #31
 800120a:	d505      	bpl.n	8001218 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800120c:	f06f 0201 	mvn.w	r2, #1
 8001210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001212:	4620      	mov	r0, r4
 8001214:	f001 fc74 	bl	8002b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001218:	6823      	ldr	r3, [r4, #0]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	0610      	lsls	r0, r2, #24
 800121e:	d508      	bpl.n	8001232 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	0611      	lsls	r1, r2, #24
 8001224:	d505      	bpl.n	8001232 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001226:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800122a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800122c:	4620      	mov	r0, r4
 800122e:	f000 f8d4 	bl	80013da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001232:	6823      	ldr	r3, [r4, #0]
 8001234:	691a      	ldr	r2, [r3, #16]
 8001236:	0652      	lsls	r2, r2, #25
 8001238:	d508      	bpl.n	800124c <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800123a:	68da      	ldr	r2, [r3, #12]
 800123c:	0650      	lsls	r0, r2, #25
 800123e:	d505      	bpl.n	800124c <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001240:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001246:	4620      	mov	r0, r4
 8001248:	f7ff ff85 	bl	8001156 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800124c:	6823      	ldr	r3, [r4, #0]
 800124e:	691a      	ldr	r2, [r3, #16]
 8001250:	0691      	lsls	r1, r2, #26
 8001252:	d522      	bpl.n	800129a <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001254:	68da      	ldr	r2, [r3, #12]
 8001256:	0692      	lsls	r2, r2, #26
 8001258:	d51f      	bpl.n	800129a <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800125a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800125e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001260:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001266:	f000 b8b7 	b.w	80013d8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800126a:	f7ff ff71 	bl	8001150 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800126e:	4620      	mov	r0, r4
 8001270:	f7ff ff70 	bl	8001154 <HAL_TIM_PWM_PulseFinishedCallback>
 8001274:	e783      	b.n	800117e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001276:	f7ff ff6b 	bl	8001150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800127a:	4620      	mov	r0, r4
 800127c:	f7ff ff6a 	bl	8001154 <HAL_TIM_PWM_PulseFinishedCallback>
 8001280:	e792      	b.n	80011a8 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001282:	f7ff ff65 	bl	8001150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001286:	4620      	mov	r0, r4
 8001288:	f7ff ff64 	bl	8001154 <HAL_TIM_PWM_PulseFinishedCallback>
 800128c:	e7a0      	b.n	80011d0 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800128e:	f7ff ff5f 	bl	8001150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001292:	4620      	mov	r0, r4
 8001294:	f7ff ff5e 	bl	8001154 <HAL_TIM_PWM_PulseFinishedCallback>
 8001298:	e7af      	b.n	80011fa <HAL_TIM_IRQHandler+0xa2>
 800129a:	bd10      	pop	{r4, pc}

0800129c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800129c:	4a30      	ldr	r2, [pc, #192]	; (8001360 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800129e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012a0:	4290      	cmp	r0, r2
 80012a2:	d012      	beq.n	80012ca <TIM_Base_SetConfig+0x2e>
 80012a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80012a8:	d00f      	beq.n	80012ca <TIM_Base_SetConfig+0x2e>
 80012aa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80012ae:	4290      	cmp	r0, r2
 80012b0:	d00b      	beq.n	80012ca <TIM_Base_SetConfig+0x2e>
 80012b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012b6:	4290      	cmp	r0, r2
 80012b8:	d007      	beq.n	80012ca <TIM_Base_SetConfig+0x2e>
 80012ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012be:	4290      	cmp	r0, r2
 80012c0:	d003      	beq.n	80012ca <TIM_Base_SetConfig+0x2e>
 80012c2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80012c6:	4290      	cmp	r0, r2
 80012c8:	d119      	bne.n	80012fe <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80012ca:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80012d0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80012d2:	4a23      	ldr	r2, [pc, #140]	; (8001360 <TIM_Base_SetConfig+0xc4>)
 80012d4:	4290      	cmp	r0, r2
 80012d6:	d029      	beq.n	800132c <TIM_Base_SetConfig+0x90>
 80012d8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80012dc:	d026      	beq.n	800132c <TIM_Base_SetConfig+0x90>
 80012de:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80012e2:	4290      	cmp	r0, r2
 80012e4:	d022      	beq.n	800132c <TIM_Base_SetConfig+0x90>
 80012e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012ea:	4290      	cmp	r0, r2
 80012ec:	d01e      	beq.n	800132c <TIM_Base_SetConfig+0x90>
 80012ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012f2:	4290      	cmp	r0, r2
 80012f4:	d01a      	beq.n	800132c <TIM_Base_SetConfig+0x90>
 80012f6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80012fa:	4290      	cmp	r0, r2
 80012fc:	d016      	beq.n	800132c <TIM_Base_SetConfig+0x90>
 80012fe:	4a19      	ldr	r2, [pc, #100]	; (8001364 <TIM_Base_SetConfig+0xc8>)
 8001300:	4290      	cmp	r0, r2
 8001302:	d013      	beq.n	800132c <TIM_Base_SetConfig+0x90>
 8001304:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001308:	4290      	cmp	r0, r2
 800130a:	d00f      	beq.n	800132c <TIM_Base_SetConfig+0x90>
 800130c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001310:	4290      	cmp	r0, r2
 8001312:	d00b      	beq.n	800132c <TIM_Base_SetConfig+0x90>
 8001314:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001318:	4290      	cmp	r0, r2
 800131a:	d007      	beq.n	800132c <TIM_Base_SetConfig+0x90>
 800131c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001320:	4290      	cmp	r0, r2
 8001322:	d003      	beq.n	800132c <TIM_Base_SetConfig+0x90>
 8001324:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001328:	4290      	cmp	r0, r2
 800132a:	d103      	bne.n	8001334 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800132c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800132e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001332:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001334:	694a      	ldr	r2, [r1, #20]
 8001336:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800133a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800133c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800133e:	688b      	ldr	r3, [r1, #8]
 8001340:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001342:	680b      	ldr	r3, [r1, #0]
 8001344:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <TIM_Base_SetConfig+0xc4>)
 8001348:	4298      	cmp	r0, r3
 800134a:	d003      	beq.n	8001354 <TIM_Base_SetConfig+0xb8>
 800134c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001350:	4298      	cmp	r0, r3
 8001352:	d101      	bne.n	8001358 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001354:	690b      	ldr	r3, [r1, #16]
 8001356:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001358:	2301      	movs	r3, #1
 800135a:	6143      	str	r3, [r0, #20]
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40010000 	.word	0x40010000
 8001364:	40014000 	.word	0x40014000

08001368 <HAL_TIM_Base_Init>:
{
 8001368:	b510      	push	{r4, lr}
  if (htim == NULL)
 800136a:	4604      	mov	r4, r0
 800136c:	b1a0      	cbz	r0, 8001398 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800136e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001372:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001376:	b91b      	cbnz	r3, 8001380 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001378:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800137c:	f001 fc04 	bl	8002b88 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001380:	2302      	movs	r3, #2
 8001382:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001386:	6820      	ldr	r0, [r4, #0]
 8001388:	1d21      	adds	r1, r4, #4
 800138a:	f7ff ff87 	bl	800129c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800138e:	2301      	movs	r3, #1
 8001390:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001394:	2000      	movs	r0, #0
 8001396:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001398:	2001      	movs	r0, #1
}
 800139a:	bd10      	pop	{r4, pc}

0800139c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800139c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80013a0:	2b01      	cmp	r3, #1
{
 80013a2:	b530      	push	{r4, r5, lr}
 80013a4:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80013a8:	d014      	beq.n	80013d4 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80013aa:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80013ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80013b0:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80013b2:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80013b4:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80013b6:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 80013b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 80013bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80013c0:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80013c2:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80013c4:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80013c6:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80013c8:	2301      	movs	r3, #1
 80013ca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80013ce:	2300      	movs	r3, #0
 80013d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80013d4:	4618      	mov	r0, r3

  return HAL_OK;
}
 80013d6:	bd30      	pop	{r4, r5, pc}

080013d8 <HAL_TIMEx_CommutCallback>:
 80013d8:	4770      	bx	lr

080013da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80013da:	4770      	bx	lr

080013dc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80013dc:	6803      	ldr	r3, [r0, #0]
 80013de:	68da      	ldr	r2, [r3, #12]
 80013e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80013e4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80013e6:	695a      	ldr	r2, [r3, #20]
 80013e8:	f022 0201 	bic.w	r2, r2, #1
 80013ec:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80013ee:	2320      	movs	r3, #32
 80013f0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80013f4:	4770      	bx	lr
	...

080013f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80013f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013fc:	6806      	ldr	r6, [r0, #0]
 80013fe:	68c2      	ldr	r2, [r0, #12]
 8001400:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001402:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001404:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001408:	4313      	orrs	r3, r2
 800140a:	6133      	str	r3, [r6, #16]
{
 800140c:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800140e:	6883      	ldr	r3, [r0, #8]
 8001410:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001412:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001414:	4303      	orrs	r3, r0
 8001416:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001418:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800141c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800141e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001422:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8001424:	4313      	orrs	r3, r2
 8001426:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001428:	6973      	ldr	r3, [r6, #20]
 800142a:	69a2      	ldr	r2, [r4, #24]
 800142c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001430:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001432:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001436:	6173      	str	r3, [r6, #20]
 8001438:	4b7a      	ldr	r3, [pc, #488]	; (8001624 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800143a:	d17c      	bne.n	8001536 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800143c:	429e      	cmp	r6, r3
 800143e:	d003      	beq.n	8001448 <UART_SetConfig+0x50>
 8001440:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001444:	429e      	cmp	r6, r3
 8001446:	d144      	bne.n	80014d2 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001448:	f7ff fc62 	bl	8000d10 <HAL_RCC_GetPCLK2Freq>
 800144c:	2519      	movs	r5, #25
 800144e:	fb05 f300 	mul.w	r3, r5, r0
 8001452:	6860      	ldr	r0, [r4, #4]
 8001454:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001458:	0040      	lsls	r0, r0, #1
 800145a:	fbb3 f3f0 	udiv	r3, r3, r0
 800145e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001462:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001466:	f7ff fc53 	bl	8000d10 <HAL_RCC_GetPCLK2Freq>
 800146a:	6863      	ldr	r3, [r4, #4]
 800146c:	4368      	muls	r0, r5
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	fbb0 f7f3 	udiv	r7, r0, r3
 8001474:	f7ff fc4c 	bl	8000d10 <HAL_RCC_GetPCLK2Freq>
 8001478:	6863      	ldr	r3, [r4, #4]
 800147a:	4368      	muls	r0, r5
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001482:	fbb3 f3f9 	udiv	r3, r3, r9
 8001486:	fb09 7313 	mls	r3, r9, r3, r7
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	3332      	adds	r3, #50	; 0x32
 800148e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001498:	f7ff fc3a 	bl	8000d10 <HAL_RCC_GetPCLK2Freq>
 800149c:	6862      	ldr	r2, [r4, #4]
 800149e:	4368      	muls	r0, r5
 80014a0:	0052      	lsls	r2, r2, #1
 80014a2:	fbb0 faf2 	udiv	sl, r0, r2
 80014a6:	f7ff fc33 	bl	8000d10 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80014aa:	6863      	ldr	r3, [r4, #4]
 80014ac:	4368      	muls	r0, r5
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80014b4:	fbb3 f3f9 	udiv	r3, r3, r9
 80014b8:	fb09 a313 	mls	r3, r9, r3, sl
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	3332      	adds	r3, #50	; 0x32
 80014c0:	fbb3 f3f9 	udiv	r3, r3, r9
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80014ca:	443b      	add	r3, r7
 80014cc:	60b3      	str	r3, [r6, #8]
 80014ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80014d2:	f7ff fc0d 	bl	8000cf0 <HAL_RCC_GetPCLK1Freq>
 80014d6:	2519      	movs	r5, #25
 80014d8:	fb05 f300 	mul.w	r3, r5, r0
 80014dc:	6860      	ldr	r0, [r4, #4]
 80014de:	f04f 0964 	mov.w	r9, #100	; 0x64
 80014e2:	0040      	lsls	r0, r0, #1
 80014e4:	fbb3 f3f0 	udiv	r3, r3, r0
 80014e8:	fbb3 f3f9 	udiv	r3, r3, r9
 80014ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80014f0:	f7ff fbfe 	bl	8000cf0 <HAL_RCC_GetPCLK1Freq>
 80014f4:	6863      	ldr	r3, [r4, #4]
 80014f6:	4368      	muls	r0, r5
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	fbb0 f7f3 	udiv	r7, r0, r3
 80014fe:	f7ff fbf7 	bl	8000cf0 <HAL_RCC_GetPCLK1Freq>
 8001502:	6863      	ldr	r3, [r4, #4]
 8001504:	4368      	muls	r0, r5
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fbb0 f3f3 	udiv	r3, r0, r3
 800150c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001510:	fb09 7313 	mls	r3, r9, r3, r7
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	3332      	adds	r3, #50	; 0x32
 8001518:	fbb3 f3f9 	udiv	r3, r3, r9
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001522:	f7ff fbe5 	bl	8000cf0 <HAL_RCC_GetPCLK1Freq>
 8001526:	6862      	ldr	r2, [r4, #4]
 8001528:	4368      	muls	r0, r5
 800152a:	0052      	lsls	r2, r2, #1
 800152c:	fbb0 faf2 	udiv	sl, r0, r2
 8001530:	f7ff fbde 	bl	8000cf0 <HAL_RCC_GetPCLK1Freq>
 8001534:	e7b9      	b.n	80014aa <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001536:	429e      	cmp	r6, r3
 8001538:	d002      	beq.n	8001540 <UART_SetConfig+0x148>
 800153a:	4b3b      	ldr	r3, [pc, #236]	; (8001628 <UART_SetConfig+0x230>)
 800153c:	429e      	cmp	r6, r3
 800153e:	d140      	bne.n	80015c2 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001540:	f7ff fbe6 	bl	8000d10 <HAL_RCC_GetPCLK2Freq>
 8001544:	6867      	ldr	r7, [r4, #4]
 8001546:	2519      	movs	r5, #25
 8001548:	f04f 0964 	mov.w	r9, #100	; 0x64
 800154c:	fb05 f300 	mul.w	r3, r5, r0
 8001550:	00bf      	lsls	r7, r7, #2
 8001552:	fbb3 f3f7 	udiv	r3, r3, r7
 8001556:	fbb3 f3f9 	udiv	r3, r3, r9
 800155a:	011f      	lsls	r7, r3, #4
 800155c:	f7ff fbd8 	bl	8000d10 <HAL_RCC_GetPCLK2Freq>
 8001560:	6863      	ldr	r3, [r4, #4]
 8001562:	4368      	muls	r0, r5
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	fbb0 f8f3 	udiv	r8, r0, r3
 800156a:	f7ff fbd1 	bl	8000d10 <HAL_RCC_GetPCLK2Freq>
 800156e:	6863      	ldr	r3, [r4, #4]
 8001570:	4368      	muls	r0, r5
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	fbb0 f3f3 	udiv	r3, r0, r3
 8001578:	fbb3 f3f9 	udiv	r3, r3, r9
 800157c:	fb09 8313 	mls	r3, r9, r3, r8
 8001580:	011b      	lsls	r3, r3, #4
 8001582:	3332      	adds	r3, #50	; 0x32
 8001584:	fbb3 f3f9 	udiv	r3, r3, r9
 8001588:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800158c:	f7ff fbc0 	bl	8000d10 <HAL_RCC_GetPCLK2Freq>
 8001590:	6862      	ldr	r2, [r4, #4]
 8001592:	4368      	muls	r0, r5
 8001594:	0092      	lsls	r2, r2, #2
 8001596:	fbb0 faf2 	udiv	sl, r0, r2
 800159a:	f7ff fbb9 	bl	8000d10 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800159e:	6863      	ldr	r3, [r4, #4]
 80015a0:	4368      	muls	r0, r5
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80015a8:	fbb3 f3f9 	udiv	r3, r3, r9
 80015ac:	fb09 a313 	mls	r3, r9, r3, sl
 80015b0:	011b      	lsls	r3, r3, #4
 80015b2:	3332      	adds	r3, #50	; 0x32
 80015b4:	fbb3 f3f9 	udiv	r3, r3, r9
 80015b8:	f003 030f 	and.w	r3, r3, #15
 80015bc:	ea43 0308 	orr.w	r3, r3, r8
 80015c0:	e783      	b.n	80014ca <UART_SetConfig+0xd2>
 80015c2:	f7ff fb95 	bl	8000cf0 <HAL_RCC_GetPCLK1Freq>
 80015c6:	6867      	ldr	r7, [r4, #4]
 80015c8:	2519      	movs	r5, #25
 80015ca:	f04f 0964 	mov.w	r9, #100	; 0x64
 80015ce:	fb05 f300 	mul.w	r3, r5, r0
 80015d2:	00bf      	lsls	r7, r7, #2
 80015d4:	fbb3 f3f7 	udiv	r3, r3, r7
 80015d8:	fbb3 f3f9 	udiv	r3, r3, r9
 80015dc:	011f      	lsls	r7, r3, #4
 80015de:	f7ff fb87 	bl	8000cf0 <HAL_RCC_GetPCLK1Freq>
 80015e2:	6863      	ldr	r3, [r4, #4]
 80015e4:	4368      	muls	r0, r5
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	fbb0 f8f3 	udiv	r8, r0, r3
 80015ec:	f7ff fb80 	bl	8000cf0 <HAL_RCC_GetPCLK1Freq>
 80015f0:	6863      	ldr	r3, [r4, #4]
 80015f2:	4368      	muls	r0, r5
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015fa:	fbb3 f3f9 	udiv	r3, r3, r9
 80015fe:	fb09 8313 	mls	r3, r9, r3, r8
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	3332      	adds	r3, #50	; 0x32
 8001606:	fbb3 f3f9 	udiv	r3, r3, r9
 800160a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800160e:	f7ff fb6f 	bl	8000cf0 <HAL_RCC_GetPCLK1Freq>
 8001612:	6862      	ldr	r2, [r4, #4]
 8001614:	4368      	muls	r0, r5
 8001616:	0092      	lsls	r2, r2, #2
 8001618:	fbb0 faf2 	udiv	sl, r0, r2
 800161c:	f7ff fb68 	bl	8000cf0 <HAL_RCC_GetPCLK1Freq>
 8001620:	e7bd      	b.n	800159e <UART_SetConfig+0x1a6>
 8001622:	bf00      	nop
 8001624:	40011000 	.word	0x40011000
 8001628:	40011400 	.word	0x40011400

0800162c <HAL_UART_Init>:
{
 800162c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800162e:	4604      	mov	r4, r0
 8001630:	b340      	cbz	r0, 8001684 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001632:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001636:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800163a:	b91b      	cbnz	r3, 8001644 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800163c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001640:	f001 faba 	bl	8002bb8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001644:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001646:	2324      	movs	r3, #36	; 0x24
 8001648:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800164c:	68d3      	ldr	r3, [r2, #12]
 800164e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001652:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001654:	4620      	mov	r0, r4
 8001656:	f7ff fecf 	bl	80013f8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800165a:	6823      	ldr	r3, [r4, #0]
 800165c:	691a      	ldr	r2, [r3, #16]
 800165e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001662:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001664:	695a      	ldr	r2, [r3, #20]
 8001666:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800166a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001672:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001674:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001676:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001678:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800167a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800167e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001682:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001684:	2001      	movs	r0, #1
}
 8001686:	bd10      	pop	{r4, pc}

08001688 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8001688:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800168c:	2b20      	cmp	r3, #32
 800168e:	d118      	bne.n	80016c2 <HAL_UART_Transmit_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8001690:	b1a9      	cbz	r1, 80016be <HAL_UART_Transmit_IT+0x36>
 8001692:	b1a2      	cbz	r2, 80016be <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 8001694:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001698:	2b01      	cmp	r3, #1
 800169a:	d012      	beq.n	80016c2 <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 800169c:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->pTxBuffPtr = pData;
 800169e:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 80016a0:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016a2:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80016a4:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016a6:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016a8:	2221      	movs	r2, #33	; 0x21
 80016aa:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80016ae:	68ca      	ldr	r2, [r1, #12]
    __HAL_UNLOCK(huart);
 80016b0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80016b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016b8:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 80016ba:	4618      	mov	r0, r3
 80016bc:	4770      	bx	lr
      return HAL_ERROR;
 80016be:	2001      	movs	r0, #1
 80016c0:	4770      	bx	lr
    return HAL_BUSY;
 80016c2:	2002      	movs	r0, #2
}
 80016c4:	4770      	bx	lr

080016c6 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80016c6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80016ca:	2b20      	cmp	r3, #32
 80016cc:	d120      	bne.n	8001710 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80016ce:	b1e9      	cbz	r1, 800170c <HAL_UART_Receive_IT+0x46>
 80016d0:	b1e2      	cbz	r2, 800170c <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80016d2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d01a      	beq.n	8001710 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80016da:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80016dc:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016de:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80016e0:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016e2:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80016e4:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80016e8:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80016ea:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80016ec:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 80016ee:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80016f2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80016f6:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80016f8:	6951      	ldr	r1, [r2, #20]
 80016fa:	f041 0101 	orr.w	r1, r1, #1
 80016fe:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001700:	68d1      	ldr	r1, [r2, #12]
 8001702:	f041 0120 	orr.w	r1, r1, #32
 8001706:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8001708:	4618      	mov	r0, r3
 800170a:	4770      	bx	lr
      return HAL_ERROR;
 800170c:	2001      	movs	r0, #1
 800170e:	4770      	bx	lr
    return HAL_BUSY;
 8001710:	2002      	movs	r0, #2
}
 8001712:	4770      	bx	lr

08001714 <HAL_UART_TxCpltCallback>:
 8001714:	4770      	bx	lr

08001716 <HAL_UART_RxCpltCallback>:
 8001716:	4770      	bx	lr

08001718 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001718:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800171c:	2b22      	cmp	r3, #34	; 0x22
{
 800171e:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001720:	d136      	bne.n	8001790 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001722:	6883      	ldr	r3, [r0, #8]
 8001724:	6901      	ldr	r1, [r0, #16]
 8001726:	6802      	ldr	r2, [r0, #0]
 8001728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800172c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800172e:	d123      	bne.n	8001778 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001730:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001732:	b9e9      	cbnz	r1, 8001770 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001738:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800173c:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800173e:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001740:	3c01      	subs	r4, #1
 8001742:	b2a4      	uxth	r4, r4
 8001744:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001746:	b98c      	cbnz	r4, 800176c <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001748:	6803      	ldr	r3, [r0, #0]
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	f022 0220 	bic.w	r2, r2, #32
 8001750:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001758:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800175a:	695a      	ldr	r2, [r3, #20]
 800175c:	f022 0201 	bic.w	r2, r2, #1
 8001760:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001762:	2320      	movs	r3, #32
 8001764:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001768:	f7ff ffd5 	bl	8001716 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 800176c:	2000      	movs	r0, #0
}
 800176e:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	f823 2b01 	strh.w	r2, [r3], #1
 8001776:	e7e1      	b.n	800173c <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001778:	b921      	cbnz	r1, 8001784 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800177a:	1c59      	adds	r1, r3, #1
 800177c:	6852      	ldr	r2, [r2, #4]
 800177e:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001780:	701a      	strb	r2, [r3, #0]
 8001782:	e7dc      	b.n	800173e <UART_Receive_IT+0x26>
 8001784:	6852      	ldr	r2, [r2, #4]
 8001786:	1c59      	adds	r1, r3, #1
 8001788:	6281      	str	r1, [r0, #40]	; 0x28
 800178a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800178e:	e7f7      	b.n	8001780 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001790:	2002      	movs	r0, #2
 8001792:	bd10      	pop	{r4, pc}

08001794 <HAL_UART_ErrorCallback>:
 8001794:	4770      	bx	lr
	...

08001798 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001798:	6803      	ldr	r3, [r0, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800179c:	68d9      	ldr	r1, [r3, #12]
{
 800179e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80017a0:	0716      	lsls	r6, r2, #28
{
 80017a2:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80017a4:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80017a6:	d107      	bne.n	80017b8 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80017a8:	0696      	lsls	r6, r2, #26
 80017aa:	d55a      	bpl.n	8001862 <HAL_UART_IRQHandler+0xca>
 80017ac:	068d      	lsls	r5, r1, #26
 80017ae:	d558      	bpl.n	8001862 <HAL_UART_IRQHandler+0xca>
}
 80017b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80017b4:	f7ff bfb0 	b.w	8001718 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80017b8:	f015 0501 	ands.w	r5, r5, #1
 80017bc:	d102      	bne.n	80017c4 <HAL_UART_IRQHandler+0x2c>
 80017be:	f411 7f90 	tst.w	r1, #288	; 0x120
 80017c2:	d04e      	beq.n	8001862 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80017c4:	07d3      	lsls	r3, r2, #31
 80017c6:	d505      	bpl.n	80017d4 <HAL_UART_IRQHandler+0x3c>
 80017c8:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80017ca:	bf42      	ittt	mi
 80017cc:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80017ce:	f043 0301 	orrmi.w	r3, r3, #1
 80017d2:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017d4:	0750      	lsls	r0, r2, #29
 80017d6:	d504      	bpl.n	80017e2 <HAL_UART_IRQHandler+0x4a>
 80017d8:	b11d      	cbz	r5, 80017e2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80017da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017e2:	0793      	lsls	r3, r2, #30
 80017e4:	d504      	bpl.n	80017f0 <HAL_UART_IRQHandler+0x58>
 80017e6:	b11d      	cbz	r5, 80017f0 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80017e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017f0:	0716      	lsls	r6, r2, #28
 80017f2:	d504      	bpl.n	80017fe <HAL_UART_IRQHandler+0x66>
 80017f4:	b11d      	cbz	r5, 80017fe <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80017f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017f8:	f043 0308 	orr.w	r3, r3, #8
 80017fc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80017fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001800:	2b00      	cmp	r3, #0
 8001802:	d066      	beq.n	80018d2 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001804:	0695      	lsls	r5, r2, #26
 8001806:	d504      	bpl.n	8001812 <HAL_UART_IRQHandler+0x7a>
 8001808:	0688      	lsls	r0, r1, #26
 800180a:	d502      	bpl.n	8001812 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 800180c:	4620      	mov	r0, r4
 800180e:	f7ff ff83 	bl	8001718 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001812:	6823      	ldr	r3, [r4, #0]
 8001814:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001816:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001818:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 800181a:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800181c:	d402      	bmi.n	8001824 <HAL_UART_IRQHandler+0x8c>
 800181e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001822:	d01a      	beq.n	800185a <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001824:	f7ff fdda 	bl	80013dc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001828:	6823      	ldr	r3, [r4, #0]
 800182a:	695a      	ldr	r2, [r3, #20]
 800182c:	0652      	lsls	r2, r2, #25
 800182e:	d510      	bpl.n	8001852 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001830:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001832:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001838:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800183a:	b150      	cbz	r0, 8001852 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800183c:	4b25      	ldr	r3, [pc, #148]	; (80018d4 <HAL_UART_IRQHandler+0x13c>)
 800183e:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001840:	f7fe ffc8 	bl	80007d4 <HAL_DMA_Abort_IT>
 8001844:	2800      	cmp	r0, #0
 8001846:	d044      	beq.n	80018d2 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001848:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800184a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800184e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001850:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001852:	4620      	mov	r0, r4
 8001854:	f7ff ff9e 	bl	8001794 <HAL_UART_ErrorCallback>
 8001858:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800185a:	f7ff ff9b 	bl	8001794 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800185e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001860:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001862:	0616      	lsls	r6, r2, #24
 8001864:	d527      	bpl.n	80018b6 <HAL_UART_IRQHandler+0x11e>
 8001866:	060d      	lsls	r5, r1, #24
 8001868:	d525      	bpl.n	80018b6 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800186a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800186e:	2a21      	cmp	r2, #33	; 0x21
 8001870:	d12f      	bne.n	80018d2 <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001872:	68a2      	ldr	r2, [r4, #8]
 8001874:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001878:	6a22      	ldr	r2, [r4, #32]
 800187a:	d117      	bne.n	80018ac <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800187c:	8811      	ldrh	r1, [r2, #0]
 800187e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001882:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001884:	6921      	ldr	r1, [r4, #16]
 8001886:	b979      	cbnz	r1, 80018a8 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001888:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800188a:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800188c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800188e:	3a01      	subs	r2, #1
 8001890:	b292      	uxth	r2, r2
 8001892:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001894:	b9ea      	cbnz	r2, 80018d2 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800189c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80018a8:	3201      	adds	r2, #1
 80018aa:	e7ee      	b.n	800188a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80018ac:	1c51      	adds	r1, r2, #1
 80018ae:	6221      	str	r1, [r4, #32]
 80018b0:	7812      	ldrb	r2, [r2, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	e7ea      	b.n	800188c <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80018b6:	0650      	lsls	r0, r2, #25
 80018b8:	d50b      	bpl.n	80018d2 <HAL_UART_IRQHandler+0x13a>
 80018ba:	064a      	lsls	r2, r1, #25
 80018bc:	d509      	bpl.n	80018d2 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018c4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80018c6:	2320      	movs	r3, #32
 80018c8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80018cc:	4620      	mov	r0, r4
 80018ce:	f7ff ff21 	bl	8001714 <HAL_UART_TxCpltCallback>
 80018d2:	bd70      	pop	{r4, r5, r6, pc}
 80018d4:	080018d9 	.word	0x080018d9

080018d8 <UART_DMAAbortOnError>:
{
 80018d8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018da:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80018dc:	2300      	movs	r3, #0
 80018de:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80018e0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80018e2:	f7ff ff57 	bl	8001794 <HAL_UART_ErrorCallback>
 80018e6:	bd08      	pop	{r3, pc}

080018e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80018e8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80018ea:	f000 fca3 	bl	8002234 <vTaskStartScheduler>
  
  return osOK;
}
 80018ee:	2000      	movs	r0, #0
 80018f0:	bd08      	pop	{r3, pc}

080018f2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80018f2:	b570      	push	{r4, r5, r6, lr}
 80018f4:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80018f6:	6946      	ldr	r6, [r0, #20]
 80018f8:	692a      	ldr	r2, [r5, #16]
 80018fa:	6840      	ldr	r0, [r0, #4]
 80018fc:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8001900:	460b      	mov	r3, r1
 8001902:	b086      	sub	sp, #24
 8001904:	6829      	ldr	r1, [r5, #0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001906:	b176      	cbz	r6, 8001926 <osThreadCreate+0x34>
 8001908:	69ad      	ldr	r5, [r5, #24]
 800190a:	b165      	cbz	r5, 8001926 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 800190c:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800190e:	bf14      	ite	ne
 8001910:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001912:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001914:	9502      	str	r5, [sp, #8]
 8001916:	e88d 0050 	stmia.w	sp, {r4, r6}
 800191a:	f000 fc27 	bl	800216c <xTaskCreateStatic>
 800191e:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001920:	9805      	ldr	r0, [sp, #20]
}
 8001922:	b006      	add	sp, #24
 8001924:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8001926:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001928:	bf14      	ite	ne
 800192a:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800192c:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800192e:	ad05      	add	r5, sp, #20
 8001930:	b292      	uxth	r2, r2
 8001932:	e88d 0030 	stmia.w	sp, {r4, r5}
 8001936:	f000 fc50 	bl	80021da <xTaskCreate>
 800193a:	2801      	cmp	r0, #1
 800193c:	d0f0      	beq.n	8001920 <osThreadCreate+0x2e>
      return NULL;
 800193e:	2000      	movs	r0, #0
 8001940:	e7ef      	b.n	8001922 <osThreadCreate+0x30>

08001942 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001942:	f100 0308 	add.w	r3, r0, #8
 8001946:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001948:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800194c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800194e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001950:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001952:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001954:	6003      	str	r3, [r0, #0]
 8001956:	4770      	bx	lr

08001958 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001958:	2300      	movs	r3, #0
 800195a:	6103      	str	r3, [r0, #16]
 800195c:	4770      	bx	lr

0800195e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800195e:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001960:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800196a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800196c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800196e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001970:	3301      	adds	r3, #1
 8001972:	6003      	str	r3, [r0, #0]
 8001974:	4770      	bx	lr

08001976 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001976:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001978:	1c53      	adds	r3, r2, #1
{
 800197a:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 800197c:	d10a      	bne.n	8001994 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800197e:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001984:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001986:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001988:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800198a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800198c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800198e:	3301      	adds	r3, #1
 8001990:	6003      	str	r3, [r0, #0]
 8001992:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001994:	f100 0308 	add.w	r3, r0, #8
 8001998:	685c      	ldr	r4, [r3, #4]
 800199a:	6825      	ldr	r5, [r4, #0]
 800199c:	42aa      	cmp	r2, r5
 800199e:	d3ef      	bcc.n	8001980 <vListInsert+0xa>
 80019a0:	4623      	mov	r3, r4
 80019a2:	e7f9      	b.n	8001998 <vListInsert+0x22>

080019a4 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80019a4:	6841      	ldr	r1, [r0, #4]
 80019a6:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80019a8:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80019aa:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80019ac:	6882      	ldr	r2, [r0, #8]
 80019ae:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80019b0:	6859      	ldr	r1, [r3, #4]
 80019b2:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80019b4:	bf08      	it	eq
 80019b6:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80019b8:	2200      	movs	r2, #0
 80019ba:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	3a01      	subs	r2, #1
 80019c0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80019c2:	6818      	ldr	r0, [r3, #0]
}
 80019c4:	4770      	bx	lr
	...

080019c8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80019c8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80019ce:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <prvTaskExitError+0x3c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	3301      	adds	r3, #1
 80019d4:	d008      	beq.n	80019e8 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80019d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019da:	f383 8811 	msr	BASEPRI, r3
 80019de:	f3bf 8f6f 	isb	sy
 80019e2:	f3bf 8f4f 	dsb	sy
 80019e6:	e7fe      	b.n	80019e6 <prvTaskExitError+0x1e>
 80019e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ec:	f383 8811 	msr	BASEPRI, r3
 80019f0:	f3bf 8f6f 	isb	sy
 80019f4:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80019f8:	9b01      	ldr	r3, [sp, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0fc      	beq.n	80019f8 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80019fe:	b002      	add	sp, #8
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000000 	.word	0x20000000

08001a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001a08:	4808      	ldr	r0, [pc, #32]	; (8001a2c <prvPortStartFirstTask+0x24>)
 8001a0a:	6800      	ldr	r0, [r0, #0]
 8001a0c:	6800      	ldr	r0, [r0, #0]
 8001a0e:	f380 8808 	msr	MSP, r0
 8001a12:	f04f 0000 	mov.w	r0, #0
 8001a16:	f380 8814 	msr	CONTROL, r0
 8001a1a:	b662      	cpsie	i
 8001a1c:	b661      	cpsie	f
 8001a1e:	f3bf 8f4f 	dsb	sy
 8001a22:	f3bf 8f6f 	isb	sy
 8001a26:	df00      	svc	0
 8001a28:	bf00      	nop
 8001a2a:	0000      	.short	0x0000
 8001a2c:	e000ed08 	.word	0xe000ed08

08001a30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001a30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001a40 <vPortEnableVFP+0x10>
 8001a34:	6801      	ldr	r1, [r0, #0]
 8001a36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001a3a:	6001      	str	r1, [r0, #0]
 8001a3c:	4770      	bx	lr
 8001a3e:	0000      	.short	0x0000
 8001a40:	e000ed88 	.word	0xe000ed88

08001a44 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001a44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a48:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001a4c:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <pxPortInitialiseStack+0x28>)
 8001a4e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001a52:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001a56:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001a5a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001a5e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001a62:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001a66:	3844      	subs	r0, #68	; 0x44
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	080019c9 	.word	0x080019c9

08001a70 <SVC_Handler>:
	__asm volatile (
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <pxCurrentTCBConst2>)
 8001a72:	6819      	ldr	r1, [r3, #0]
 8001a74:	6808      	ldr	r0, [r1, #0]
 8001a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a7a:	f380 8809 	msr	PSP, r0
 8001a7e:	f3bf 8f6f 	isb	sy
 8001a82:	f04f 0000 	mov.w	r0, #0
 8001a86:	f380 8811 	msr	BASEPRI, r0
 8001a8a:	4770      	bx	lr
 8001a8c:	f3af 8000 	nop.w

08001a90 <pxCurrentTCBConst2>:
 8001a90:	20003cb4 	.word	0x20003cb4

08001a94 <vPortEnterCritical>:
 8001a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a98:	f383 8811 	msr	BASEPRI, r3
 8001a9c:	f3bf 8f6f 	isb	sy
 8001aa0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001aa4:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <vPortEnterCritical+0x3c>)
 8001aa6:	6813      	ldr	r3, [r2, #0]
 8001aa8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8001aaa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8001aac:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8001aae:	d10d      	bne.n	8001acc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <vPortEnterCritical+0x40>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001ab8:	d008      	beq.n	8001acc <vPortEnterCritical+0x38>
 8001aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001abe:	f383 8811 	msr	BASEPRI, r3
 8001ac2:	f3bf 8f6f 	isb	sy
 8001ac6:	f3bf 8f4f 	dsb	sy
 8001aca:	e7fe      	b.n	8001aca <vPortEnterCritical+0x36>
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	e000ed04 	.word	0xe000ed04

08001ad8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001ad8:	4a08      	ldr	r2, [pc, #32]	; (8001afc <vPortExitCritical+0x24>)
 8001ada:	6813      	ldr	r3, [r2, #0]
 8001adc:	b943      	cbnz	r3, 8001af0 <vPortExitCritical+0x18>
 8001ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ae2:	f383 8811 	msr	BASEPRI, r3
 8001ae6:	f3bf 8f6f 	isb	sy
 8001aea:	f3bf 8f4f 	dsb	sy
 8001aee:	e7fe      	b.n	8001aee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001af0:	3b01      	subs	r3, #1
 8001af2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001af4:	b90b      	cbnz	r3, 8001afa <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001af6:	f383 8811 	msr	BASEPRI, r3
 8001afa:	4770      	bx	lr
 8001afc:	20000000 	.word	0x20000000

08001b00 <PendSV_Handler>:
	__asm volatile
 8001b00:	f3ef 8009 	mrs	r0, PSP
 8001b04:	f3bf 8f6f 	isb	sy
 8001b08:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <pxCurrentTCBConst>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	f01e 0f10 	tst.w	lr, #16
 8001b10:	bf08      	it	eq
 8001b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b1a:	6010      	str	r0, [r2, #0]
 8001b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001b20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001b24:	f380 8811 	msr	BASEPRI, r0
 8001b28:	f3bf 8f4f 	dsb	sy
 8001b2c:	f3bf 8f6f 	isb	sy
 8001b30:	f000 fcec 	bl	800250c <vTaskSwitchContext>
 8001b34:	f04f 0000 	mov.w	r0, #0
 8001b38:	f380 8811 	msr	BASEPRI, r0
 8001b3c:	bc09      	pop	{r0, r3}
 8001b3e:	6819      	ldr	r1, [r3, #0]
 8001b40:	6808      	ldr	r0, [r1, #0]
 8001b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b46:	f01e 0f10 	tst.w	lr, #16
 8001b4a:	bf08      	it	eq
 8001b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001b50:	f380 8809 	msr	PSP, r0
 8001b54:	f3bf 8f6f 	isb	sy
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	f3af 8000 	nop.w

08001b60 <pxCurrentTCBConst>:
 8001b60:	20003cb4 	.word	0x20003cb4

08001b64 <SysTick_Handler>:
{
 8001b64:	b508      	push	{r3, lr}
	__asm volatile
 8001b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b6a:	f383 8811 	msr	BASEPRI, r3
 8001b6e:	f3bf 8f6f 	isb	sy
 8001b72:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001b76:	f000 fb9b 	bl	80022b0 <xTaskIncrementTick>
 8001b7a:	b118      	cbz	r0, 8001b84 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001b7c:	4b03      	ldr	r3, [pc, #12]	; (8001b8c <SysTick_Handler+0x28>)
 8001b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b82:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001b84:	2300      	movs	r3, #0
 8001b86:	f383 8811 	msr	BASEPRI, r3
 8001b8a:	bd08      	pop	{r3, pc}
 8001b8c:	e000ed04 	.word	0xe000ed04

08001b90 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001b90:	4a08      	ldr	r2, [pc, #32]	; (8001bb4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001b92:	4909      	ldr	r1, [pc, #36]	; (8001bb8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001b98:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <vPortSetupTimerInterrupt+0x2c>)
 8001b9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ba6:	4906      	ldr	r1, [pc, #24]	; (8001bc0 <vPortSetupTimerInterrupt+0x30>)
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001bac:	2307      	movs	r3, #7
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000e010 	.word	0xe000e010
 8001bb8:	e000e018 	.word	0xe000e018
 8001bbc:	20000010 	.word	0x20000010
 8001bc0:	e000e014 	.word	0xe000e014

08001bc4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001bc4:	4b39      	ldr	r3, [pc, #228]	; (8001cac <xPortStartScheduler+0xe8>)
 8001bc6:	4a3a      	ldr	r2, [pc, #232]	; (8001cb0 <xPortStartScheduler+0xec>)
{
 8001bc8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001bca:	6819      	ldr	r1, [r3, #0]
 8001bcc:	4291      	cmp	r1, r2
 8001bce:	d108      	bne.n	8001be2 <xPortStartScheduler+0x1e>
	__asm volatile
 8001bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bd4:	f383 8811 	msr	BASEPRI, r3
 8001bd8:	f3bf 8f6f 	isb	sy
 8001bdc:	f3bf 8f4f 	dsb	sy
 8001be0:	e7fe      	b.n	8001be0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b33      	ldr	r3, [pc, #204]	; (8001cb4 <xPortStartScheduler+0xf0>)
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d108      	bne.n	8001bfc <xPortStartScheduler+0x38>
 8001bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bee:	f383 8811 	msr	BASEPRI, r3
 8001bf2:	f3bf 8f6f 	isb	sy
 8001bf6:	f3bf 8f4f 	dsb	sy
 8001bfa:	e7fe      	b.n	8001bfa <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001bfc:	4b2e      	ldr	r3, [pc, #184]	; (8001cb8 <xPortStartScheduler+0xf4>)
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001c04:	22ff      	movs	r2, #255	; 0xff
 8001c06:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001c08:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001c0a:	4a2c      	ldr	r2, [pc, #176]	; (8001cbc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001c12:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001c16:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c1a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001c1c:	4b28      	ldr	r3, [pc, #160]	; (8001cc0 <xPortStartScheduler+0xfc>)
 8001c1e:	2207      	movs	r2, #7
 8001c20:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001c22:	2100      	movs	r1, #0
 8001c24:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001c28:	0600      	lsls	r0, r0, #24
 8001c2a:	f102 34ff 	add.w	r4, r2, #4294967295
 8001c2e:	d40d      	bmi.n	8001c4c <xPortStartScheduler+0x88>
 8001c30:	b101      	cbz	r1, 8001c34 <xPortStartScheduler+0x70>
 8001c32:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	2a03      	cmp	r2, #3
 8001c38:	d011      	beq.n	8001c5e <xPortStartScheduler+0x9a>
 8001c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c3e:	f383 8811 	msr	BASEPRI, r3
 8001c42:	f3bf 8f6f 	isb	sy
 8001c46:	f3bf 8f4f 	dsb	sy
 8001c4a:	e7fe      	b.n	8001c4a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001c4c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001c50:	0052      	lsls	r2, r2, #1
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	f88d 2003 	strb.w	r2, [sp, #3]
 8001c58:	2101      	movs	r1, #1
 8001c5a:	4622      	mov	r2, r4
 8001c5c:	e7e2      	b.n	8001c24 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001c5e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001c60:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001c64:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001c66:	9b01      	ldr	r3, [sp, #4]
 8001c68:	4a13      	ldr	r2, [pc, #76]	; (8001cb8 <xPortStartScheduler+0xf4>)
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <xPortStartScheduler+0x100>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001c76:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001c7e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001c80:	f7ff ff86 	bl	8001b90 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001c84:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <xPortStartScheduler+0x104>)
 8001c86:	2400      	movs	r4, #0
 8001c88:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8001c8a:	f7ff fed1 	bl	8001a30 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001c8e:	4a0f      	ldr	r2, [pc, #60]	; (8001ccc <xPortStartScheduler+0x108>)
 8001c90:	6813      	ldr	r3, [r2, #0]
 8001c92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001c96:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001c98:	f7ff feb6 	bl	8001a08 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8001c9c:	f000 fc36 	bl	800250c <vTaskSwitchContext>
	prvTaskExitError();
 8001ca0:	f7ff fe92 	bl	80019c8 <prvTaskExitError>
}
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	b002      	add	sp, #8
 8001ca8:	bd10      	pop	{r4, pc}
 8001caa:	bf00      	nop
 8001cac:	e000ed00 	.word	0xe000ed00
 8001cb0:	410fc271 	.word	0x410fc271
 8001cb4:	410fc270 	.word	0x410fc270
 8001cb8:	e000e400 	.word	0xe000e400
 8001cbc:	20000094 	.word	0x20000094
 8001cc0:	20000098 	.word	0x20000098
 8001cc4:	e000ed20 	.word	0xe000ed20
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	e000ef34 	.word	0xe000ef34

08001cd0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001cd0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <prvInsertBlockIntoFreeList+0x40>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	4282      	cmp	r2, r0
 8001cd8:	d318      	bcc.n	8001d0c <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001cda:	685c      	ldr	r4, [r3, #4]
 8001cdc:	1919      	adds	r1, r3, r4
 8001cde:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001ce0:	bf01      	itttt	eq
 8001ce2:	6841      	ldreq	r1, [r0, #4]
 8001ce4:	4618      	moveq	r0, r3
 8001ce6:	1909      	addeq	r1, r1, r4
 8001ce8:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001cea:	6844      	ldr	r4, [r0, #4]
 8001cec:	1901      	adds	r1, r0, r4
 8001cee:	428a      	cmp	r2, r1
 8001cf0:	d107      	bne.n	8001d02 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001cf2:	4908      	ldr	r1, [pc, #32]	; (8001d14 <prvInsertBlockIntoFreeList+0x44>)
 8001cf4:	6809      	ldr	r1, [r1, #0]
 8001cf6:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001cf8:	bf1f      	itttt	ne
 8001cfa:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001cfc:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001cfe:	1909      	addne	r1, r1, r4
 8001d00:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001d02:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001d04:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001d06:	bf18      	it	ne
 8001d08:	6018      	strne	r0, [r3, #0]
 8001d0a:	bd10      	pop	{r4, pc}
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	e7e1      	b.n	8001cd4 <prvInsertBlockIntoFreeList+0x4>
 8001d10:	20003cac 	.word	0x20003cac
 8001d14:	2000009c 	.word	0x2000009c

08001d18 <pvPortMalloc>:
{
 8001d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d1c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001d1e:	f000 fabf 	bl	80022a0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001d22:	493e      	ldr	r1, [pc, #248]	; (8001e1c <pvPortMalloc+0x104>)
 8001d24:	4d3e      	ldr	r5, [pc, #248]	; (8001e20 <pvPortMalloc+0x108>)
 8001d26:	680b      	ldr	r3, [r1, #0]
 8001d28:	bb0b      	cbnz	r3, 8001d6e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8001d2a:	4a3e      	ldr	r2, [pc, #248]	; (8001e24 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001d2c:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001d2e:	bf1f      	itttt	ne
 8001d30:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d32:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001d36:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8001d3a:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d3c:	bf14      	ite	ne
 8001d3e:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001d40:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001d44:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8001d46:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d48:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001d4c:	4e36      	ldr	r6, [pc, #216]	; (8001e28 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8001d4e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001d50:	2000      	movs	r0, #0
 8001d52:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001d54:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8001d56:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001d58:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001d5a:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001d5c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d5e:	4b33      	ldr	r3, [pc, #204]	; (8001e2c <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001d60:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d62:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d64:	4b32      	ldr	r3, [pc, #200]	; (8001e30 <pvPortMalloc+0x118>)
 8001d66:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001d68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001d6c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001d6e:	682f      	ldr	r7, [r5, #0]
 8001d70:	4227      	tst	r7, r4
 8001d72:	d116      	bne.n	8001da2 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8001d74:	2c00      	cmp	r4, #0
 8001d76:	d041      	beq.n	8001dfc <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8001d78:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001d7c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001d7e:	bf1c      	itt	ne
 8001d80:	f023 0307 	bicne.w	r3, r3, #7
 8001d84:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001d86:	b163      	cbz	r3, 8001da2 <pvPortMalloc+0x8a>
 8001d88:	4a29      	ldr	r2, [pc, #164]	; (8001e30 <pvPortMalloc+0x118>)
 8001d8a:	6816      	ldr	r6, [r2, #0]
 8001d8c:	42b3      	cmp	r3, r6
 8001d8e:	4690      	mov	r8, r2
 8001d90:	d807      	bhi.n	8001da2 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8001d92:	4a25      	ldr	r2, [pc, #148]	; (8001e28 <pvPortMalloc+0x110>)
 8001d94:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001d96:	6868      	ldr	r0, [r5, #4]
 8001d98:	4283      	cmp	r3, r0
 8001d9a:	d804      	bhi.n	8001da6 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001d9c:	6809      	ldr	r1, [r1, #0]
 8001d9e:	428d      	cmp	r5, r1
 8001da0:	d107      	bne.n	8001db2 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8001da2:	2400      	movs	r4, #0
 8001da4:	e02a      	b.n	8001dfc <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001da6:	682c      	ldr	r4, [r5, #0]
 8001da8:	2c00      	cmp	r4, #0
 8001daa:	d0f7      	beq.n	8001d9c <pvPortMalloc+0x84>
 8001dac:	462a      	mov	r2, r5
 8001dae:	4625      	mov	r5, r4
 8001db0:	e7f1      	b.n	8001d96 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001db2:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001db4:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001db6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001db8:	1ac2      	subs	r2, r0, r3
 8001dba:	2a10      	cmp	r2, #16
 8001dbc:	d90f      	bls.n	8001dde <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001dbe:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001dc0:	0741      	lsls	r1, r0, #29
 8001dc2:	d008      	beq.n	8001dd6 <pvPortMalloc+0xbe>
 8001dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc8:	f383 8811 	msr	BASEPRI, r3
 8001dcc:	f3bf 8f6f 	isb	sy
 8001dd0:	f3bf 8f4f 	dsb	sy
 8001dd4:	e7fe      	b.n	8001dd4 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001dd6:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001dd8:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001dda:	f7ff ff79 	bl	8001cd0 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001dde:	4913      	ldr	r1, [pc, #76]	; (8001e2c <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001de0:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001de2:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001de4:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001de6:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001de8:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8001dea:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001dee:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001df2:	bf38      	it	cc
 8001df4:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001df6:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001df8:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001dfa:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001dfc:	f000 faea 	bl	80023d4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e00:	0763      	lsls	r3, r4, #29
 8001e02:	d008      	beq.n	8001e16 <pvPortMalloc+0xfe>
 8001e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e08:	f383 8811 	msr	BASEPRI, r3
 8001e0c:	f3bf 8f6f 	isb	sy
 8001e10:	f3bf 8f4f 	dsb	sy
 8001e14:	e7fe      	b.n	8001e14 <pvPortMalloc+0xfc>
}
 8001e16:	4620      	mov	r0, r4
 8001e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e1c:	2000009c 	.word	0x2000009c
 8001e20:	20003ca0 	.word	0x20003ca0
 8001e24:	200000a0 	.word	0x200000a0
 8001e28:	20003cac 	.word	0x20003cac
 8001e2c:	20003ca8 	.word	0x20003ca8
 8001e30:	20003ca4 	.word	0x20003ca4

08001e34 <vPortFree>:
{
 8001e34:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001e36:	4604      	mov	r4, r0
 8001e38:	b370      	cbz	r0, 8001e98 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001e3a:	4a18      	ldr	r2, [pc, #96]	; (8001e9c <vPortFree+0x68>)
 8001e3c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001e40:	6812      	ldr	r2, [r2, #0]
 8001e42:	4213      	tst	r3, r2
 8001e44:	d108      	bne.n	8001e58 <vPortFree+0x24>
 8001e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e4a:	f383 8811 	msr	BASEPRI, r3
 8001e4e:	f3bf 8f6f 	isb	sy
 8001e52:	f3bf 8f4f 	dsb	sy
 8001e56:	e7fe      	b.n	8001e56 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001e58:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001e5c:	b141      	cbz	r1, 8001e70 <vPortFree+0x3c>
 8001e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e62:	f383 8811 	msr	BASEPRI, r3
 8001e66:	f3bf 8f6f 	isb	sy
 8001e6a:	f3bf 8f4f 	dsb	sy
 8001e6e:	e7fe      	b.n	8001e6e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001e70:	ea23 0302 	bic.w	r3, r3, r2
 8001e74:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001e78:	f000 fa12 	bl	80022a0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001e7c:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <vPortFree+0x6c>)
 8001e7e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8001e82:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001e84:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001e88:	440b      	add	r3, r1
 8001e8a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001e8c:	f7ff ff20 	bl	8001cd0 <prvInsertBlockIntoFreeList>
}
 8001e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8001e94:	f000 ba9e 	b.w	80023d4 <xTaskResumeAll>
 8001e98:	bd10      	pop	{r4, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20003ca0 	.word	0x20003ca0
 8001ea0:	20003ca4 	.word	0x20003ca4

08001ea4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ea8:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001eaa:	f7ff fdf3 	bl	8001a94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001eae:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8001eb0:	4c2d      	ldr	r4, [pc, #180]	; (8001f68 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4f2d      	ldr	r7, [pc, #180]	; (8001f6c <prvAddNewTaskToReadyList+0xc8>)
 8001eb6:	3201      	adds	r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001eba:	6825      	ldr	r5, [r4, #0]
 8001ebc:	2d00      	cmp	r5, #0
 8001ebe:	d145      	bne.n	8001f4c <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001ec0:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d11c      	bne.n	8001f02 <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001ec8:	1978      	adds	r0, r7, r5
 8001eca:	3514      	adds	r5, #20
 8001ecc:	f7ff fd39 	bl	8001942 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ed0:	2d8c      	cmp	r5, #140	; 0x8c
 8001ed2:	d1f9      	bne.n	8001ec8 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001ed4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8001f98 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8001ed8:	4d25      	ldr	r5, [pc, #148]	; (8001f70 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 8001eda:	4640      	mov	r0, r8
 8001edc:	f7ff fd31 	bl	8001942 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001ee0:	4628      	mov	r0, r5
 8001ee2:	f7ff fd2e 	bl	8001942 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001ee6:	4823      	ldr	r0, [pc, #140]	; (8001f74 <prvAddNewTaskToReadyList+0xd0>)
 8001ee8:	f7ff fd2b 	bl	8001942 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001eec:	4822      	ldr	r0, [pc, #136]	; (8001f78 <prvAddNewTaskToReadyList+0xd4>)
 8001eee:	f7ff fd28 	bl	8001942 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001ef2:	4822      	ldr	r0, [pc, #136]	; (8001f7c <prvAddNewTaskToReadyList+0xd8>)
 8001ef4:	f7ff fd25 	bl	8001942 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001ef8:	4b21      	ldr	r3, [pc, #132]	; (8001f80 <prvAddNewTaskToReadyList+0xdc>)
 8001efa:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001efe:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <prvAddNewTaskToReadyList+0xe0>)
 8001f00:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8001f02:	4a21      	ldr	r2, [pc, #132]	; (8001f88 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 8001f04:	4921      	ldr	r1, [pc, #132]	; (8001f8c <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8001f06:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001f08:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001f0e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001f10:	2301      	movs	r3, #1
 8001f12:	4093      	lsls	r3, r2
 8001f14:	4303      	orrs	r3, r0
 8001f16:	2014      	movs	r0, #20
 8001f18:	600b      	str	r3, [r1, #0]
 8001f1a:	fb00 7002 	mla	r0, r0, r2, r7
 8001f1e:	1d31      	adds	r1, r6, #4
 8001f20:	f7ff fd1d 	bl	800195e <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001f24:	f7ff fdd8 	bl	8001ad8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001f28:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <prvAddNewTaskToReadyList+0xec>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	b163      	cbz	r3, 8001f48 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001f2e:	6823      	ldr	r3, [r4, #0]
 8001f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f32:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d207      	bcs.n	8001f48 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8001f38:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <prvAddNewTaskToReadyList+0xf0>)
 8001f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	f3bf 8f4f 	dsb	sy
 8001f44:	f3bf 8f6f 	isb	sy
 8001f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8001f4c:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <prvAddNewTaskToReadyList+0xec>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1d6      	bne.n	8001f02 <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001f54:	6823      	ldr	r3, [r4, #0]
 8001f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f58:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001f5a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001f5c:	bf98      	it	ls
 8001f5e:	6026      	strls	r6, [r4, #0]
 8001f60:	e7cf      	b.n	8001f02 <prvAddNewTaskToReadyList+0x5e>
 8001f62:	bf00      	nop
 8001f64:	20003d4c 	.word	0x20003d4c
 8001f68:	20003cb4 	.word	0x20003cb4
 8001f6c:	20003cc0 	.word	0x20003cc0
 8001f70:	20003d78 	.word	0x20003d78
 8001f74:	20003d94 	.word	0x20003d94
 8001f78:	20003dc0 	.word	0x20003dc0
 8001f7c:	20003dac 	.word	0x20003dac
 8001f80:	20003cb8 	.word	0x20003cb8
 8001f84:	20003cbc 	.word	0x20003cbc
 8001f88:	20003d5c 	.word	0x20003d5c
 8001f8c:	20003d60 	.word	0x20003d60
 8001f90:	20003da8 	.word	0x20003da8
 8001f94:	e000ed04 	.word	0xe000ed04
 8001f98:	20003d64 	.word	0x20003d64

08001f9c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f9c:	4a06      	ldr	r2, [pc, #24]	; (8001fb8 <prvResetNextTaskUnblockTime+0x1c>)
 8001f9e:	6813      	ldr	r3, [r2, #0]
 8001fa0:	6819      	ldr	r1, [r3, #0]
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <prvResetNextTaskUnblockTime+0x20>)
 8001fa4:	b919      	cbnz	r1, 8001fae <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001fa6:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001fb2:	68d2      	ldr	r2, [r2, #12]
 8001fb4:	6852      	ldr	r2, [r2, #4]
 8001fb6:	e7f8      	b.n	8001faa <prvResetNextTaskUnblockTime+0xe>
 8001fb8:	20003cb8 	.word	0x20003cb8
 8001fbc:	20003d8c 	.word	0x20003d8c

08001fc0 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8001fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fc4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001fc6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001fca:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8001fcc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001fd0:	3a01      	subs	r2, #1
 8001fd2:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8001fd6:	469a      	mov	sl, r3
 8001fd8:	4681      	mov	r9, r0
 8001fda:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001fdc:	f026 0607 	bic.w	r6, r6, #7
 8001fe0:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8001fe4:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001fe6:	7858      	ldrb	r0, [r3, #1]
 8001fe8:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001fec:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8001ff0:	b108      	cbz	r0, 8001ff6 <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001ff2:	428b      	cmp	r3, r1
 8001ff4:	d1f7      	bne.n	8001fe6 <prvInitialiseNewTask.isra.2+0x26>
 8001ff6:	9d08      	ldr	r5, [sp, #32]
 8001ff8:	2d06      	cmp	r5, #6
 8001ffa:	bf28      	it	cs
 8001ffc:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001ffe:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 8002000:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002002:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002004:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002006:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 800200a:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800200c:	f7ff fca4 	bl	8001958 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002010:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002014:	f104 0018 	add.w	r0, r4, #24
 8002018:	f7ff fc9e 	bl	8001958 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800201c:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800201e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002020:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002022:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002024:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002028:	4652      	mov	r2, sl
 800202a:	4649      	mov	r1, r9
 800202c:	4630      	mov	r0, r6
 800202e:	f7ff fd09 	bl	8001a44 <pxPortInitialiseStack>
 8002032:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002034:	f1b8 0f00 	cmp.w	r8, #0
 8002038:	d001      	beq.n	800203e <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800203a:	f8c8 4000 	str.w	r4, [r8]
 800203e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002042 <prvDeleteTCB>:
	{
 8002042:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002044:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8002048:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800204a:	b93b      	cbnz	r3, 800205c <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800204c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800204e:	f7ff fef1 	bl	8001e34 <vPortFree>
				vPortFree( pxTCB );
 8002052:	4620      	mov	r0, r4
	}
 8002054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8002058:	f7ff beec 	b.w	8001e34 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800205c:	2b01      	cmp	r3, #1
 800205e:	d0f9      	beq.n	8002054 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002060:	2b02      	cmp	r3, #2
 8002062:	d008      	beq.n	8002076 <prvDeleteTCB+0x34>
 8002064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002068:	f383 8811 	msr	BASEPRI, r3
 800206c:	f3bf 8f6f 	isb	sy
 8002070:	f3bf 8f4f 	dsb	sy
 8002074:	e7fe      	b.n	8002074 <prvDeleteTCB+0x32>
 8002076:	bd10      	pop	{r4, pc}

08002078 <prvIdleTask>:
{
 8002078:	b580      	push	{r7, lr}
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800207a:	4e14      	ldr	r6, [pc, #80]	; (80020cc <prvIdleTask+0x54>)
				taskYIELD();
 800207c:	4f14      	ldr	r7, [pc, #80]	; (80020d0 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800207e:	4c15      	ldr	r4, [pc, #84]	; (80020d4 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8002080:	4d15      	ldr	r5, [pc, #84]	; (80020d8 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002082:	6823      	ldr	r3, [r4, #0]
 8002084:	b96b      	cbnz	r3, 80020a2 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <prvIdleTask+0x64>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d906      	bls.n	800209c <prvIdleTask+0x24>
				taskYIELD();
 800208e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	f3bf 8f4f 	dsb	sy
 8002098:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800209c:	f000 fa70 	bl	8002580 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80020a0:	e7ed      	b.n	800207e <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 80020a2:	f7ff fcf7 	bl	8001a94 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80020a6:	68f3      	ldr	r3, [r6, #12]
 80020a8:	f8d3 800c 	ldr.w	r8, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80020ac:	f108 0004 	add.w	r0, r8, #4
 80020b0:	f7ff fc78 	bl	80019a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80020b4:	682b      	ldr	r3, [r5, #0]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80020ba:	6823      	ldr	r3, [r4, #0]
 80020bc:	3b01      	subs	r3, #1
 80020be:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80020c0:	f7ff fd0a 	bl	8001ad8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80020c4:	4640      	mov	r0, r8
 80020c6:	f7ff ffbc 	bl	8002042 <prvDeleteTCB>
 80020ca:	e7da      	b.n	8002082 <prvIdleTask+0xa>
 80020cc:	20003dc0 	.word	0x20003dc0
 80020d0:	e000ed04 	.word	0xe000ed04
 80020d4:	20003d50 	.word	0x20003d50
 80020d8:	20003d4c 	.word	0x20003d4c
 80020dc:	20003cc0 	.word	0x20003cc0

080020e0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80020e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80020e2:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80020e4:	4e1b      	ldr	r6, [pc, #108]	; (8002154 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80020e6:	681d      	ldr	r5, [r3, #0]
{
 80020e8:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80020ea:	6830      	ldr	r0, [r6, #0]
 80020ec:	3004      	adds	r0, #4
{
 80020ee:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80020f0:	f7ff fc58 	bl	80019a4 <uxListRemove>
 80020f4:	4633      	mov	r3, r6
 80020f6:	b940      	cbnz	r0, 800210a <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80020f8:	6831      	ldr	r1, [r6, #0]
 80020fa:	4e17      	ldr	r6, [pc, #92]	; (8002158 <prvAddCurrentTaskToDelayedList+0x78>)
 80020fc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80020fe:	6832      	ldr	r2, [r6, #0]
 8002100:	2001      	movs	r0, #1
 8002102:	4088      	lsls	r0, r1
 8002104:	ea22 0200 	bic.w	r2, r2, r0
 8002108:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800210a:	1c62      	adds	r2, r4, #1
 800210c:	d107      	bne.n	800211e <prvAddCurrentTaskToDelayedList+0x3e>
 800210e:	b137      	cbz	r7, 800211e <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002110:	6819      	ldr	r1, [r3, #0]
 8002112:	4812      	ldr	r0, [pc, #72]	; (800215c <prvAddCurrentTaskToDelayedList+0x7c>)
 8002114:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002116:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800211a:	f7ff bc20 	b.w	800195e <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800211e:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002120:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8002122:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002124:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002126:	d907      	bls.n	8002138 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002128:	4a0d      	ldr	r2, [pc, #52]	; (8002160 <prvAddCurrentTaskToDelayedList+0x80>)
 800212a:	6810      	ldr	r0, [r2, #0]
 800212c:	6819      	ldr	r1, [r3, #0]
}
 800212e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002132:	3104      	adds	r1, #4
 8002134:	f7ff bc1f 	b.w	8001976 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002138:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <prvAddCurrentTaskToDelayedList+0x84>)
 800213a:	6810      	ldr	r0, [r2, #0]
 800213c:	6819      	ldr	r1, [r3, #0]
 800213e:	3104      	adds	r1, #4
 8002140:	f7ff fc19 	bl	8001976 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002144:	4b08      	ldr	r3, [pc, #32]	; (8002168 <prvAddCurrentTaskToDelayedList+0x88>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800214a:	bf38      	it	cc
 800214c:	601c      	strcc	r4, [r3, #0]
 800214e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002150:	20003dd4 	.word	0x20003dd4
 8002154:	20003cb4 	.word	0x20003cb4
 8002158:	20003d60 	.word	0x20003d60
 800215c:	20003dac 	.word	0x20003dac
 8002160:	20003cbc 	.word	0x20003cbc
 8002164:	20003cb8 	.word	0x20003cb8
 8002168:	20003d8c 	.word	0x20003d8c

0800216c <xTaskCreateStatic>:
	{
 800216c:	b570      	push	{r4, r5, r6, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002172:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8002174:	b945      	cbnz	r5, 8002188 <xTaskCreateStatic+0x1c>
 8002176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800217a:	f383 8811 	msr	BASEPRI, r3
 800217e:	f3bf 8f6f 	isb	sy
 8002182:	f3bf 8f4f 	dsb	sy
 8002186:	e7fe      	b.n	8002186 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8002188:	b944      	cbnz	r4, 800219c <xTaskCreateStatic+0x30>
 800218a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800218e:	f383 8811 	msr	BASEPRI, r3
 8002192:	f3bf 8f6f 	isb	sy
 8002196:	f3bf 8f4f 	dsb	sy
 800219a:	e7fe      	b.n	800219a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800219c:	2654      	movs	r6, #84	; 0x54
 800219e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80021a0:	9e04      	ldr	r6, [sp, #16]
 80021a2:	2e54      	cmp	r6, #84	; 0x54
 80021a4:	d008      	beq.n	80021b8 <xTaskCreateStatic+0x4c>
 80021a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021aa:	f383 8811 	msr	BASEPRI, r3
 80021ae:	f3bf 8f6f 	isb	sy
 80021b2:	f3bf 8f4f 	dsb	sy
 80021b6:	e7fe      	b.n	80021b6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80021b8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80021ba:	2502      	movs	r5, #2
 80021bc:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80021c0:	ad05      	add	r5, sp, #20
 80021c2:	9501      	str	r5, [sp, #4]
 80021c4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80021c6:	9402      	str	r4, [sp, #8]
 80021c8:	9500      	str	r5, [sp, #0]
 80021ca:	f7ff fef9 	bl	8001fc0 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80021ce:	4620      	mov	r0, r4
 80021d0:	f7ff fe68 	bl	8001ea4 <prvAddNewTaskToReadyList>
	}
 80021d4:	9805      	ldr	r0, [sp, #20]
 80021d6:	b006      	add	sp, #24
 80021d8:	bd70      	pop	{r4, r5, r6, pc}

080021da <xTaskCreate>:
	{
 80021da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80021de:	4607      	mov	r7, r0
 80021e0:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021e2:	0090      	lsls	r0, r2, #2
	{
 80021e4:	4688      	mov	r8, r1
 80021e6:	4616      	mov	r6, r2
 80021e8:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021ea:	f7ff fd95 	bl	8001d18 <pvPortMalloc>
			if( pxStack != NULL )
 80021ee:	4605      	mov	r5, r0
 80021f0:	b1e8      	cbz	r0, 800222e <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80021f2:	2054      	movs	r0, #84	; 0x54
 80021f4:	f7ff fd90 	bl	8001d18 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80021f8:	4604      	mov	r4, r0
 80021fa:	b1a8      	cbz	r0, 8002228 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8002204:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002206:	9301      	str	r3, [sp, #4]
 8002208:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800220a:	9002      	str	r0, [sp, #8]
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	4632      	mov	r2, r6
 8002210:	464b      	mov	r3, r9
 8002212:	4641      	mov	r1, r8
 8002214:	4638      	mov	r0, r7
 8002216:	f7ff fed3 	bl	8001fc0 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800221a:	4620      	mov	r0, r4
 800221c:	f7ff fe42 	bl	8001ea4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002220:	2001      	movs	r0, #1
	}
 8002222:	b005      	add	sp, #20
 8002224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8002228:	4628      	mov	r0, r5
 800222a:	f7ff fe03 	bl	8001e34 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800222e:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8002232:	e7f6      	b.n	8002222 <xTaskCreate+0x48>

08002234 <vTaskStartScheduler>:
{
 8002234:	b510      	push	{r4, lr}
 8002236:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002238:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800223a:	aa07      	add	r2, sp, #28
 800223c:	a906      	add	r1, sp, #24
 800223e:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002240:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002242:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002244:	f000 f99e 	bl	8002584 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002248:	9b05      	ldr	r3, [sp, #20]
 800224a:	9302      	str	r3, [sp, #8]
 800224c:	9b06      	ldr	r3, [sp, #24]
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	9400      	str	r4, [sp, #0]
 8002252:	4623      	mov	r3, r4
 8002254:	9a07      	ldr	r2, [sp, #28]
 8002256:	490d      	ldr	r1, [pc, #52]	; (800228c <vTaskStartScheduler+0x58>)
 8002258:	480d      	ldr	r0, [pc, #52]	; (8002290 <vTaskStartScheduler+0x5c>)
 800225a:	f7ff ff87 	bl	800216c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800225e:	b190      	cbz	r0, 8002286 <vTaskStartScheduler+0x52>
 8002260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002264:	f383 8811 	msr	BASEPRI, r3
 8002268:	f3bf 8f6f 	isb	sy
 800226c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <vTaskStartScheduler+0x60>)
 8002272:	f04f 32ff 	mov.w	r2, #4294967295
 8002276:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002278:	4b07      	ldr	r3, [pc, #28]	; (8002298 <vTaskStartScheduler+0x64>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <vTaskStartScheduler+0x68>)
 8002280:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8002282:	f7ff fc9f 	bl	8001bc4 <xPortStartScheduler>
}
 8002286:	b008      	add	sp, #32
 8002288:	bd10      	pop	{r4, pc}
 800228a:	bf00      	nop
 800228c:	08003fd4 	.word	0x08003fd4
 8002290:	08002079 	.word	0x08002079
 8002294:	20003d8c 	.word	0x20003d8c
 8002298:	20003da8 	.word	0x20003da8
 800229c:	20003dd4 	.word	0x20003dd4

080022a0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80022a0:	4a02      	ldr	r2, [pc, #8]	; (80022ac <vTaskSuspendAll+0xc>)
 80022a2:	6813      	ldr	r3, [r2, #0]
 80022a4:	3301      	adds	r3, #1
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	20003d58 	.word	0x20003d58

080022b0 <xTaskIncrementTick>:
{
 80022b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022b4:	4b3c      	ldr	r3, [pc, #240]	; (80023a8 <xTaskIncrementTick+0xf8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d153      	bne.n	8002364 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80022bc:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <xTaskIncrementTick+0xfc>)
 80022be:	681c      	ldr	r4, [r3, #0]
 80022c0:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80022c2:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80022c4:	b9bc      	cbnz	r4, 80022f6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80022c6:	4b3a      	ldr	r3, [pc, #232]	; (80023b0 <xTaskIncrementTick+0x100>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	b142      	cbz	r2, 80022e0 <xTaskIncrementTick+0x30>
 80022ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d2:	f383 8811 	msr	BASEPRI, r3
 80022d6:	f3bf 8f6f 	isb	sy
 80022da:	f3bf 8f4f 	dsb	sy
 80022de:	e7fe      	b.n	80022de <xTaskIncrementTick+0x2e>
 80022e0:	4a34      	ldr	r2, [pc, #208]	; (80023b4 <xTaskIncrementTick+0x104>)
 80022e2:	6819      	ldr	r1, [r3, #0]
 80022e4:	6810      	ldr	r0, [r2, #0]
 80022e6:	6018      	str	r0, [r3, #0]
 80022e8:	6011      	str	r1, [r2, #0]
 80022ea:	4a33      	ldr	r2, [pc, #204]	; (80023b8 <xTaskIncrementTick+0x108>)
 80022ec:	6813      	ldr	r3, [r2, #0]
 80022ee:	3301      	adds	r3, #1
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	f7ff fe53 	bl	8001f9c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80022f6:	4d31      	ldr	r5, [pc, #196]	; (80023bc <xTaskIncrementTick+0x10c>)
 80022f8:	4f31      	ldr	r7, [pc, #196]	; (80023c0 <xTaskIncrementTick+0x110>)
 80022fa:	682b      	ldr	r3, [r5, #0]
 80022fc:	429c      	cmp	r4, r3
 80022fe:	f04f 0b00 	mov.w	fp, #0
 8002302:	d33e      	bcc.n	8002382 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002304:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80023b0 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8002308:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80023d0 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800230c:	f8d8 2000 	ldr.w	r2, [r8]
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	bb72      	cbnz	r2, 8002372 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002314:	f04f 32ff 	mov.w	r2, #4294967295
 8002318:	602a      	str	r2, [r5, #0]
					break;
 800231a:	e032      	b.n	8002382 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800231c:	f106 0a04 	add.w	sl, r6, #4
 8002320:	4650      	mov	r0, sl
 8002322:	f7ff fb3f 	bl	80019a4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002326:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002328:	b119      	cbz	r1, 8002332 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800232a:	f106 0018 	add.w	r0, r6, #24
 800232e:	f7ff fb39 	bl	80019a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002332:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002334:	f8d9 3000 	ldr.w	r3, [r9]
 8002338:	2201      	movs	r2, #1
 800233a:	fa02 f100 	lsl.w	r1, r2, r0
 800233e:	4319      	orrs	r1, r3
 8002340:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <xTaskIncrementTick+0x114>)
 8002342:	f8c9 1000 	str.w	r1, [r9]
 8002346:	f04f 0e14 	mov.w	lr, #20
 800234a:	4651      	mov	r1, sl
 800234c:	fb0e 3000 	mla	r0, lr, r0, r3
 8002350:	f7ff fb05 	bl	800195e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002354:	6838      	ldr	r0, [r7, #0]
 8002356:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002358:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800235a:	4291      	cmp	r1, r2
 800235c:	bf28      	it	cs
 800235e:	f04f 0b01 	movcs.w	fp, #1
 8002362:	e7d3      	b.n	800230c <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002364:	4a18      	ldr	r2, [pc, #96]	; (80023c8 <xTaskIncrementTick+0x118>)
 8002366:	6813      	ldr	r3, [r2, #0]
 8002368:	3301      	adds	r3, #1
 800236a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800236c:	f04f 0b00 	mov.w	fp, #0
 8002370:	e011      	b.n	8002396 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002372:	f8d8 2000 	ldr.w	r2, [r8]
 8002376:	68d2      	ldr	r2, [r2, #12]
 8002378:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800237a:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 800237c:	428c      	cmp	r4, r1
 800237e:	d2cd      	bcs.n	800231c <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8002380:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <xTaskIncrementTick+0x114>)
 8002386:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002388:	2214      	movs	r2, #20
 800238a:	434a      	muls	r2, r1
 800238c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800238e:	2a02      	cmp	r2, #2
 8002390:	bf28      	it	cs
 8002392:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8002396:	4a0d      	ldr	r2, [pc, #52]	; (80023cc <xTaskIncrementTick+0x11c>)
 8002398:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800239a:	2a00      	cmp	r2, #0
 800239c:	bf18      	it	ne
 800239e:	f04f 0b01 	movne.w	fp, #1
}
 80023a2:	4658      	mov	r0, fp
 80023a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023a8:	20003d58 	.word	0x20003d58
 80023ac:	20003dd4 	.word	0x20003dd4
 80023b0:	20003cb8 	.word	0x20003cb8
 80023b4:	20003cbc 	.word	0x20003cbc
 80023b8:	20003d90 	.word	0x20003d90
 80023bc:	20003d8c 	.word	0x20003d8c
 80023c0:	20003cb4 	.word	0x20003cb4
 80023c4:	20003cc0 	.word	0x20003cc0
 80023c8:	20003d54 	.word	0x20003d54
 80023cc:	20003dd8 	.word	0x20003dd8
 80023d0:	20003d60 	.word	0x20003d60

080023d4 <xTaskResumeAll>:
{
 80023d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80023d8:	4c31      	ldr	r4, [pc, #196]	; (80024a0 <xTaskResumeAll+0xcc>)
 80023da:	6823      	ldr	r3, [r4, #0]
 80023dc:	b943      	cbnz	r3, 80023f0 <xTaskResumeAll+0x1c>
 80023de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e2:	f383 8811 	msr	BASEPRI, r3
 80023e6:	f3bf 8f6f 	isb	sy
 80023ea:	f3bf 8f4f 	dsb	sy
 80023ee:	e7fe      	b.n	80023ee <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80023f0:	f7ff fb50 	bl	8001a94 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80023f4:	6823      	ldr	r3, [r4, #0]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023fa:	6824      	ldr	r4, [r4, #0]
 80023fc:	b12c      	cbz	r4, 800240a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80023fe:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002400:	f7ff fb6a 	bl	8001ad8 <vPortExitCritical>
}
 8002404:	4620      	mov	r0, r4
 8002406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800240a:	4b26      	ldr	r3, [pc, #152]	; (80024a4 <xTaskResumeAll+0xd0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f5      	beq.n	80023fe <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002412:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80024bc <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8002416:	4f24      	ldr	r7, [pc, #144]	; (80024a8 <xTaskResumeAll+0xd4>)
 8002418:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80024c0 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800241c:	f8d9 3000 	ldr.w	r3, [r9]
 8002420:	b9e3      	cbnz	r3, 800245c <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8002422:	b10c      	cbz	r4, 8002428 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8002424:	f7ff fdba 	bl	8001f9c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002428:	4d20      	ldr	r5, [pc, #128]	; (80024ac <xTaskResumeAll+0xd8>)
 800242a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800242c:	b144      	cbz	r4, 8002440 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 800242e:	4e20      	ldr	r6, [pc, #128]	; (80024b0 <xTaskResumeAll+0xdc>)
 8002430:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8002432:	f7ff ff3d 	bl	80022b0 <xTaskIncrementTick>
 8002436:	b100      	cbz	r0, 800243a <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8002438:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800243a:	3c01      	subs	r4, #1
 800243c:	d1f9      	bne.n	8002432 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 800243e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002440:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <xTaskResumeAll+0xdc>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0da      	beq.n	80023fe <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002448:	4b1a      	ldr	r3, [pc, #104]	; (80024b4 <xTaskResumeAll+0xe0>)
 800244a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	f3bf 8f4f 	dsb	sy
 8002454:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002458:	2401      	movs	r4, #1
 800245a:	e7d1      	b.n	8002400 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800245c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002460:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002462:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002464:	f104 0018 	add.w	r0, r4, #24
 8002468:	f7ff fa9c 	bl	80019a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800246c:	4630      	mov	r0, r6
 800246e:	f7ff fa99 	bl	80019a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002472:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002474:	6839      	ldr	r1, [r7, #0]
 8002476:	2501      	movs	r5, #1
 8002478:	fa05 f302 	lsl.w	r3, r5, r2
 800247c:	2014      	movs	r0, #20
 800247e:	430b      	orrs	r3, r1
 8002480:	fb00 8002 	mla	r0, r0, r2, r8
 8002484:	4631      	mov	r1, r6
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	f7ff fa69 	bl	800195e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800248c:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <xTaskResumeAll+0xe4>)
 800248e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002494:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8002496:	bf24      	itt	cs
 8002498:	4b05      	ldrcs	r3, [pc, #20]	; (80024b0 <xTaskResumeAll+0xdc>)
 800249a:	601d      	strcs	r5, [r3, #0]
 800249c:	e7be      	b.n	800241c <xTaskResumeAll+0x48>
 800249e:	bf00      	nop
 80024a0:	20003d58 	.word	0x20003d58
 80024a4:	20003d4c 	.word	0x20003d4c
 80024a8:	20003d60 	.word	0x20003d60
 80024ac:	20003d54 	.word	0x20003d54
 80024b0:	20003dd8 	.word	0x20003dd8
 80024b4:	e000ed04 	.word	0xe000ed04
 80024b8:	20003cb4 	.word	0x20003cb4
 80024bc:	20003d94 	.word	0x20003d94
 80024c0:	20003cc0 	.word	0x20003cc0

080024c4 <vTaskDelay>:
	{
 80024c4:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80024c6:	b940      	cbnz	r0, 80024da <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80024c8:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <vTaskDelay+0x40>)
 80024ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	f3bf 8f4f 	dsb	sy
 80024d4:	f3bf 8f6f 	isb	sy
 80024d8:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80024da:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <vTaskDelay+0x44>)
 80024dc:	6819      	ldr	r1, [r3, #0]
 80024de:	b141      	cbz	r1, 80024f2 <vTaskDelay+0x2e>
 80024e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e4:	f383 8811 	msr	BASEPRI, r3
 80024e8:	f3bf 8f6f 	isb	sy
 80024ec:	f3bf 8f4f 	dsb	sy
 80024f0:	e7fe      	b.n	80024f0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80024f2:	f7ff fed5 	bl	80022a0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80024f6:	f7ff fdf3 	bl	80020e0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80024fa:	f7ff ff6b 	bl	80023d4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80024fe:	2800      	cmp	r0, #0
 8002500:	d0e2      	beq.n	80024c8 <vTaskDelay+0x4>
 8002502:	bd08      	pop	{r3, pc}
 8002504:	e000ed04 	.word	0xe000ed04
 8002508:	20003d58 	.word	0x20003d58

0800250c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800250c:	4b17      	ldr	r3, [pc, #92]	; (800256c <vTaskSwitchContext+0x60>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4b17      	ldr	r3, [pc, #92]	; (8002570 <vTaskSwitchContext+0x64>)
{
 8002512:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002514:	b112      	cbz	r2, 800251c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8002516:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800251c:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800251e:	4b15      	ldr	r3, [pc, #84]	; (8002574 <vTaskSwitchContext+0x68>)
 8002520:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f1c3 031f 	rsb	r3, r3, #31
 800252c:	2214      	movs	r2, #20
 800252e:	4912      	ldr	r1, [pc, #72]	; (8002578 <vTaskSwitchContext+0x6c>)
 8002530:	435a      	muls	r2, r3
 8002532:	1888      	adds	r0, r1, r2
 8002534:	588c      	ldr	r4, [r1, r2]
 8002536:	b944      	cbnz	r4, 800254a <vTaskSwitchContext+0x3e>
	__asm volatile
 8002538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253c:	f383 8811 	msr	BASEPRI, r3
 8002540:	f3bf 8f6f 	isb	sy
 8002544:	f3bf 8f4f 	dsb	sy
 8002548:	e7fe      	b.n	8002548 <vTaskSwitchContext+0x3c>
 800254a:	6844      	ldr	r4, [r0, #4]
 800254c:	3208      	adds	r2, #8
 800254e:	6864      	ldr	r4, [r4, #4]
 8002550:	6044      	str	r4, [r0, #4]
 8002552:	440a      	add	r2, r1
 8002554:	4294      	cmp	r4, r2
 8002556:	bf04      	itt	eq
 8002558:	6862      	ldreq	r2, [r4, #4]
 800255a:	6042      	streq	r2, [r0, #4]
 800255c:	2214      	movs	r2, #20
 800255e:	fb02 1303 	mla	r3, r2, r3, r1
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	4b05      	ldr	r3, [pc, #20]	; (800257c <vTaskSwitchContext+0x70>)
 8002568:	e7d6      	b.n	8002518 <vTaskSwitchContext+0xc>
 800256a:	bf00      	nop
 800256c:	20003d58 	.word	0x20003d58
 8002570:	20003dd8 	.word	0x20003dd8
 8002574:	20003d60 	.word	0x20003d60
 8002578:	20003cc0 	.word	0x20003cc0
 800257c:	20003cb4 	.word	0x20003cb4

08002580 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8002580:	4770      	bx	lr
	...

08002584 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002584:	4b03      	ldr	r3, [pc, #12]	; (8002594 <vApplicationGetIdleTaskMemory+0x10>)
 8002586:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002588:	4b03      	ldr	r3, [pc, #12]	; (8002598 <vApplicationGetIdleTaskMemory+0x14>)
 800258a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	20003fdc 	.word	0x20003fdc
 8002598:	20003ddc 	.word	0x20003ddc

0800259c <Delay>:
/**
 * @brief  Delays for amount of micro seconds
 * @param  micros: Number of microseconds for delay
 * @retval None
 */
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 800259c:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if !defined(STM32F0xx)
	uint32_t start = DWT->CYCCNT;
 800259e:	4c09      	ldr	r4, [pc, #36]	; (80025c4 <Delay+0x28>)
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 80025a0:	9001      	str	r0, [sp, #4]
	uint32_t start = DWT->CYCCNT;
 80025a2:	6865      	ldr	r5, [r4, #4]
	
	/* Go to number of cycles for system */
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80025a4:	f7fe fb9e 	bl	8000ce4 <HAL_RCC_GetHCLKFreq>
 80025a8:	9b01      	ldr	r3, [sp, #4]
 80025aa:	4a07      	ldr	r2, [pc, #28]	; (80025c8 <Delay+0x2c>)
 80025ac:	fbb0 f0f2 	udiv	r0, r0, r2
 80025b0:	4343      	muls	r3, r0
 80025b2:	9301      	str	r3, [sp, #4]
	
	/* Delay till end */
	while ((DWT->CYCCNT - start) < micros);
 80025b4:	6863      	ldr	r3, [r4, #4]
 80025b6:	9a01      	ldr	r2, [sp, #4]
 80025b8:	1b5b      	subs	r3, r3, r5
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d3fa      	bcc.n	80025b4 <Delay+0x18>
	micros *= (SystemCoreClock / 1000000) / 5;
	
	/* Wait till done */
	while (micros--);
#endif
}
 80025be:	b003      	add	sp, #12
 80025c0:	bd30      	pop	{r4, r5, pc}
 80025c2:	bf00      	nop
 80025c4:	e0001000 	.word	0xe0001000
 80025c8:	000f4240 	.word	0x000f4240

080025cc <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) {
 80025cc:	b508      	push	{r3, lr}

	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		LD2_TOGGLE()
 80025ce:	4c04      	ldr	r4, [pc, #16]	; (80025e0 <StartDefaultTask+0x14>)
 80025d0:	6963      	ldr	r3, [r4, #20]
 80025d2:	f083 0320 	eor.w	r3, r3, #32
 80025d6:	6163      	str	r3, [r4, #20]
		;
		vTaskDelay(100);
 80025d8:	2064      	movs	r0, #100	; 0x64
 80025da:	f7ff ff73 	bl	80024c4 <vTaskDelay>
 80025de:	e7f7      	b.n	80025d0 <StartDefaultTask+0x4>
 80025e0:	40020000 	.word	0x40020000

080025e4 <set_gpio_output>:
	GPIO_InitStruct.Pin = DHT11_Pin;
 80025e4:	4905      	ldr	r1, [pc, #20]	; (80025fc <set_gpio_output+0x18>)
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80025e6:	4806      	ldr	r0, [pc, #24]	; (8002600 <set_gpio_output+0x1c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e8:	2301      	movs	r3, #1
 80025ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025ee:	e881 000c 	stmia.w	r1, {r2, r3}
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60cb      	str	r3, [r1, #12]
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80025f6:	f7fe b9b9 	b.w	800096c <HAL_GPIO_Init>
 80025fa:	bf00      	nop
 80025fc:	20004160 	.word	0x20004160
 8002600:	40020000 	.word	0x40020000

08002604 <set_gpio_input>:
	GPIO_InitStruct.Pin = DHT11_Pin;
 8002604:	4904      	ldr	r1, [pc, #16]	; (8002618 <set_gpio_input+0x14>)
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8002606:	4805      	ldr	r0, [pc, #20]	; (800261c <set_gpio_input+0x18>)
	GPIO_InitStruct.Pin = DHT11_Pin;
 8002608:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800260c:	600b      	str	r3, [r1, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800260e:	2300      	movs	r3, #0
 8002610:	604b      	str	r3, [r1, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	608b      	str	r3, [r1, #8]
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8002614:	f7fe b9aa 	b.w	800096c <HAL_GPIO_Init>
 8002618:	20004160 	.word	0x20004160
 800261c:	40020000 	.word	0x40020000

08002620 <DHT11_start>:
void DHT11_start(void) {
 8002620:	b508      	push	{r3, lr}
	set_gpio_output();  // set the pin as output
 8002622:	f7ff ffdf 	bl	80025e4 <set_gpio_output>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, 0);   // pull the pin low
 8002626:	2200      	movs	r2, #0
 8002628:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800262c:	4805      	ldr	r0, [pc, #20]	; (8002644 <DHT11_start+0x24>)
 800262e:	f7fe fa7d 	bl	8000b2c <HAL_GPIO_WritePin>
	Delay(18000);   // wait for 18ms
 8002632:	f244 6050 	movw	r0, #18000	; 0x4650
 8002636:	f7ff ffb1 	bl	800259c <Delay>
}
 800263a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	set_gpio_input();   // set as input
 800263e:	f7ff bfe1 	b.w	8002604 <set_gpio_input>
 8002642:	bf00      	nop
 8002644:	40020000 	.word	0x40020000

08002648 <check_response>:
{
 8002648:	b510      	push	{r4, lr}
	Delay (40);
 800264a:	2028      	movs	r0, #40	; 0x28
 800264c:	f7ff ffa6 	bl	800259c <Delay>
	if (!(HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)))
 8002650:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002654:	480c      	ldr	r0, [pc, #48]	; (8002688 <check_response+0x40>)
 8002656:	f7fe fa63 	bl	8000b20 <HAL_GPIO_ReadPin>
 800265a:	b958      	cbnz	r0, 8002674 <check_response+0x2c>
		Delay(80);
 800265c:	2050      	movs	r0, #80	; 0x50
 800265e:	f7ff ff9d 	bl	800259c <Delay>
		if ((HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin))) check = 1;
 8002662:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002666:	4808      	ldr	r0, [pc, #32]	; (8002688 <check_response+0x40>)
 8002668:	f7fe fa5a 	bl	8000b20 <HAL_GPIO_ReadPin>
 800266c:	b110      	cbz	r0, 8002674 <check_response+0x2c>
 800266e:	4b07      	ldr	r3, [pc, #28]	; (800268c <check_response+0x44>)
 8002670:	2201      	movs	r2, #1
 8002672:	701a      	strb	r2, [r3, #0]
	while ((HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)));   // wait for the pin to go low
 8002674:	4c04      	ldr	r4, [pc, #16]	; (8002688 <check_response+0x40>)
 8002676:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800267a:	4620      	mov	r0, r4
 800267c:	f7fe fa50 	bl	8000b20 <HAL_GPIO_ReadPin>
 8002680:	2800      	cmp	r0, #0
 8002682:	d1f8      	bne.n	8002676 <check_response+0x2e>
}
 8002684:	bd10      	pop	{r4, pc}
 8002686:	bf00      	nop
 8002688:	40020000 	.word	0x40020000
 800268c:	20004030 	.word	0x20004030

08002690 <read_data>:
{
 8002690:	b570      	push	{r4, r5, r6, lr}
		while (!(HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)));   // wait for the pin to go high
 8002692:	4e13      	ldr	r6, [pc, #76]	; (80026e0 <read_data+0x50>)
{
 8002694:	2400      	movs	r4, #0
 8002696:	2507      	movs	r5, #7
		while (!(HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)));   // wait for the pin to go high
 8002698:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800269c:	4630      	mov	r0, r6
 800269e:	f7fe fa3f 	bl	8000b20 <HAL_GPIO_ReadPin>
 80026a2:	2800      	cmp	r0, #0
 80026a4:	d0f8      	beq.n	8002698 <read_data+0x8>
		Delay(40);   // wait for 40 us
 80026a6:	2028      	movs	r0, #40	; 0x28
 80026a8:	f7ff ff78 	bl	800259c <Delay>
		if ((HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)) == 0)   // if the pin is low
 80026ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026b0:	4630      	mov	r0, r6
 80026b2:	f7fe fa35 	bl	8000b20 <HAL_GPIO_ReadPin>
 80026b6:	2301      	movs	r3, #1
			i&= ~(1<<(7-j));   // write 0
 80026b8:	40ab      	lsls	r3, r5
		if ((HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)) == 0)   // if the pin is low
 80026ba:	b968      	cbnz	r0, 80026d8 <read_data+0x48>
			i&= ~(1<<(7-j));   // write 0
 80026bc:	ea24 0403 	bic.w	r4, r4, r3
		while ((HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)));
 80026c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026c4:	4630      	mov	r0, r6
 80026c6:	f7fe fa2b 	bl	8000b20 <HAL_GPIO_ReadPin>
 80026ca:	2800      	cmp	r0, #0
 80026cc:	d1f8      	bne.n	80026c0 <read_data+0x30>
	for (j=0;j<8;j++)
 80026ce:	f115 35ff 	adds.w	r5, r5, #4294967295
 80026d2:	d2e1      	bcs.n	8002698 <read_data+0x8>
}
 80026d4:	4620      	mov	r0, r4
 80026d6:	bd70      	pop	{r4, r5, r6, pc}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80026d8:	431c      	orrs	r4, r3
 80026da:	b2e4      	uxtb	r4, r4
 80026dc:	e7f0      	b.n	80026c0 <read_data+0x30>
 80026de:	bf00      	nop
 80026e0:	40020000 	.word	0x40020000

080026e4 <Start_ds18b20_task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_ds18b20_task */

void Start_ds18b20_task(void const * argument) {
 80026e4:	b583      	push	{r0, r1, r7, lr}
	/* USER CODE BEGIN Start_ds18b20_task */
	/* Infinite loop */
	for (;;) {
		if (HAL_GPIO_ReadPin(BlueB_GPIO_Port, BlueB_Pin)) {
 80026e6:	4c39      	ldr	r4, [pc, #228]	; (80027cc <Start_ds18b20_task+0xe8>)
		} else if (HAL_GPIO_ReadPin(BlueB_GPIO_Port, BlueB_Pin)
				== GPIO_PIN_RESET) {

			DHT11_start ();
			check_response ();
			Rh_byte1 = read_data ();
 80026e8:	4e39      	ldr	r6, [pc, #228]	; (80027d0 <Start_ds18b20_task+0xec>)
//			humidity_int_decimals = ((uint8_t) Humidity) / 10;

			humidity_int_units = (Rh_byte1) % 10;
			humidity_int_decimals = (Rh_byte1) / 10;

				GPIOB->ODR = numbers[humidity_int_decimals];
 80026ea:	4d3a      	ldr	r5, [pc, #232]	; (80027d4 <Start_ds18b20_task+0xf0>)
		if (HAL_GPIO_ReadPin(BlueB_GPIO_Port, BlueB_Pin)) {
 80026ec:	4837      	ldr	r0, [pc, #220]	; (80027cc <Start_ds18b20_task+0xe8>)
 80026ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026f2:	f7fe fa15 	bl	8000b20 <HAL_GPIO_ReadPin>
 80026f6:	2800      	cmp	r0, #0
 80026f8:	d031      	beq.n	800275e <Start_ds18b20_task+0x7a>
			if (TM_DS18B20_Is(DS_ROM)) {
 80026fa:	4837      	ldr	r0, [pc, #220]	; (80027d8 <Start_ds18b20_task+0xf4>)
 80026fc:	f000 fcba 	bl	8003074 <TM_DS18B20_Is>
 8002700:	b348      	cbz	r0, 8002756 <Start_ds18b20_task+0x72>
				if (TM_DS18B20_AllDone(&OW)) {
 8002702:	4836      	ldr	r0, [pc, #216]	; (80027dc <Start_ds18b20_task+0xf8>)
 8002704:	f000 fd60 	bl	80031c8 <TM_DS18B20_AllDone>
 8002708:	b328      	cbz	r0, 8002756 <Start_ds18b20_task+0x72>
					if (TM_DS18B20_Read(&OW, DS_ROM, &temp)) {
 800270a:	4f35      	ldr	r7, [pc, #212]	; (80027e0 <Start_ds18b20_task+0xfc>)
 800270c:	4932      	ldr	r1, [pc, #200]	; (80027d8 <Start_ds18b20_task+0xf4>)
 800270e:	4833      	ldr	r0, [pc, #204]	; (80027dc <Start_ds18b20_task+0xf8>)
 8002710:	463a      	mov	r2, r7
 8002712:	f000 fbc5 	bl	8002ea0 <TM_DS18B20_Read>
 8002716:	b1f0      	cbz	r0, 8002756 <Start_ds18b20_task+0x72>
						TM_DS18B20_StartAll(&OW);
 8002718:	4830      	ldr	r0, [pc, #192]	; (80027dc <Start_ds18b20_task+0xf8>)
 800271a:	f000 fbb3 	bl	8002e84 <TM_DS18B20_StartAll>
						temp_int_units = ((uint8_t) temp) % 10;
 800271e:	edd7 7a00 	vldr	s15, [r7]
 8002722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002726:	230a      	movs	r3, #10
 8002728:	edcd 7a01 	vstr	s15, [sp, #4]
 800272c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8002730:	fbb1 f2f3 	udiv	r2, r1, r3
 8002734:	fb03 1312 	mls	r3, r3, r2, r1
 8002738:	492a      	ldr	r1, [pc, #168]	; (80027e4 <Start_ds18b20_task+0x100>)
 800273a:	b2db      	uxtb	r3, r3
 800273c:	700b      	strb	r3, [r1, #0]
						temp_int_decimals = ((uint8_t) temp) / 10;
 800273e:	492a      	ldr	r1, [pc, #168]	; (80027e8 <Start_ds18b20_task+0x104>)
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	700a      	strb	r2, [r1, #0]
						GPIOB->ODR = numbers[temp_int_decimals];
 8002744:	4929      	ldr	r1, [pc, #164]	; (80027ec <Start_ds18b20_task+0x108>)
 8002746:	5c8a      	ldrb	r2, [r1, r2]
 8002748:	616a      	str	r2, [r5, #20]
						GPIOC->ODR = numbers[temp_int_units];
 800274a:	5ccb      	ldrb	r3, [r1, r3]
 800274c:	6163      	str	r3, [r4, #20]
						vTaskDelay(500);
 800274e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002752:	f7ff feb7 	bl	80024c4 <vTaskDelay>
			boolVar = false;
 8002756:	4b26      	ldr	r3, [pc, #152]	; (80027f0 <Start_ds18b20_task+0x10c>)
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
 800275c:	e7c6      	b.n	80026ec <Start_ds18b20_task+0x8>
		} else if (HAL_GPIO_ReadPin(BlueB_GPIO_Port, BlueB_Pin)
 800275e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002762:	4620      	mov	r0, r4
 8002764:	f7fe f9dc 	bl	8000b20 <HAL_GPIO_ReadPin>
 8002768:	2800      	cmp	r0, #0
 800276a:	d1bf      	bne.n	80026ec <Start_ds18b20_task+0x8>
			DHT11_start ();
 800276c:	f7ff ff58 	bl	8002620 <DHT11_start>
			check_response ();
 8002770:	f7ff ff6a 	bl	8002648 <check_response>
			Rh_byte1 = read_data ();
 8002774:	f7ff ff8c 	bl	8002690 <read_data>
 8002778:	7030      	strb	r0, [r6, #0]
			Rh_byte2 = read_data ();
 800277a:	f7ff ff89 	bl	8002690 <read_data>
 800277e:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <Start_ds18b20_task+0x110>)
 8002780:	7018      	strb	r0, [r3, #0]
			Temp_byte1 = read_data ();
 8002782:	f7ff ff85 	bl	8002690 <read_data>
 8002786:	4b1c      	ldr	r3, [pc, #112]	; (80027f8 <Start_ds18b20_task+0x114>)
 8002788:	7018      	strb	r0, [r3, #0]
			Temp_byte2 = read_data ();
 800278a:	f7ff ff81 	bl	8002690 <read_data>
 800278e:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <Start_ds18b20_task+0x118>)
 8002790:	7018      	strb	r0, [r3, #0]
			sum = read_data();
 8002792:	f7ff ff7d 	bl	8002690 <read_data>
 8002796:	4b1a      	ldr	r3, [pc, #104]	; (8002800 <Start_ds18b20_task+0x11c>)
			humidity_int_units = (Rh_byte1) % 10;
 8002798:	7831      	ldrb	r1, [r6, #0]
			sum = read_data();
 800279a:	8018      	strh	r0, [r3, #0]
			humidity_int_units = (Rh_byte1) % 10;
 800279c:	230a      	movs	r3, #10
 800279e:	fbb1 f2f3 	udiv	r2, r1, r3
 80027a2:	fb03 1312 	mls	r3, r3, r2, r1
 80027a6:	4917      	ldr	r1, [pc, #92]	; (8002804 <Start_ds18b20_task+0x120>)
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	700b      	strb	r3, [r1, #0]
			humidity_int_decimals = (Rh_byte1) / 10;
 80027ac:	4916      	ldr	r1, [pc, #88]	; (8002808 <Start_ds18b20_task+0x124>)
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	700a      	strb	r2, [r1, #0]
				GPIOB->ODR = numbers[humidity_int_decimals];
 80027b2:	490e      	ldr	r1, [pc, #56]	; (80027ec <Start_ds18b20_task+0x108>)
 80027b4:	5c8a      	ldrb	r2, [r1, r2]
 80027b6:	616a      	str	r2, [r5, #20]
				GPIOC->ODR = numbers[humidity_int_units];
 80027b8:	5ccb      	ldrb	r3, [r1, r3]
 80027ba:	6163      	str	r3, [r4, #20]
				boolVar = true;
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <Start_ds18b20_task+0x10c>)
 80027be:	2201      	movs	r2, #1
				vTaskDelay(1000);
 80027c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
				boolVar = true;
 80027c4:	701a      	strb	r2, [r3, #0]
				vTaskDelay(1000);
 80027c6:	f7ff fe7d 	bl	80024c4 <vTaskDelay>
 80027ca:	e78f      	b.n	80026ec <Start_ds18b20_task+0x8>
 80027cc:	40020800 	.word	0x40020800
 80027d0:	2000412c 	.word	0x2000412c
 80027d4:	40020400 	.word	0x40020400
 80027d8:	2000411c 	.word	0x2000411c
 80027dc:	20004140 	.word	0x20004140
 80027e0:	20004138 	.word	0x20004138
 80027e4:	200041c2 	.word	0x200041c2
 80027e8:	2000413e 	.word	0x2000413e
 80027ec:	20000005 	.word	0x20000005
 80027f0:	20000004 	.word	0x20000004
 80027f4:	2000415e 	.word	0x2000415e
 80027f8:	2000415d 	.word	0x2000415d
 80027fc:	20004208 	.word	0x20004208
 8002800:	2000412a 	.word	0x2000412a
 8002804:	20004129 	.word	0x20004129
 8002808:	2000415c 	.word	0x2000415c

0800280c <SystemClock_Config>:
void SystemClock_Config(void) {
 800280c:	b530      	push	{r4, r5, lr}
 800280e:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002810:	2234      	movs	r2, #52	; 0x34
 8002812:	2100      	movs	r1, #0
 8002814:	a807      	add	r0, sp, #28
 8002816:	f000 ff96 	bl	8003746 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800281a:	2100      	movs	r1, #0
 800281c:	2214      	movs	r2, #20
 800281e:	a802      	add	r0, sp, #8
 8002820:	f000 ff91 	bl	8003746 <memset>
	__HAL_RCC_PWR_CLK_ENABLE()
 8002824:	2500      	movs	r5, #0
 8002826:	4b1d      	ldr	r3, [pc, #116]	; (800289c <SystemClock_Config+0x90>)
 8002828:	9500      	str	r5, [sp, #0]
 800282a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800282c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002830:	641a      	str	r2, [r3, #64]	; 0x40
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	9b00      	ldr	r3, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800283c:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <SystemClock_Config+0x94>)
 800283e:	9501      	str	r5, [sp, #4]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800284a:	950e      	str	r5, [sp, #56]	; 0x38
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800284c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002850:	9301      	str	r3, [sp, #4]
 8002852:	9b01      	ldr	r3, [sp, #4]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002854:	2301      	movs	r3, #1
 8002856:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002858:	2310      	movs	r3, #16
 800285a:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800285c:	2308      	movs	r3, #8
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800285e:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002860:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002862:	a807      	add	r0, sp, #28
	RCC_OscInitStruct.PLL.PLLN = 180;
 8002864:	23b4      	movs	r3, #180	; 0xb4
 8002866:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002868:	9407      	str	r4, [sp, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800286a:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800286c:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800286e:	9412      	str	r4, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002870:	9413      	str	r4, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002872:	f7fe fac3 	bl	8000dfc <HAL_RCC_OscConfig>
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8002876:	f7fe f95f 	bl	8000b38 <HAL_PWREx_EnableOverDrive>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800287a:	230f      	movs	r3, #15
 800287c:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800287e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002882:	9305      	str	r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002884:	2105      	movs	r1, #5
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800288a:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800288c:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800288e:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002890:	9306      	str	r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002892:	f7fe f98d 	bl	8000bb0 <HAL_RCC_ClockConfig>
}
 8002896:	b015      	add	sp, #84	; 0x54
 8002898:	bd30      	pop	{r4, r5, pc}
 800289a:	bf00      	nop
 800289c:	40023800 	.word	0x40023800
 80028a0:	40007000 	.word	0x40007000

080028a4 <main>:
int main(void) {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b094      	sub	sp, #80	; 0x50
	TM_RCC_InitSystem();
 80028a8:	f000 fea0 	bl	80035ec <TM_RCC_InitSystem>
	GPIOC->ODR = 0xff;
 80028ac:	4c85      	ldr	r4, [pc, #532]	; (8002ac4 <main+0x220>)
	GPIOB->ODR = 0xff;
 80028ae:	4a86      	ldr	r2, [pc, #536]	; (8002ac8 <main+0x224>)
	GPIOC->ODR = 0xff;
 80028b0:	23ff      	movs	r3, #255	; 0xff
 80028b2:	6163      	str	r3, [r4, #20]
	GPIOB->ODR = 0xff;
 80028b4:	6153      	str	r3, [r2, #20]
	HAL_Init();
 80028b6:	f7fd fe8b 	bl	80005d0 <HAL_Init>
	TM_OneWire_Init(&OW, GPIOC, GPIO_PIN_9);
 80028ba:	4884      	ldr	r0, [pc, #528]	; (8002acc <main+0x228>)
 80028bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028c0:	4621      	mov	r1, r4
 80028c2:	f000 fd51 	bl	8003368 <TM_OneWire_Init>
	if (TM_OneWire_First(&OW)) {
 80028c6:	4881      	ldr	r0, [pc, #516]	; (8002acc <main+0x228>)
 80028c8:	f000 fe50 	bl	800356c <TM_OneWire_First>
 80028cc:	b118      	cbz	r0, 80028d6 <main+0x32>
		TM_OneWire_GetFullROM(&OW, DS_ROM);
 80028ce:	4980      	ldr	r1, [pc, #512]	; (8002ad0 <main+0x22c>)
 80028d0:	487e      	ldr	r0, [pc, #504]	; (8002acc <main+0x228>)
 80028d2:	f000 fe62 	bl	800359a <TM_OneWire_GetFullROM>
	if (TM_DS18B20_Is(DS_ROM)) {
 80028d6:	487e      	ldr	r0, [pc, #504]	; (8002ad0 <main+0x22c>)
 80028d8:	f000 fbcc 	bl	8003074 <TM_DS18B20_Is>
 80028dc:	b190      	cbz	r0, 8002904 <main+0x60>
		TM_DS18B20_SetResolution(&OW, DS_ROM, TM_DS18B20_Resolution_9bits);
 80028de:	2209      	movs	r2, #9
 80028e0:	497b      	ldr	r1, [pc, #492]	; (8002ad0 <main+0x22c>)
 80028e2:	487a      	ldr	r0, [pc, #488]	; (8002acc <main+0x228>)
 80028e4:	f000 fb5e 	bl	8002fa4 <TM_DS18B20_SetResolution>
		TM_DS18B20_SetAlarmHighTemperature(&OW, DS_ROM, 30);
 80028e8:	221e      	movs	r2, #30
 80028ea:	4979      	ldr	r1, [pc, #484]	; (8002ad0 <main+0x22c>)
 80028ec:	4877      	ldr	r0, [pc, #476]	; (8002acc <main+0x228>)
 80028ee:	f000 fc19 	bl	8003124 <TM_DS18B20_SetAlarmHighTemperature>
		TM_DS18B20_SetAlarmLowTemperature(&OW, DS_ROM, 10);
 80028f2:	4977      	ldr	r1, [pc, #476]	; (8002ad0 <main+0x22c>)
 80028f4:	4875      	ldr	r0, [pc, #468]	; (8002acc <main+0x228>)
 80028f6:	220a      	movs	r2, #10
 80028f8:	f000 fbc2 	bl	8003080 <TM_DS18B20_SetAlarmLowTemperature>
		TM_DS18B20_Start(&OW, DS_ROM);
 80028fc:	4974      	ldr	r1, [pc, #464]	; (8002ad0 <main+0x22c>)
 80028fe:	4873      	ldr	r0, [pc, #460]	; (8002acc <main+0x228>)
 8002900:	f000 faac 	bl	8002e5c <TM_DS18B20_Start>
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002904:	2400      	movs	r4, #0
 8002906:	4d73      	ldr	r5, [pc, #460]	; (8002ad4 <main+0x230>)
	htim7.Instance = TIM7;
 8002908:	4e73      	ldr	r6, [pc, #460]	; (8002ad8 <main+0x234>)
	SystemClock_Config();
 800290a:	f7ff ff7f 	bl	800280c <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800290e:	2214      	movs	r2, #20
 8002910:	2100      	movs	r1, #0
 8002912:	a80d      	add	r0, sp, #52	; 0x34
 8002914:	f000 ff17 	bl	8003746 <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002918:	9402      	str	r4, [sp, #8]
 800291a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_GPIO_WritePin(GPIOC,
 800291c:	4869      	ldr	r0, [pc, #420]	; (8002ac4 <main+0x220>)
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800291e:	f043 0304 	orr.w	r3, r3, #4
 8002922:	632b      	str	r3, [r5, #48]	; 0x30
 8002924:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	9302      	str	r3, [sp, #8]
 800292c:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE()
 800292e:	9403      	str	r4, [sp, #12]
 8002930:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002936:	632b      	str	r3, [r5, #48]	; 0x30
 8002938:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800293a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293e:	9303      	str	r3, [sp, #12]
 8002940:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8002942:	9404      	str	r4, [sp, #16]
 8002944:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	632b      	str	r3, [r5, #48]	; 0x30
 800294c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	9304      	str	r3, [sp, #16]
 8002954:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002956:	9405      	str	r4, [sp, #20]
 8002958:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800295a:	f043 0302 	orr.w	r3, r3, #2
 800295e:	632b      	str	r3, [r5, #48]	; 0x30
 8002960:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	9305      	str	r3, [sp, #20]
	HAL_GPIO_WritePin(GPIOC,
 8002968:	4622      	mov	r2, r4
 800296a:	f240 21ff 	movw	r1, #767	; 0x2ff
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800296e:	9b05      	ldr	r3, [sp, #20]
	HAL_GPIO_WritePin(GPIOC,
 8002970:	f7fe f8dc 	bl	8000b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,
 8002974:	4622      	mov	r2, r4
 8002976:	f242 017f 	movw	r1, #8319	; 0x207f
 800297a:	4853      	ldr	r0, [pc, #332]	; (8002ac8 <main+0x224>)
 800297c:	f7fe f8d6 	bl	8000b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8002980:	4622      	mov	r2, r4
 8002982:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002986:	4855      	ldr	r0, [pc, #340]	; (8002adc <main+0x238>)
 8002988:	f7fe f8d0 	bl	8000b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800298c:	4622      	mov	r2, r4
 800298e:	2120      	movs	r1, #32
 8002990:	4852      	ldr	r0, [pc, #328]	; (8002adc <main+0x238>)
 8002992:	f7fe f8cb 	bl	8000b2c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002996:	2701      	movs	r7, #1
	GPIO_InitStruct.Pin = DHT11_Pin;
 8002998:	f44f 6300 	mov.w	r3, #2048	; 0x800
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800299c:	a90d      	add	r1, sp, #52	; 0x34
 800299e:	484f      	ldr	r0, [pc, #316]	; (8002adc <main+0x238>)
	GPIO_InitStruct.Pin = DHT11_Pin;
 80029a0:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a2:	970e      	str	r7, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a6:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80029a8:	f7fd ffe0 	bl	800096c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = B1_Pin;
 80029ac:	2302      	movs	r3, #2
 80029ae:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029b0:	a90d      	add	r1, sp, #52	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029b2:	4b4b      	ldr	r3, [pc, #300]	; (8002ae0 <main+0x23c>)
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029b4:	4844      	ldr	r0, [pc, #272]	; (8002ac8 <main+0x224>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029b6:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	940f      	str	r4, [sp, #60]	; 0x3c
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029ba:	f7fd ffd7 	bl	800096c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = HC05_Pin;
 80029be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(HC05_GPIO_PORT, &GPIO_InitStruct);
 80029c2:	a90d      	add	r1, sp, #52	; 0x34
 80029c4:	4840      	ldr	r0, [pc, #256]	; (8002ac8 <main+0x224>)
	GPIO_InitStruct.Pin = HC05_Pin;
 80029c6:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c8:	970e      	str	r7, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80029cc:	9710      	str	r7, [sp, #64]	; 0x40
	HAL_GPIO_Init(HC05_GPIO_PORT, &GPIO_InitStruct);
 80029ce:	f7fd ffcd 	bl	800096c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin
 80029d2:	f240 23ff 	movw	r3, #767	; 0x2ff
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029d6:	a90d      	add	r1, sp, #52	; 0x34
 80029d8:	483a      	ldr	r0, [pc, #232]	; (8002ac4 <main+0x220>)
	GPIO_InitStruct.Pin = A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin
 80029da:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029dc:	970e      	str	r7, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e0:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029e2:	f7fd ffc3 	bl	800096c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD2_Pin;
 80029e6:	2320      	movs	r3, #32
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80029e8:	a90d      	add	r1, sp, #52	; 0x34
 80029ea:	483c      	ldr	r0, [pc, #240]	; (8002adc <main+0x238>)
	GPIO_InitStruct.Pin = LD2_Pin;
 80029ec:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ee:	970e      	str	r7, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f2:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80029f4:	f7fd ffba 	bl	800096c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = A1_Pin | B1_Pin | C1_Pin | D1_Pin | BlueB_Pin | E1_Pin
 80029f8:	f242 037f 	movw	r3, #8319	; 0x207f
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fc:	a90d      	add	r1, sp, #52	; 0x34
 80029fe:	4832      	ldr	r0, [pc, #200]	; (8002ac8 <main+0x224>)
	GPIO_InitStruct.Pin = A1_Pin | B1_Pin | C1_Pin | D1_Pin | BlueB_Pin | E1_Pin
 8002a00:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a02:	970e      	str	r7, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a06:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a08:	f7fd ffb0 	bl	800096c <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE()
 8002a0c:	9401      	str	r4, [sp, #4]
 8002a0e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002a10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a14:	632b      	str	r3, [r5, #48]	; 0x30
 8002a16:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	huart2.Instance = USART2;
 8002a18:	4d32      	ldr	r5, [pc, #200]	; (8002ae4 <main+0x240>)
	__HAL_RCC_DMA1_CLK_ENABLE()
 8002a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002a1e:	2105      	movs	r1, #5
 8002a20:	4622      	mov	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE()
 8002a22:	9301      	str	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002a24:	2010      	movs	r0, #16
	__HAL_RCC_DMA1_CLK_ENABLE()
 8002a26:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002a28:	f7fd fdfe 	bl	8000628 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002a2c:	2010      	movs	r0, #16
 8002a2e:	f7fd fe2f 	bl	8000690 <HAL_NVIC_EnableIRQ>
	htim7.Init.Prescaler = 179;
 8002a32:	4a2d      	ldr	r2, [pc, #180]	; (8002ae8 <main+0x244>)
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a34:	60b4      	str	r4, [r6, #8]
	htim7.Init.Prescaler = 179;
 8002a36:	23b3      	movs	r3, #179	; 0xb3
 8002a38:	e886 000c 	stmia.w	r6, {r2, r3}
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8002a3c:	4630      	mov	r0, r6
	htim7.Init.Period = 89;
 8002a3e:	2359      	movs	r3, #89	; 0x59
 8002a40:	60f3      	str	r3, [r6, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a42:	61b4      	str	r4, [r6, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002a44:	940d      	str	r4, [sp, #52]	; 0x34
 8002a46:	940e      	str	r4, [sp, #56]	; 0x38
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8002a48:	f7fe fc8e 	bl	8001368 <HAL_TIM_Base_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 8002a4c:	a90d      	add	r1, sp, #52	; 0x34
 8002a4e:	4630      	mov	r0, r6
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a50:	940d      	str	r4, [sp, #52]	; 0x34
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a52:	940e      	str	r4, [sp, #56]	; 0x38
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 8002a54:	f7fe fca2 	bl	800139c <HAL_TIMEx_MasterConfigSynchronization>
	huart2.Init.BaudRate = 9600;
 8002a58:	4924      	ldr	r1, [pc, #144]	; (8002aec <main+0x248>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a5a:	60ac      	str	r4, [r5, #8]
	huart2.Init.BaudRate = 9600;
 8002a5c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002a60:	e885 000a 	stmia.w	r5, {r1, r3}
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002a64:	4628      	mov	r0, r5
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002a66:	230c      	movs	r3, #12
 8002a68:	616b      	str	r3, [r5, #20]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002a6a:	60ec      	str	r4, [r5, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002a6c:	612c      	str	r4, [r5, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a6e:	61ac      	str	r4, [r5, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a70:	61ec      	str	r4, [r5, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002a72:	f7fe fddb 	bl	800162c <HAL_UART_Init>
	HAL_TIM_Base_Start_IT(&htim7);
 8002a76:	4630      	mov	r0, r6
 8002a78:	f7fe fb5a 	bl	8001130 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart2,(uint8_t*)str1,1);
 8002a7c:	4628      	mov	r0, r5
	osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8002a7e:	4d1c      	ldr	r5, [pc, #112]	; (8002af0 <main+0x24c>)
	HAL_UART_Receive_IT(&huart2,(uint8_t*)str1,1);
 8002a80:	491c      	ldr	r1, [pc, #112]	; (8002af4 <main+0x250>)
 8002a82:	463a      	mov	r2, r7
 8002a84:	f7fe fe1f 	bl	80016c6 <HAL_UART_Receive_IT>
	osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8002a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a8a:	ae06      	add	r6, sp, #24
 8002a8c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002a8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a92:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002a96:	4621      	mov	r1, r4
 8002a98:	a806      	add	r0, sp, #24
 8002a9a:	f7fe ff2a 	bl	80018f2 <osThreadCreate>
 8002a9e:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <main+0x254>)
	osThreadDef(ds18b20_task, Start_ds18b20_task, osPriorityNormal, 0, 128);
 8002aa0:	350c      	adds	r5, #12
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002aa2:	6018      	str	r0, [r3, #0]
	osThreadDef(ds18b20_task, Start_ds18b20_task, osPriorityNormal, 0, 128);
 8002aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002aa6:	ae0d      	add	r6, sp, #52	; 0x34
 8002aa8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002aaa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002aae:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	ds18b20_taskHandle = osThreadCreate(osThread(ds18b20_task), NULL);
 8002ab2:	4621      	mov	r1, r4
 8002ab4:	a80d      	add	r0, sp, #52	; 0x34
 8002ab6:	f7fe ff1c 	bl	80018f2 <osThreadCreate>
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <main+0x258>)
 8002abc:	6018      	str	r0, [r3, #0]
	osKernelStart();
 8002abe:	f7fe ff13 	bl	80018e8 <osKernelStart>
 8002ac2:	e7fe      	b.n	8002ac2 <main+0x21e>
 8002ac4:	40020800 	.word	0x40020800
 8002ac8:	40020400 	.word	0x40020400
 8002acc:	20004140 	.word	0x20004140
 8002ad0:	2000411c 	.word	0x2000411c
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	200041c4 	.word	0x200041c4
 8002adc:	40020000 	.word	0x40020000
 8002ae0:	10210000 	.word	0x10210000
 8002ae4:	2000417c 	.word	0x2000417c
 8002ae8:	40001400 	.word	0x40001400
 8002aec:	40004400 	.word	0x40004400
 8002af0:	08003f94 	.word	0x08003f94
 8002af4:	20004031 	.word	0x20004031
 8002af8:	200040b8 	.word	0x200040b8
 8002afc:	20004154 	.word	0x20004154

08002b00 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002b00:	b508      	push	{r3, lr}
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 8002b02:	6802      	ldr	r2, [r0, #0]
 8002b04:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d110      	bne.n	8002b2c <HAL_TIM_PeriodElapsedCallback+0x2c>
		HAL_IncTick();
 8002b0a:	f000 f969 	bl	8002de0 <HAL_IncTick>
		uint8_t dupa = 6;
		sprintf(str1, "test %d \r\n", dupa);
 8002b0e:	2206      	movs	r2, #6
 8002b10:	4908      	ldr	r1, [pc, #32]	; (8002b34 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002b12:	4809      	ldr	r0, [pc, #36]	; (8002b38 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002b14:	f000 fedc 	bl	80038d0 <siprintf>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)str1, strlen(str1));
 8002b18:	4807      	ldr	r0, [pc, #28]	; (8002b38 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002b1a:	f7fd fb79 	bl	8000210 <strlen>
 8002b1e:	4906      	ldr	r1, [pc, #24]	; (8002b38 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002b20:	b282      	uxth	r2, r0
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002b22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)str1, strlen(str1));
 8002b26:	4805      	ldr	r0, [pc, #20]	; (8002b3c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002b28:	f7fe bdae 	b.w	8001688 <HAL_UART_Transmit_IT>
 8002b2c:	bd08      	pop	{r3, pc}
 8002b2e:	bf00      	nop
 8002b30:	40001400 	.word	0x40001400
 8002b34:	08003fd9 	.word	0x08003fd9
 8002b38:	20004031 	.word	0x20004031
 8002b3c:	2000417c 	.word	0x2000417c

08002b40 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002b40:	4770      	bx	lr
	...

08002b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b44:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b46:	4b0f      	ldr	r3, [pc, #60]	; (8002b84 <HAL_MspInit+0x40>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	9200      	str	r2, [sp, #0]
 8002b4c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002b4e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002b52:	6459      	str	r1, [r3, #68]	; 0x44
 8002b54:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002b56:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8002b5a:	9100      	str	r1, [sp, #0]
 8002b5c:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b5e:	9201      	str	r2, [sp, #4]
 8002b60:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002b62:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002b66:	6419      	str	r1, [r3, #64]	; 0x40
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b70:	210f      	movs	r1, #15
 8002b72:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b76:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b78:	f7fd fd56 	bl	8000628 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b7c:	b003      	add	sp, #12
 8002b7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b82:	bf00      	nop
 8002b84:	40023800 	.word	0x40023800

08002b88 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM7)
 8002b88:	6802      	ldr	r2, [r0, #0]
 8002b8a:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <HAL_TIM_Base_MspInit+0x28>)
 8002b8c:	429a      	cmp	r2, r3
{
 8002b8e:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM7)
 8002b90:	d10b      	bne.n	8002baa <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002b92:	2300      	movs	r3, #0
 8002b94:	9301      	str	r3, [sp, #4]
 8002b96:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <HAL_TIM_Base_MspInit+0x2c>)
 8002b98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b9a:	f042 0220 	orr.w	r2, r2, #32
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f003 0320 	and.w	r3, r3, #32
 8002ba6:	9301      	str	r3, [sp, #4]
 8002ba8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002baa:	b002      	add	sp, #8
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40001400 	.word	0x40001400
 8002bb4:	40023800 	.word	0x40023800

08002bb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bb8:	b570      	push	{r4, r5, r6, lr}
 8002bba:	4606      	mov	r6, r0
 8002bbc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bbe:	2214      	movs	r2, #20
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	a803      	add	r0, sp, #12
 8002bc4:	f000 fdbf 	bl	8003746 <memset>
  if(huart->Instance==USART2)
 8002bc8:	6832      	ldr	r2, [r6, #0]
 8002bca:	4b26      	ldr	r3, [pc, #152]	; (8002c64 <HAL_UART_MspInit+0xac>)
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d146      	bne.n	8002c5e <HAL_UART_MspInit+0xa6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bd0:	2500      	movs	r5, #0
 8002bd2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002bd6:	9501      	str	r5, [sp, #4]
 8002bd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bda:	4823      	ldr	r0, [pc, #140]	; (8002c68 <HAL_UART_MspInit+0xb0>)

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002bdc:	4c23      	ldr	r4, [pc, #140]	; (8002c6c <HAL_UART_MspInit+0xb4>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bde:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40
 8002be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002be6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002bea:	9201      	str	r2, [sp, #4]
 8002bec:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bee:	9502      	str	r5, [sp, #8]
 8002bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	631a      	str	r2, [r3, #48]	; 0x30
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	9302      	str	r3, [sp, #8]
 8002c00:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c02:	230c      	movs	r3, #12
 8002c04:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c06:	2302      	movs	r3, #2
 8002c08:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c12:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c14:	2307      	movs	r3, #7
 8002c16:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c18:	f7fd fea8 	bl	800096c <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002c1c:	4a14      	ldr	r2, [pc, #80]	; (8002c70 <HAL_UART_MspInit+0xb8>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c1e:	60a5      	str	r5, [r4, #8]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002c20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002c24:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c2c:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002c2e:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002c30:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c34:	60e5      	str	r5, [r4, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c36:	6165      	str	r5, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c38:	61a5      	str	r5, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002c3a:	61e3      	str	r3, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c3c:	6225      	str	r5, [r4, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c3e:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002c40:	f7fd fd4a 	bl	80006d8 <HAL_DMA_Init>
 8002c44:	b108      	cbz	r0, 8002c4a <HAL_UART_MspInit+0x92>
    {
      Error_Handler();
 8002c46:	f7ff ff7b 	bl	8002b40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002c4a:	6374      	str	r4, [r6, #52]	; 0x34

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002c4c:	2026      	movs	r0, #38	; 0x26
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2105      	movs	r1, #5
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002c52:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002c54:	f7fd fce8 	bl	8000628 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c58:	2026      	movs	r0, #38	; 0x26
 8002c5a:	f7fd fd19 	bl	8000690 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c5e:	b008      	add	sp, #32
 8002c60:	bd70      	pop	{r4, r5, r6, pc}
 8002c62:	bf00      	nop
 8002c64:	40004400 	.word	0x40004400
 8002c68:	40020000 	.word	0x40020000
 8002c6c:	200040bc 	.word	0x200040bc
 8002c70:	40026088 	.word	0x40026088

08002c74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c74:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002c76:	4601      	mov	r1, r0
{
 8002c78:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2036      	movs	r0, #54	; 0x36
 8002c7e:	f7fd fcd3 	bl	8000628 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8002c82:	2036      	movs	r0, #54	; 0x36
 8002c84:	f7fd fd04 	bl	8000690 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002c88:	2500      	movs	r5, #0
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <HAL_InitTick+0x6c>)
 8002c8c:	9502      	str	r5, [sp, #8]
 8002c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002c90:	4c14      	ldr	r4, [pc, #80]	; (8002ce4 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002c92:	f042 0210 	orr.w	r2, r2, #16
 8002c96:	641a      	str	r2, [r3, #64]	; 0x40
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ca0:	a901      	add	r1, sp, #4
 8002ca2:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002ca4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ca6:	f7fe f843 	bl	8000d30 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002caa:	f7fe f821 	bl	8000cf0 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8002cae:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <HAL_InitTick+0x74>)
 8002cb0:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002cb2:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002cb6:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002cb8:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002cba:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <HAL_InitTick+0x78>)
 8002cbc:	fbb0 f0f3 	udiv	r0, r0, r3
 8002cc0:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8002cc2:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002cc4:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8002cc6:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cc8:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002cca:	f7fe fb4d 	bl	8001368 <HAL_TIM_Base_Init>
 8002cce:	b920      	cbnz	r0, 8002cda <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	f7fe fa2d 	bl	8001130 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002cd6:	b009      	add	sp, #36	; 0x24
 8002cd8:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8002cda:	2001      	movs	r0, #1
 8002cdc:	e7fb      	b.n	8002cd6 <HAL_InitTick+0x62>
 8002cde:	bf00      	nop
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	2000420c 	.word	0x2000420c
 8002ce8:	40001000 	.word	0x40001000
 8002cec:	000f4240 	.word	0x000f4240

08002cf0 <NMI_Handler>:
 8002cf0:	4770      	bx	lr

08002cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cf2:	e7fe      	b.n	8002cf2 <HardFault_Handler>

08002cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cf4:	e7fe      	b.n	8002cf4 <MemManage_Handler>

08002cf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cf6:	e7fe      	b.n	8002cf6 <BusFault_Handler>

08002cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cf8:	e7fe      	b.n	8002cf8 <UsageFault_Handler>

08002cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cfa:	4770      	bx	lr

08002cfc <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002cfc:	4801      	ldr	r0, [pc, #4]	; (8002d04 <DMA1_Stream5_IRQHandler+0x8>)
 8002cfe:	f7fd bd7b 	b.w	80007f8 <HAL_DMA_IRQHandler>
 8002d02:	bf00      	nop
 8002d04:	200040bc 	.word	0x200040bc

08002d08 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002d08:	4801      	ldr	r0, [pc, #4]	; (8002d10 <USART2_IRQHandler+0x8>)
 8002d0a:	f7fe bd45 	b.w	8001798 <HAL_UART_IRQHandler>
 8002d0e:	bf00      	nop
 8002d10:	2000417c 	.word	0x2000417c

08002d14 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d14:	4801      	ldr	r0, [pc, #4]	; (8002d1c <TIM6_DAC_IRQHandler+0x8>)
 8002d16:	f7fe ba1f 	b.w	8001158 <HAL_TIM_IRQHandler>
 8002d1a:	bf00      	nop
 8002d1c:	2000420c 	.word	0x2000420c

08002d20 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002d20:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002d22:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <_sbrk+0x2c>)
 8002d24:	6819      	ldr	r1, [r3, #0]
{
 8002d26:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002d28:	b909      	cbnz	r1, 8002d2e <_sbrk+0xe>
		heap_end = &end;
 8002d2a:	4909      	ldr	r1, [pc, #36]	; (8002d50 <_sbrk+0x30>)
 8002d2c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8002d2e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002d30:	4669      	mov	r1, sp
 8002d32:	4402      	add	r2, r0
 8002d34:	428a      	cmp	r2, r1
 8002d36:	d906      	bls.n	8002d46 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002d38:	f000 fcd0 	bl	80036dc <__errno>
 8002d3c:	230c      	movs	r3, #12
 8002d3e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002d40:	f04f 30ff 	mov.w	r0, #4294967295
 8002d44:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8002d46:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002d48:	bd08      	pop	{r3, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20004070 	.word	0x20004070
 8002d50:	20004250 	.word	0x20004250

08002d54 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d54:	490f      	ldr	r1, [pc, #60]	; (8002d94 <SystemInit+0x40>)
 8002d56:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002d5a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002d62:	4b0d      	ldr	r3, [pc, #52]	; (8002d98 <SystemInit+0x44>)
 8002d64:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d66:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002d68:	f042 0201 	orr.w	r2, r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002d6e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002d76:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d7a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002d7c:	4a07      	ldr	r2, [pc, #28]	; (8002d9c <SystemInit+0x48>)
 8002d7e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d86:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002d88:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d8e:	608b      	str	r3, [r1, #8]
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	e000ed00 	.word	0xe000ed00
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	24003010 	.word	0x24003010

08002da0 <TM_DELAY_Init>:
uint32_t TM_DELAY_Init(void) {
#if !defined(STM32F0xx)
	uint32_t c;
	
    /* Enable TRC */
    CoreDebug->DEMCR &= ~0x01000000;
 8002da0:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <TM_DELAY_Init+0x34>)
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002da8:	60da      	str	r2, [r3, #12]
    CoreDebug->DEMCR |=  0x01000000;
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002db0:	60da      	str	r2, [r3, #12]
	
    /* Enable counter */
    DWT->CTRL &= ~0x00000001;
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <TM_DELAY_Init+0x38>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	f022 0201 	bic.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
    DWT->CTRL |=  0x00000001;
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	f042 0201 	orr.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
	
    /* Reset counter */
    DWT->CYCCNT = 0;
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	605a      	str	r2, [r3, #4]
	
	/* Check if DWT has started */
	c = DWT->CYCCNT;
 8002dc8:	685a      	ldr	r2, [r3, #4]
	
	/* 2 dummys */
	__ASM volatile ("NOP");
 8002dca:	bf00      	nop
	__ASM volatile ("NOP");
 8002dcc:	bf00      	nop
	
	/* Return difference, if result is zero, DWT has not started */
	return (DWT->CYCCNT - c);
 8002dce:	6858      	ldr	r0, [r3, #4]
#else
	/* Return OK */
	return 1;
#endif
}
 8002dd0:	1a80      	subs	r0, r0, r2
 8002dd2:	4770      	bx	lr
 8002dd4:	e000edf0 	.word	0xe000edf0
 8002dd8:	e0001000 	.word	0xe0001000

08002ddc <TM_DELAY_1msHandler>:
	/* Return pointer */
	return Timer;
}

/* 1ms function called when systick makes interrupt */
__weak void TM_DELAY_1msHandler(void) {
 8002ddc:	4770      	bx	lr
	...

08002de0 <HAL_IncTick>:
/* Called from Systick handler */
void HAL_IncTick(void) {
	uint8_t i;
	
	/* Increase system time */
	TM_Time++;
 8002de0:	4a18      	ldr	r2, [pc, #96]	; (8002e44 <HAL_IncTick+0x64>)
void HAL_IncTick(void) {
 8002de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TM_Time++;
 8002de4:	6813      	ldr	r3, [r2, #0]
 8002de6:	3301      	adds	r3, #1
 8002de8:	6013      	str	r3, [r2, #0]
	
	/* Decrease other system time */
	if (TM_Time2) {
 8002dea:	4b17      	ldr	r3, [pc, #92]	; (8002e48 <HAL_IncTick+0x68>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	b112      	cbz	r2, 8002df6 <HAL_IncTick+0x16>
		TM_Time2--;
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	3a01      	subs	r2, #1
 8002df4:	601a      	str	r2, [r3, #0]
	}
	
	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8002df6:	4e15      	ldr	r6, [pc, #84]	; (8002e4c <HAL_IncTick+0x6c>)
void HAL_IncTick(void) {
 8002df8:	2500      	movs	r5, #0
 8002dfa:	4637      	mov	r7, r6
	for (i = 0; i < CustomTimers.Count; i++) {
 8002dfc:	7833      	ldrb	r3, [r6, #0]
 8002dfe:	b2ec      	uxtb	r4, r5
 8002e00:	42a3      	cmp	r3, r4
 8002e02:	d802      	bhi.n	8002e0a <HAL_IncTick+0x2a>
			}
		}
	}
	
	/* Call 1ms interrupt handler function */
	TM_DELAY_1msHandler();
 8002e04:	f7ff ffea 	bl	8002ddc <TM_DELAY_1msHandler>
 8002e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8002e0a:	00a4      	lsls	r4, r4, #2
 8002e0c:	1933      	adds	r3, r6, r4
 8002e0e:	6858      	ldr	r0, [r3, #4]
		if (
 8002e10:	b1b0      	cbz	r0, 8002e40 <HAL_IncTick+0x60>
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8002e12:	7803      	ldrb	r3, [r0, #0]
 8002e14:	079b      	lsls	r3, r3, #30
 8002e16:	d513      	bpl.n	8002e40 <HAL_IncTick+0x60>
			if (CustomTimers.Timers[i]->CNT) {
 8002e18:	6883      	ldr	r3, [r0, #8]
 8002e1a:	b10b      	cbz	r3, 8002e20 <HAL_IncTick+0x40>
				CustomTimers.Timers[i]->CNT--;
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	6083      	str	r3, [r0, #8]
			if (CustomTimers.Timers[i]->CNT == 0) {
 8002e20:	6883      	ldr	r3, [r0, #8]
 8002e22:	b96b      	cbnz	r3, 8002e40 <HAL_IncTick+0x60>
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8002e24:	443c      	add	r4, r7
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i], CustomTimers.Timers[i]->UserParameters);
 8002e26:	68c3      	ldr	r3, [r0, #12]
 8002e28:	6901      	ldr	r1, [r0, #16]
 8002e2a:	4798      	blx	r3
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8002e2c:	6862      	ldr	r2, [r4, #4]
 8002e2e:	6853      	ldr	r3, [r2, #4]
 8002e30:	6093      	str	r3, [r2, #8]
				if (!CustomTimers.Timers[i]->Flags.F.AREN) {
 8002e32:	7813      	ldrb	r3, [r2, #0]
 8002e34:	f013 0101 	ands.w	r1, r3, #1
					CustomTimers.Timers[i]->Flags.F.CNTEN = 0;
 8002e38:	bf04      	itt	eq
 8002e3a:	f361 0341 	bfieq	r3, r1, #1, #1
 8002e3e:	7013      	strbeq	r3, [r2, #0]
 8002e40:	3501      	adds	r5, #1
 8002e42:	e7db      	b.n	8002dfc <HAL_IncTick+0x1c>
 8002e44:	2000408c 	.word	0x2000408c
 8002e48:	20004090 	.word	0x20004090
 8002e4c:	20004074 	.word	0x20004074

08002e50 <HAL_GetTick>:
	}
}

uint32_t HAL_GetTick(void) {
	/* Return current time in milliseconds */
	return TM_Time;
 8002e50:	4b01      	ldr	r3, [pc, #4]	; (8002e58 <HAL_GetTick+0x8>)
 8002e52:	6818      	ldr	r0, [r3, #0]
}
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	2000408c 	.word	0x2000408c

08002e5c <TM_DS18B20_Start>:
 * | OTHER DEALINGS IN THE SOFTWARE.
 * |----------------------------------------------------------------------
 */
#include "tm_stm32_ds18b20.h"

uint8_t TM_DS18B20_Start(TM_OneWire_t* OneWire, uint8_t *ROM) {
 8002e5c:	b538      	push	{r3, r4, r5, lr}
	return 1;
}

uint8_t TM_DS18B20_Is(uint8_t *ROM) {
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002e5e:	780b      	ldrb	r3, [r1, #0]
 8002e60:	2b28      	cmp	r3, #40	; 0x28
uint8_t TM_DS18B20_Start(TM_OneWire_t* OneWire, uint8_t *ROM) {
 8002e62:	4604      	mov	r4, r0
 8002e64:	460d      	mov	r5, r1
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002e66:	d001      	beq.n	8002e6c <TM_DS18B20_Start+0x10>
		return 0;
 8002e68:	2000      	movs	r0, #0
 8002e6a:	bd38      	pop	{r3, r4, r5, pc}
	TM_OneWire_Reset(OneWire);
 8002e6c:	f000 fa8e 	bl	800338c <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002e70:	4629      	mov	r1, r5
 8002e72:	4620      	mov	r0, r4
 8002e74:	f000 fb81 	bl	800357a <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8002e78:	4620      	mov	r0, r4
 8002e7a:	2144      	movs	r1, #68	; 0x44
 8002e7c:	f000 faea 	bl	8003454 <TM_OneWire_WriteByte>
	return 1;
 8002e80:	2001      	movs	r0, #1
}
 8002e82:	bd38      	pop	{r3, r4, r5, pc}

08002e84 <TM_DS18B20_StartAll>:
void TM_DS18B20_StartAll(TM_OneWire_t* OneWire) {
 8002e84:	b510      	push	{r4, lr}
 8002e86:	4604      	mov	r4, r0
	TM_OneWire_Reset(OneWire);
 8002e88:	f000 fa80 	bl	800338c <TM_OneWire_Reset>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	21cc      	movs	r1, #204	; 0xcc
 8002e90:	f000 fae0 	bl	8003454 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8002e94:	4620      	mov	r0, r4
 8002e96:	2144      	movs	r1, #68	; 0x44
}
 8002e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8002e9c:	f000 bada 	b.w	8003454 <TM_OneWire_WriteByte>

08002ea0 <TM_DS18B20_Read>:
uint8_t TM_DS18B20_Read(TM_OneWire_t* OneWire, uint8_t *ROM, float *destination) {
 8002ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002ea2:	780b      	ldrb	r3, [r1, #0]
 8002ea4:	2b28      	cmp	r3, #40	; 0x28
uint8_t TM_DS18B20_Read(TM_OneWire_t* OneWire, uint8_t *ROM, float *destination) {
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	4607      	mov	r7, r0
 8002eaa:	460c      	mov	r4, r1
 8002eac:	4615      	mov	r5, r2
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002eae:	d010      	beq.n	8002ed2 <TM_DS18B20_Read+0x32>
		return 0;
 8002eb0:	2000      	movs	r0, #0
}
 8002eb2:	b005      	add	sp, #20
 8002eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			decimal = (temperature >> 1) & 0x07;
 8002eb6:	f3c4 0242 	ubfx	r2, r4, #1, #3
 8002eba:	ee07 2a90 	vmov	s15, r2
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8002ebe:	eefa 7aee 	vcvt.f32.s32	s15, s15, #3
		} break;
 8002ec2:	e05d      	b.n	8002f80 <TM_DS18B20_Read+0xe0>
			decimal = temperature & 0x0F;
 8002ec4:	f004 020f 	and.w	r2, r4, #15
 8002ec8:	ee07 2a90 	vmov	s15, r2
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8002ecc:	eefa 7ace 	vcvt.f32.s32	s15, s15, #4
		} break;
 8002ed0:	e056      	b.n	8002f80 <TM_DS18B20_Read+0xe0>
	if (!TM_OneWire_ReadBit(OneWire)) {
 8002ed2:	f000 faa1 	bl	8003418 <TM_OneWire_ReadBit>
 8002ed6:	2800      	cmp	r0, #0
 8002ed8:	d0ea      	beq.n	8002eb0 <TM_DS18B20_Read+0x10>
	TM_OneWire_Reset(OneWire);
 8002eda:	4638      	mov	r0, r7
 8002edc:	f000 fa56 	bl	800338c <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002ee0:	4621      	mov	r1, r4
 8002ee2:	4638      	mov	r0, r7
 8002ee4:	f000 fb49 	bl	800357a <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002ee8:	21be      	movs	r1, #190	; 0xbe
 8002eea:	4638      	mov	r0, r7
 8002eec:	f000 fab2 	bl	8003454 <TM_OneWire_WriteByte>
 8002ef0:	2400      	movs	r4, #0
		data[i] = TM_OneWire_ReadByte(OneWire);
 8002ef2:	ae01      	add	r6, sp, #4
 8002ef4:	4638      	mov	r0, r7
 8002ef6:	f000 fabd 	bl	8003474 <TM_OneWire_ReadByte>
 8002efa:	5530      	strb	r0, [r6, r4]
 8002efc:	3401      	adds	r4, #1
	for (i = 0; i < 9; i++) {
 8002efe:	2c09      	cmp	r4, #9
 8002f00:	d1f8      	bne.n	8002ef4 <TM_DS18B20_Read+0x54>
	crc = TM_OneWire_CRC8(data, 8);
 8002f02:	2108      	movs	r1, #8
 8002f04:	4630      	mov	r0, r6
 8002f06:	f000 fb53 	bl	80035b0 <TM_OneWire_CRC8>
	if (crc != data[8]) {
 8002f0a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002f0e:	4283      	cmp	r3, r0
 8002f10:	d1ce      	bne.n	8002eb0 <TM_DS18B20_Read+0x10>
	temperature = data[0] | (data[1] << 8);
 8002f12:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002f16:	f89d 6004 	ldrb.w	r6, [sp, #4]
 8002f1a:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 8002f1e:	b236      	sxth	r6, r6
	TM_OneWire_Reset(OneWire);
 8002f20:	4638      	mov	r0, r7
 8002f22:	f000 fa33 	bl	800338c <TM_OneWire_Reset>
	temperature = data[0] | (data[1] << 8);
 8002f26:	b2b4      	uxth	r4, r6
	if (temperature & 0x8000) {
 8002f28:	2e00      	cmp	r6, #0
		temperature = ~temperature + 1;
 8002f2a:	bfbc      	itt	lt
 8002f2c:	4264      	neglt	r4, r4
 8002f2e:	b2a4      	uxthlt	r4, r4
	digit |= ((temperature >> 8) & 0x7) << 4;
 8002f30:	ea4f 1314 	mov.w	r3, r4, lsr #4
 8002f34:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f38:	f344 1307 	sbfx	r3, r4, #4, #8
 8002f3c:	ea43 0302 	orr.w	r3, r3, r2
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8002f40:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8002f44:	f3c2 1241 	ubfx	r2, r2, #5, #2
	switch (resolution) {
 8002f48:	f102 0209 	add.w	r2, r2, #9
		minus = 1;
 8002f4c:	bfb4      	ite	lt
 8002f4e:	2101      	movlt	r1, #1
	int8_t digit, minus = 0;
 8002f50:	2100      	movge	r1, #0
	switch (resolution) {
 8002f52:	2a0b      	cmp	r2, #11
 8002f54:	d0af      	beq.n	8002eb6 <TM_DS18B20_Read+0x16>
 8002f56:	2a0c      	cmp	r2, #12
 8002f58:	d0b4      	beq.n	8002ec4 <TM_DS18B20_Read+0x24>
 8002f5a:	2a0a      	cmp	r2, #10
			decimal = (temperature >> 3) & 0x01;
 8002f5c:	bf1b      	ittet	ne
 8002f5e:	f3c4 02c0 	ubfxne	r2, r4, #3, #1
 8002f62:	ee07 2a90 	vmovne	s15, r2
			decimal = (temperature >> 2) & 0x03;
 8002f66:	f3c4 0281 	ubfxeq	r2, r4, #2, #2
			decimal = (temperature >> 3) & 0x01;
 8002f6a:	eef8 7ae7 	vcvtne.f32.s32	s15, s15
			decimal = (temperature >> 2) & 0x03;
 8002f6e:	bf0d      	iteet	eq
 8002f70:	ee07 2a90 	vmoveq	s15, r2
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8002f74:	eeb6 7a00 	vmovne.f32	s14, #96	; 0x3f000000  0.5
 8002f78:	ee67 7a87 	vmulne.f32	s15, s15, s14
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8002f7c:	eefa 7acf 	vcvteq.f32.s32	s15, s15, #2
	decimal = digit + decimal;
 8002f80:	ee07 3a10 	vmov	s14, r3
 8002f84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002f88:	ee77 7a27 	vadd.f32	s15, s14, s15
	if (minus) {
 8002f8c:	b119      	cbz	r1, 8002f96 <TM_DS18B20_Read+0xf6>
		decimal = 0 - decimal;
 8002f8e:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002fa0 <TM_DS18B20_Read+0x100>
 8002f92:	ee77 7a67 	vsub.f32	s15, s14, s15
	*destination = decimal;
 8002f96:	edc5 7a00 	vstr	s15, [r5]
	return 1;
 8002f9a:	2001      	movs	r0, #1
 8002f9c:	e789      	b.n	8002eb2 <TM_DS18B20_Read+0x12>
 8002f9e:	bf00      	nop
 8002fa0:	00000000 	.word	0x00000000

08002fa4 <TM_DS18B20_SetResolution>:
uint8_t TM_DS18B20_SetResolution(TM_OneWire_t* OneWire, uint8_t *ROM, TM_DS18B20_Resolution_t resolution) {
 8002fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002fa8:	780b      	ldrb	r3, [r1, #0]
 8002faa:	2b28      	cmp	r3, #40	; 0x28
uint8_t TM_DS18B20_SetResolution(TM_OneWire_t* OneWire, uint8_t *ROM, TM_DS18B20_Resolution_t resolution) {
 8002fac:	4604      	mov	r4, r0
 8002fae:	460e      	mov	r6, r1
 8002fb0:	4691      	mov	r9, r2
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002fb2:	d019      	beq.n	8002fe8 <TM_DS18B20_SetResolution+0x44>
		return 0;
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (resolution == TM_DS18B20_Resolution_10bits) {
 8002fba:	f1b9 0f0a 	cmp.w	r9, #10
 8002fbe:	d104      	bne.n	8002fca <TM_DS18B20_SetResolution+0x26>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002fc0:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002fc4:	f045 0520 	orr.w	r5, r5, #32
 8002fc8:	e02f      	b.n	800302a <TM_DS18B20_SetResolution+0x86>
	} else if (resolution == TM_DS18B20_Resolution_11bits) {
 8002fca:	f1b9 0f0b 	cmp.w	r9, #11
 8002fce:	d104      	bne.n	8002fda <TM_DS18B20_SetResolution+0x36>
 8002fd0:	f005 05df 	and.w	r5, r5, #223	; 0xdf
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002fd4:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8002fd8:	e027      	b.n	800302a <TM_DS18B20_SetResolution+0x86>
	} else if (resolution == TM_DS18B20_Resolution_12bits) {
 8002fda:	f1b9 0f0c 	cmp.w	r9, #12
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002fde:	bf04      	itt	eq
 8002fe0:	f045 0560 	orreq.w	r5, r5, #96	; 0x60
 8002fe4:	b2ed      	uxtbeq	r5, r5
 8002fe6:	e020      	b.n	800302a <TM_DS18B20_SetResolution+0x86>
	TM_OneWire_Reset(OneWire);
 8002fe8:	f000 f9d0 	bl	800338c <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002fec:	4631      	mov	r1, r6
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f000 fac3 	bl	800357a <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002ff4:	21be      	movs	r1, #190	; 0xbe
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	f000 fa2c 	bl	8003454 <TM_OneWire_WriteByte>
	TM_OneWire_ReadByte(OneWire);
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	f000 fa39 	bl	8003474 <TM_OneWire_ReadByte>
	TM_OneWire_ReadByte(OneWire);
 8003002:	4620      	mov	r0, r4
 8003004:	f000 fa36 	bl	8003474 <TM_OneWire_ReadByte>
	th = TM_OneWire_ReadByte(OneWire);
 8003008:	4620      	mov	r0, r4
 800300a:	f000 fa33 	bl	8003474 <TM_OneWire_ReadByte>
 800300e:	4607      	mov	r7, r0
	tl = TM_OneWire_ReadByte(OneWire);
 8003010:	4620      	mov	r0, r4
 8003012:	f000 fa2f 	bl	8003474 <TM_OneWire_ReadByte>
 8003016:	4680      	mov	r8, r0
	conf = TM_OneWire_ReadByte(OneWire);
 8003018:	4620      	mov	r0, r4
 800301a:	f000 fa2b 	bl	8003474 <TM_OneWire_ReadByte>
	if (resolution == TM_DS18B20_Resolution_9bits) {
 800301e:	f1b9 0f09 	cmp.w	r9, #9
	conf = TM_OneWire_ReadByte(OneWire);
 8003022:	4605      	mov	r5, r0
	if (resolution == TM_DS18B20_Resolution_9bits) {
 8003024:	d1c9      	bne.n	8002fba <TM_DS18B20_SetResolution+0x16>
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8003026:	f005 059f 	and.w	r5, r5, #159	; 0x9f
	TM_OneWire_Reset(OneWire);
 800302a:	4620      	mov	r0, r4
 800302c:	f000 f9ae 	bl	800338c <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8003030:	4631      	mov	r1, r6
 8003032:	4620      	mov	r0, r4
 8003034:	f000 faa1 	bl	800357a <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8003038:	4620      	mov	r0, r4
 800303a:	214e      	movs	r1, #78	; 0x4e
 800303c:	f000 fa0a 	bl	8003454 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, th);
 8003040:	4639      	mov	r1, r7
 8003042:	4620      	mov	r0, r4
 8003044:	f000 fa06 	bl	8003454 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, tl);
 8003048:	4641      	mov	r1, r8
 800304a:	4620      	mov	r0, r4
 800304c:	f000 fa02 	bl	8003454 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, conf);
 8003050:	4629      	mov	r1, r5
 8003052:	4620      	mov	r0, r4
 8003054:	f000 f9fe 	bl	8003454 <TM_OneWire_WriteByte>
	TM_OneWire_Reset(OneWire);
 8003058:	4620      	mov	r0, r4
 800305a:	f000 f997 	bl	800338c <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 800305e:	4631      	mov	r1, r6
 8003060:	4620      	mov	r0, r4
 8003062:	f000 fa8a 	bl	800357a <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8003066:	4620      	mov	r0, r4
 8003068:	2148      	movs	r1, #72	; 0x48
 800306a:	f000 f9f3 	bl	8003454 <TM_OneWire_WriteByte>
	return 1;
 800306e:	2001      	movs	r0, #1
 8003070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003074 <TM_DS18B20_Is>:
	if (*ROM == DS18B20_FAMILY_CODE) {
 8003074:	7800      	ldrb	r0, [r0, #0]
		return 1;
	}
	return 0;
}
 8003076:	f1a0 0328 	sub.w	r3, r0, #40	; 0x28
 800307a:	4258      	negs	r0, r3
 800307c:	4158      	adcs	r0, r3
 800307e:	4770      	bx	lr

08003080 <TM_DS18B20_SetAlarmLowTemperature>:

uint8_t TM_DS18B20_SetAlarmLowTemperature(TM_OneWire_t* OneWire, uint8_t *ROM, int8_t temp) {
 8003080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (*ROM == DS18B20_FAMILY_CODE) {
 8003084:	780b      	ldrb	r3, [r1, #0]
 8003086:	2b28      	cmp	r3, #40	; 0x28
uint8_t TM_DS18B20_SetAlarmLowTemperature(TM_OneWire_t* OneWire, uint8_t *ROM, int8_t temp) {
 8003088:	4604      	mov	r4, r0
 800308a:	460e      	mov	r6, r1
	if (*ROM == DS18B20_FAMILY_CODE) {
 800308c:	d002      	beq.n	8003094 <TM_DS18B20_SetAlarmLowTemperature+0x14>
	uint8_t tl, th, conf;
	if (!TM_DS18B20_Is(ROM)) {
		return 0;
 800308e:	2000      	movs	r0, #0
 8003090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003094:	f06f 0536 	mvn.w	r5, #54	; 0x36
 8003098:	4295      	cmp	r5, r2
 800309a:	bfb8      	it	lt
 800309c:	4615      	movlt	r5, r2
	} 
	if (temp < -55) {
		temp = -55;
	}
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 800309e:	f000 f975 	bl	800338c <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 80030a2:	4631      	mov	r1, r6
 80030a4:	4620      	mov	r0, r4
 80030a6:	f000 fa68 	bl	800357a <TM_OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 80030aa:	21be      	movs	r1, #190	; 0xbe
 80030ac:	4620      	mov	r0, r4
 80030ae:	f000 f9d1 	bl	8003454 <TM_OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	TM_OneWire_ReadByte(OneWire);
 80030b2:	4620      	mov	r0, r4
 80030b4:	f000 f9de 	bl	8003474 <TM_OneWire_ReadByte>
	TM_OneWire_ReadByte(OneWire);
 80030b8:	4620      	mov	r0, r4
 80030ba:	f000 f9db 	bl	8003474 <TM_OneWire_ReadByte>
	
	th = TM_OneWire_ReadByte(OneWire);
 80030be:	4620      	mov	r0, r4
 80030c0:	f000 f9d8 	bl	8003474 <TM_OneWire_ReadByte>
 80030c4:	4680      	mov	r8, r0
	tl = TM_OneWire_ReadByte(OneWire);
 80030c6:	4620      	mov	r0, r4
 80030c8:	f000 f9d4 	bl	8003474 <TM_OneWire_ReadByte>
	conf = TM_OneWire_ReadByte(OneWire);
 80030cc:	4620      	mov	r0, r4
 80030ce:	f000 f9d1 	bl	8003474 <TM_OneWire_ReadByte>
 80030d2:	4607      	mov	r7, r0
	
	tl = (uint8_t)temp; 

	/* Reset line */
	TM_OneWire_Reset(OneWire);
 80030d4:	4620      	mov	r0, r4
 80030d6:	f000 f959 	bl	800338c <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 80030da:	4631      	mov	r1, r6
 80030dc:	4620      	mov	r0, r4
 80030de:	f000 fa4c 	bl	800357a <TM_OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 80030e2:	4620      	mov	r0, r4
 80030e4:	214e      	movs	r1, #78	; 0x4e
 80030e6:	f000 f9b5 	bl	8003454 <TM_OneWire_WriteByte>
	
	/* Write bytes */
	TM_OneWire_WriteByte(OneWire, th);
 80030ea:	4641      	mov	r1, r8
 80030ec:	4620      	mov	r0, r4
 80030ee:	f000 f9b1 	bl	8003454 <TM_OneWire_WriteByte>
	tl = (uint8_t)temp; 
 80030f2:	2d7d      	cmp	r5, #125	; 0x7d
 80030f4:	bfa8      	it	ge
 80030f6:	257d      	movge	r5, #125	; 0x7d
	TM_OneWire_WriteByte(OneWire, tl);
 80030f8:	b2e9      	uxtb	r1, r5
 80030fa:	4620      	mov	r0, r4
 80030fc:	f000 f9aa 	bl	8003454 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, conf);
 8003100:	4639      	mov	r1, r7
 8003102:	4620      	mov	r0, r4
 8003104:	f000 f9a6 	bl	8003454 <TM_OneWire_WriteByte>
	
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8003108:	4620      	mov	r0, r4
 800310a:	f000 f93f 	bl	800338c <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 800310e:	4631      	mov	r1, r6
 8003110:	4620      	mov	r0, r4
 8003112:	f000 fa32 	bl	800357a <TM_OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8003116:	4620      	mov	r0, r4
 8003118:	2148      	movs	r1, #72	; 0x48
 800311a:	f000 f99b 	bl	8003454 <TM_OneWire_WriteByte>
	
	return 1;
 800311e:	2001      	movs	r0, #1
}
 8003120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003124 <TM_DS18B20_SetAlarmHighTemperature>:

uint8_t TM_DS18B20_SetAlarmHighTemperature(TM_OneWire_t* OneWire, uint8_t *ROM, int8_t temp) {
 8003124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (*ROM == DS18B20_FAMILY_CODE) {
 8003128:	780b      	ldrb	r3, [r1, #0]
 800312a:	2b28      	cmp	r3, #40	; 0x28
uint8_t TM_DS18B20_SetAlarmHighTemperature(TM_OneWire_t* OneWire, uint8_t *ROM, int8_t temp) {
 800312c:	4604      	mov	r4, r0
 800312e:	460e      	mov	r6, r1
	if (*ROM == DS18B20_FAMILY_CODE) {
 8003130:	d002      	beq.n	8003138 <TM_DS18B20_SetAlarmHighTemperature+0x14>
	uint8_t tl, th, conf;
	if (!TM_DS18B20_Is(ROM)) {
		return 0;
 8003132:	2000      	movs	r0, #0
 8003134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003138:	f06f 0536 	mvn.w	r5, #54	; 0x36
 800313c:	4295      	cmp	r5, r2
 800313e:	bfb8      	it	lt
 8003140:	4615      	movlt	r5, r2
	} 
	if (temp < -55) {
		temp = -55;
	}
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8003142:	f000 f923 	bl	800338c <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8003146:	4631      	mov	r1, r6
 8003148:	4620      	mov	r0, r4
 800314a:	f000 fa16 	bl	800357a <TM_OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 800314e:	21be      	movs	r1, #190	; 0xbe
 8003150:	4620      	mov	r0, r4
 8003152:	f000 f97f 	bl	8003454 <TM_OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	TM_OneWire_ReadByte(OneWire);
 8003156:	4620      	mov	r0, r4
 8003158:	f000 f98c 	bl	8003474 <TM_OneWire_ReadByte>
	TM_OneWire_ReadByte(OneWire);
 800315c:	4620      	mov	r0, r4
 800315e:	f000 f989 	bl	8003474 <TM_OneWire_ReadByte>
	
	th = TM_OneWire_ReadByte(OneWire);
 8003162:	4620      	mov	r0, r4
 8003164:	f000 f986 	bl	8003474 <TM_OneWire_ReadByte>
	tl = TM_OneWire_ReadByte(OneWire);
 8003168:	4620      	mov	r0, r4
 800316a:	f000 f983 	bl	8003474 <TM_OneWire_ReadByte>
 800316e:	4680      	mov	r8, r0
	conf = TM_OneWire_ReadByte(OneWire);
 8003170:	4620      	mov	r0, r4
 8003172:	f000 f97f 	bl	8003474 <TM_OneWire_ReadByte>
 8003176:	4607      	mov	r7, r0
	
	th = (uint8_t)temp; 

	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8003178:	4620      	mov	r0, r4
 800317a:	f000 f907 	bl	800338c <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 800317e:	4631      	mov	r1, r6
 8003180:	4620      	mov	r0, r4
 8003182:	f000 f9fa 	bl	800357a <TM_OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8003186:	4620      	mov	r0, r4
 8003188:	214e      	movs	r1, #78	; 0x4e
 800318a:	f000 f963 	bl	8003454 <TM_OneWire_WriteByte>
	th = (uint8_t)temp; 
 800318e:	2d7d      	cmp	r5, #125	; 0x7d
 8003190:	bfa8      	it	ge
 8003192:	257d      	movge	r5, #125	; 0x7d
	
	/* Write bytes */
	TM_OneWire_WriteByte(OneWire, th);
 8003194:	b2e9      	uxtb	r1, r5
 8003196:	4620      	mov	r0, r4
 8003198:	f000 f95c 	bl	8003454 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, tl);
 800319c:	4641      	mov	r1, r8
 800319e:	4620      	mov	r0, r4
 80031a0:	f000 f958 	bl	8003454 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, conf);
 80031a4:	4639      	mov	r1, r7
 80031a6:	4620      	mov	r0, r4
 80031a8:	f000 f954 	bl	8003454 <TM_OneWire_WriteByte>
	
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 80031ac:	4620      	mov	r0, r4
 80031ae:	f000 f8ed 	bl	800338c <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 80031b2:	4631      	mov	r1, r6
 80031b4:	4620      	mov	r0, r4
 80031b6:	f000 f9e0 	bl	800357a <TM_OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 80031ba:	4620      	mov	r0, r4
 80031bc:	2148      	movs	r1, #72	; 0x48
 80031be:	f000 f949 	bl	8003454 <TM_OneWire_WriteByte>
	
	return 1;
 80031c2:	2001      	movs	r0, #1
}
 80031c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080031c8 <TM_DS18B20_AllDone>:
	return TM_OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t TM_DS18B20_AllDone(TM_OneWire_t* OneWire) {
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return TM_OneWire_ReadBit(OneWire);
 80031c8:	f000 b926 	b.w	8003418 <TM_OneWire_ReadBit>

080031cc <TM_GPIO_SetPinAsInput>:
			GPIO_UsedPins[ptr] &= ~(1 << i);
		}
	}
}

void TM_GPIO_SetPinAsInput(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80031cc:	b530      	push	{r4, r5, lr}
 80031ce:	2300      	movs	r3, #0
	/* Go through all pins */
	for (i = 0x00; i < 0x10; i++) {
		/* Pin is set */
		if (GPIO_Pin & (1 << i)) {
			/* Set 00 bits combination for input */
			GPIOx->MODER &= ~(0x03 << (2 * i));
 80031d0:	2503      	movs	r5, #3
		if (GPIO_Pin & (1 << i)) {
 80031d2:	fa41 f203 	asr.w	r2, r1, r3
 80031d6:	07d2      	lsls	r2, r2, #31
 80031d8:	d506      	bpl.n	80031e8 <TM_GPIO_SetPinAsInput+0x1c>
			GPIOx->MODER &= ~(0x03 << (2 * i));
 80031da:	6802      	ldr	r2, [r0, #0]
 80031dc:	005c      	lsls	r4, r3, #1
 80031de:	fa05 f404 	lsl.w	r4, r5, r4
 80031e2:	ea22 0204 	bic.w	r2, r2, r4
 80031e6:	6002      	str	r2, [r0, #0]
 80031e8:	3301      	adds	r3, #1
	for (i = 0x00; i < 0x10; i++) {
 80031ea:	2b10      	cmp	r3, #16
 80031ec:	d1f1      	bne.n	80031d2 <TM_GPIO_SetPinAsInput+0x6>
		}
	}
}
 80031ee:	bd30      	pop	{r4, r5, pc}

080031f0 <TM_GPIO_SetPinAsOutput>:

void TM_GPIO_SetPinAsOutput(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80031f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031f2:	2300      	movs	r3, #0
	/* Go through all pins */
	for (i = 0x00; i < 0x10; i++) {
		/* Pin is set */
		if (GPIO_Pin & (1 << i)) {
			/* Set 01 bits combination for output */
			GPIOx->MODER = (GPIOx->MODER & ~(0x03 << (2 * i))) | (0x01 << (2 * i));
 80031f4:	2503      	movs	r5, #3
 80031f6:	2601      	movs	r6, #1
		if (GPIO_Pin & (1 << i)) {
 80031f8:	fa41 f203 	asr.w	r2, r1, r3
 80031fc:	07d2      	lsls	r2, r2, #31
 80031fe:	d509      	bpl.n	8003214 <TM_GPIO_SetPinAsOutput+0x24>
			GPIOx->MODER = (GPIOx->MODER & ~(0x03 << (2 * i))) | (0x01 << (2 * i));
 8003200:	6802      	ldr	r2, [r0, #0]
 8003202:	005c      	lsls	r4, r3, #1
 8003204:	fa05 f704 	lsl.w	r7, r5, r4
 8003208:	ea22 0207 	bic.w	r2, r2, r7
 800320c:	fa06 f404 	lsl.w	r4, r6, r4
 8003210:	4322      	orrs	r2, r4
 8003212:	6002      	str	r2, [r0, #0]
 8003214:	3301      	adds	r3, #1
	for (i = 0x00; i < 0x10; i++) {
 8003216:	2b10      	cmp	r3, #16
 8003218:	d1ee      	bne.n	80031f8 <TM_GPIO_SetPinAsOutput+0x8>
		}
	}
}
 800321a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800321c <TM_GPIO_INT_EnableClock>:
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
	/* Set bit according to the 1 << portsourcenumber */
#if defined(STM32F0xx)
	RCC->AHBENR |= (1 << (TM_GPIO_GetPortSource(GPIOx) + 17));
#else
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 800321c:	4a06      	ldr	r2, [pc, #24]	; (8003238 <TM_GPIO_INT_EnableClock+0x1c>)
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 800321e:	f100 403f 	add.w	r0, r0, #3204448256	; 0xbf000000
 8003222:	f500 007e 	add.w	r0, r0, #16646144	; 0xfe0000
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8003226:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003228:	f3c0 238f 	ubfx	r3, r0, #10, #16
 800322c:	2001      	movs	r0, #1
 800322e:	4098      	lsls	r0, r3
 8003230:	4308      	orrs	r0, r1
 8003232:	6310      	str	r0, [r2, #48]	; 0x30
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800

0800323c <TM_GPIO_INT_Init>:
#else
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
#endif
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 800323c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003240:	b085      	sub	sp, #20
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8003242:	f100 453f 	add.w	r5, r0, #3204448256	; 0xbf000000
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8003246:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
 800324a:	9402      	str	r4, [sp, #8]
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 800324c:	f505 057e 	add.w	r5, r5, #16646144	; 0xfe0000
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8003250:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8003254:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80032fc <TM_GPIO_INT_Init+0xc0>
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8003258:	9403      	str	r4, [sp, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 800325a:	f102 3cff 	add.w	ip, r2, #4294967295
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 800325e:	9301      	str	r3, [sp, #4]
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8003260:	2400      	movs	r4, #0
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8003262:	f3c5 2587 	ubfx	r5, r5, #10, #8
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8003266:	f04f 0a03 	mov.w	sl, #3
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 800326a:	fa5f fc8c 	uxtb.w	ip, ip
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 800326e:	fa41 f604 	asr.w	r6, r1, r4
 8003272:	07f3      	lsls	r3, r6, #31
 8003274:	d53b      	bpl.n	80032ee <TM_GPIO_INT_Init+0xb2>
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8003276:	2301      	movs	r3, #1
 8003278:	f838 6015 	ldrh.w	r6, [r8, r5, lsl #1]
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 800327c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8003280:	fa03 f904 	lsl.w	r9, r3, r4
 8003284:	ea49 0606 	orr.w	r6, r9, r6
 8003288:	f828 6015 	strh.w	r6, [r8, r5, lsl #1]
 800328c:	fa04 f603 	lsl.w	r6, r4, r3
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8003290:	fa0a f706 	lsl.w	r7, sl, r6
 8003294:	9b02      	ldr	r3, [sp, #8]
 8003296:	43ff      	mvns	r7, r7
 8003298:	fa03 fb06 	lsl.w	fp, r3, r6
 800329c:	ea07 0e0e 	and.w	lr, r7, lr
 80032a0:	ea4e 0e0b 	orr.w	lr, lr, fp
 80032a4:	f8c0 e00c 	str.w	lr, [r0, #12]
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 80032a8:	f8d0 e000 	ldr.w	lr, [r0]
 80032ac:	fa02 fb06 	lsl.w	fp, r2, r6
 80032b0:	ea0e 0e07 	and.w	lr, lr, r7
 80032b4:	ea4e 0e0b 	orr.w	lr, lr, fp
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 80032b8:	f1bc 0f01 	cmp.w	ip, #1
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 80032bc:	f8c0 e000 	str.w	lr, [r0]
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 80032c0:	d815      	bhi.n	80032ee <TM_GPIO_INT_Init+0xb2>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 80032c2:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80032c6:	9b01      	ldr	r3, [sp, #4]
 80032c8:	ea2e 0909 	bic.w	r9, lr, r9
 80032cc:	fa03 fe04 	lsl.w	lr, r3, r4
 80032d0:	fa1f fe8e 	uxth.w	lr, lr
 80032d4:	ea49 090e 	orr.w	r9, r9, lr
 80032d8:	f8c0 9004 	str.w	r9, [r0, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 80032dc:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80032e0:	9b03      	ldr	r3, [sp, #12]
 80032e2:	ea07 070e 	and.w	r7, r7, lr
 80032e6:	fa03 f606 	lsl.w	r6, r3, r6
 80032ea:	4337      	orrs	r7, r6
 80032ec:	6087      	str	r7, [r0, #8]
 80032ee:	3401      	adds	r4, #1
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80032f0:	2c10      	cmp	r4, #16
 80032f2:	d1bc      	bne.n	800326e <TM_GPIO_INT_Init+0x32>
		}
	}
}
 80032f4:	b005      	add	sp, #20
 80032f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032fa:	bf00      	nop
 80032fc:	20004094 	.word	0x20004094

08003300 <TM_GPIO_Init>:
void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8003300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003304:	4605      	mov	r5, r0
 8003306:	4616      	mov	r6, r2
 8003308:	461f      	mov	r7, r3
 800330a:	f89d 8020 	ldrb.w	r8, [sp, #32]
 800330e:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	if (GPIO_Pin == 0x00) {
 8003312:	460c      	mov	r4, r1
 8003314:	b169      	cbz	r1, 8003332 <TM_GPIO_Init+0x32>
	TM_GPIO_INT_EnableClock(GPIOx);
 8003316:	f7ff ff81 	bl	800321c <TM_GPIO_INT_EnableClock>
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 800331a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800331e:	f8cd 8020 	str.w	r8, [sp, #32]
 8003322:	463b      	mov	r3, r7
 8003324:	4632      	mov	r2, r6
 8003326:	4621      	mov	r1, r4
 8003328:	4628      	mov	r0, r5
}
 800332a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 800332e:	f7ff bf85 	b.w	800323c <TM_GPIO_INT_Init>
 8003332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08003338 <Delay>:
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 8003338:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint32_t start = DWT->CYCCNT;
 800333a:	4c09      	ldr	r4, [pc, #36]	; (8003360 <Delay+0x28>)
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 800333c:	9001      	str	r0, [sp, #4]
	uint32_t start = DWT->CYCCNT;
 800333e:	6865      	ldr	r5, [r4, #4]
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8003340:	f7fd fcd0 	bl	8000ce4 <HAL_RCC_GetHCLKFreq>
 8003344:	9b01      	ldr	r3, [sp, #4]
 8003346:	4a07      	ldr	r2, [pc, #28]	; (8003364 <Delay+0x2c>)
 8003348:	fbb0 f0f2 	udiv	r0, r0, r2
 800334c:	4343      	muls	r3, r0
 800334e:	9301      	str	r3, [sp, #4]
	while ((DWT->CYCCNT - start) < micros);
 8003350:	6863      	ldr	r3, [r4, #4]
 8003352:	9a01      	ldr	r2, [sp, #4]
 8003354:	1b5b      	subs	r3, r3, r5
 8003356:	4293      	cmp	r3, r2
 8003358:	d3fa      	bcc.n	8003350 <Delay+0x18>
}
 800335a:	b003      	add	sp, #12
 800335c:	bd30      	pop	{r4, r5, pc}
 800335e:	bf00      	nop
 8003360:	e0001000 	.word	0xe0001000
 8003364:	000f4240 	.word	0x000f4240

08003368 <TM_OneWire_Init>:
#include "tm_stm32_onewire.h"
#include "tm_stm32_delay.h"
#include "defines.h"
#include "tm_stm32_gpio.h"

void TM_OneWire_Init(TM_OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8003368:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800336a:	460e      	mov	r6, r1
 800336c:	4615      	mov	r5, r2
 800336e:	4604      	mov	r4, r0
	/* Initialize delay if it was not already */
	TM_DELAY_Init();
 8003370:	f7ff fd16 	bl	8002da0 <TM_DELAY_Init>

	/* Init GPIO pin */
	TM_GPIO_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium);
 8003374:	2201      	movs	r2, #1
 8003376:	9201      	str	r2, [sp, #4]
 8003378:	9200      	str	r2, [sp, #0]
 800337a:	2300      	movs	r3, #0
 800337c:	4629      	mov	r1, r5
 800337e:	4630      	mov	r0, r6
 8003380:	f7ff ffbe 	bl	8003300 <TM_GPIO_Init>
	
	/* Save settings */
	OneWireStruct->GPIOx = GPIOx;
 8003384:	6026      	str	r6, [r4, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8003386:	80a5      	strh	r5, [r4, #4]
}
 8003388:	b002      	add	sp, #8
 800338a:	bd70      	pop	{r4, r5, r6, pc}

0800338c <TM_OneWire_Reset>:

uint8_t TM_OneWire_Reset(TM_OneWire_t* OneWireStruct) {
 800338c:	b510      	push	{r4, lr}
 800338e:	4604      	mov	r4, r0
	uint8_t i;
	
	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8003390:	6800      	ldr	r0, [r0, #0]
 8003392:	88a1      	ldrh	r1, [r4, #4]
 8003394:	040b      	lsls	r3, r1, #16
 8003396:	6183      	str	r3, [r0, #24]
	ONEWIRE_OUTPUT(OneWireStruct);
 8003398:	f7ff ff2a 	bl	80031f0 <TM_GPIO_SetPinAsOutput>
	ONEWIRE_DELAY(480);
 800339c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80033a0:	f7ff ffca 	bl	8003338 <Delay>
	
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 80033a4:	88a1      	ldrh	r1, [r4, #4]
 80033a6:	6820      	ldr	r0, [r4, #0]
 80033a8:	f7ff ff10 	bl	80031cc <TM_GPIO_SetPinAsInput>
	ONEWIRE_DELAY(70);
 80033ac:	2046      	movs	r0, #70	; 0x46
 80033ae:	f7ff ffc3 	bl	8003338 <Delay>
	
	/* Check bit value */
	i = TM_GPIO_GetInputPinValue(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 80033b2:	6823      	ldr	r3, [r4, #0]
 80033b4:	88a2      	ldrh	r2, [r4, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	421a      	tst	r2, r3
 80033ba:	bf14      	ite	ne
 80033bc:	2401      	movne	r4, #1
 80033be:	2400      	moveq	r4, #0
	
	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 80033c0:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80033c4:	f7ff ffb8 	bl	8003338 <Delay>
	
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
}
 80033c8:	4620      	mov	r0, r4
 80033ca:	bd10      	pop	{r4, pc}

080033cc <TM_OneWire_WriteBit>:

void TM_OneWire_WriteBit(TM_OneWire_t* OneWireStruct, uint8_t bit) {
 80033cc:	b510      	push	{r4, lr}
 80033ce:	4604      	mov	r4, r0
 80033d0:	6800      	ldr	r0, [r0, #0]
 80033d2:	88a3      	ldrh	r3, [r4, #4]
	if (bit) {
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 80033d4:	041a      	lsls	r2, r3, #16
 80033d6:	6182      	str	r2, [r0, #24]
	if (bit) {
 80033d8:	b191      	cbz	r1, 8003400 <TM_OneWire_WriteBit+0x34>
		ONEWIRE_OUTPUT(OneWireStruct);
 80033da:	4619      	mov	r1, r3
 80033dc:	f7ff ff08 	bl	80031f0 <TM_GPIO_SetPinAsOutput>
		ONEWIRE_DELAY(10);
 80033e0:	200a      	movs	r0, #10
 80033e2:	f7ff ffa9 	bl	8003338 <Delay>
		
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 80033e6:	6820      	ldr	r0, [r4, #0]
 80033e8:	88a1      	ldrh	r1, [r4, #4]
 80033ea:	f7ff feef 	bl	80031cc <TM_GPIO_SetPinAsInput>
		
		/* Wait for 55 us and release the line */
		ONEWIRE_DELAY(55);
 80033ee:	2037      	movs	r0, #55	; 0x37
		
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
		
		/* Wait for 5 us and release the line */
		ONEWIRE_DELAY(5);
 80033f0:	f7ff ffa2 	bl	8003338 <Delay>
		ONEWIRE_INPUT(OneWireStruct);
 80033f4:	88a1      	ldrh	r1, [r4, #4]
 80033f6:	6820      	ldr	r0, [r4, #0]
	}
}
 80033f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ONEWIRE_INPUT(OneWireStruct);
 80033fc:	f7ff bee6 	b.w	80031cc <TM_GPIO_SetPinAsInput>
		ONEWIRE_OUTPUT(OneWireStruct);
 8003400:	4619      	mov	r1, r3
 8003402:	f7ff fef5 	bl	80031f0 <TM_GPIO_SetPinAsOutput>
		ONEWIRE_DELAY(65);
 8003406:	2041      	movs	r0, #65	; 0x41
 8003408:	f7ff ff96 	bl	8003338 <Delay>
		ONEWIRE_INPUT(OneWireStruct);
 800340c:	6820      	ldr	r0, [r4, #0]
 800340e:	88a1      	ldrh	r1, [r4, #4]
 8003410:	f7ff fedc 	bl	80031cc <TM_GPIO_SetPinAsInput>
		ONEWIRE_DELAY(5);
 8003414:	2005      	movs	r0, #5
 8003416:	e7eb      	b.n	80033f0 <TM_OneWire_WriteBit+0x24>

08003418 <TM_OneWire_ReadBit>:

uint8_t TM_OneWire_ReadBit(TM_OneWire_t* OneWireStruct) {
 8003418:	b510      	push	{r4, lr}
 800341a:	4604      	mov	r4, r0
	uint8_t bit = 0;
	
	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 800341c:	6800      	ldr	r0, [r0, #0]
 800341e:	88a1      	ldrh	r1, [r4, #4]
 8003420:	040b      	lsls	r3, r1, #16
 8003422:	6183      	str	r3, [r0, #24]
	ONEWIRE_OUTPUT(OneWireStruct);
 8003424:	f7ff fee4 	bl	80031f0 <TM_GPIO_SetPinAsOutput>
	ONEWIRE_DELAY(3);
 8003428:	2003      	movs	r0, #3
 800342a:	f7ff ff85 	bl	8003338 <Delay>
	
	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 800342e:	88a1      	ldrh	r1, [r4, #4]
 8003430:	6820      	ldr	r0, [r4, #0]
 8003432:	f7ff fecb 	bl	80031cc <TM_GPIO_SetPinAsInput>
	ONEWIRE_DELAY(10);
 8003436:	200a      	movs	r0, #10
 8003438:	f7ff ff7e 	bl	8003338 <Delay>
	
	/* Read line value */
	if (TM_GPIO_GetInputPinValue(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 800343c:	6823      	ldr	r3, [r4, #0]
 800343e:	88a2      	ldrh	r2, [r4, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	421a      	tst	r2, r3
	uint8_t bit = 0;
 8003444:	bf14      	ite	ne
 8003446:	2401      	movne	r4, #1
 8003448:	2400      	moveq	r4, #0
		/* Bit is HIGH */
		bit = 1;
	}
	
	/* Wait 50us to complete 60us period */
	ONEWIRE_DELAY(50);
 800344a:	2032      	movs	r0, #50	; 0x32
 800344c:	f7ff ff74 	bl	8003338 <Delay>
	
	/* Return bit value */
	return bit;
}
 8003450:	4620      	mov	r0, r4
 8003452:	bd10      	pop	{r4, pc}

08003454 <TM_OneWire_WriteByte>:

void TM_OneWire_WriteByte(TM_OneWire_t* OneWireStruct, uint8_t byte) {
 8003454:	b570      	push	{r4, r5, r6, lr}
 8003456:	4606      	mov	r6, r0
 8003458:	460d      	mov	r5, r1
	uint8_t i = 8;
	/* Write 8 bits */
	while (i--) {
 800345a:	2409      	movs	r4, #9
 800345c:	3c01      	subs	r4, #1
 800345e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8003462:	d100      	bne.n	8003466 <TM_OneWire_WriteByte+0x12>
		/* LSB bit is first */
		TM_OneWire_WriteBit(OneWireStruct, byte & 0x01);
		byte >>= 1;
	}
}
 8003464:	bd70      	pop	{r4, r5, r6, pc}
		TM_OneWire_WriteBit(OneWireStruct, byte & 0x01);
 8003466:	f005 0101 	and.w	r1, r5, #1
 800346a:	4630      	mov	r0, r6
 800346c:	f7ff ffae 	bl	80033cc <TM_OneWire_WriteBit>
		byte >>= 1;
 8003470:	086d      	lsrs	r5, r5, #1
 8003472:	e7f3      	b.n	800345c <TM_OneWire_WriteByte+0x8>

08003474 <TM_OneWire_ReadByte>:

uint8_t TM_OneWire_ReadByte(TM_OneWire_t* OneWireStruct) {
 8003474:	b570      	push	{r4, r5, r6, lr}
 8003476:	4606      	mov	r6, r0
	uint8_t i = 8, byte = 0;
	while (i--) {
 8003478:	2509      	movs	r5, #9
	uint8_t i = 8, byte = 0;
 800347a:	2400      	movs	r4, #0
 800347c:	3d01      	subs	r5, #1
	while (i--) {
 800347e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8003482:	d101      	bne.n	8003488 <TM_OneWire_ReadByte+0x14>
		byte >>= 1;
		byte |= (TM_OneWire_ReadBit(OneWireStruct) << 7);
	}
	
	return byte;
}
 8003484:	4620      	mov	r0, r4
 8003486:	bd70      	pop	{r4, r5, r6, pc}
		byte |= (TM_OneWire_ReadBit(OneWireStruct) << 7);
 8003488:	4630      	mov	r0, r6
 800348a:	f7ff ffc5 	bl	8003418 <TM_OneWire_ReadBit>
		byte >>= 1;
 800348e:	0864      	lsrs	r4, r4, #1
		byte |= (TM_OneWire_ReadBit(OneWireStruct) << 7);
 8003490:	ea44 14c0 	orr.w	r4, r4, r0, lsl #7
 8003494:	b2e4      	uxtb	r4, r4
 8003496:	e7f1      	b.n	800347c <TM_OneWire_ReadByte+0x8>

08003498 <TM_OneWire_Search>:
	OneWireStruct->LastDiscrepancy = 0;
	OneWireStruct->LastDeviceFlag = 0;
	OneWireStruct->LastFamilyDiscrepancy = 0;
}

uint8_t TM_OneWire_Search(TM_OneWire_t* OneWireStruct, uint8_t command) {
 8003498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	rom_byte_number = 0;
	rom_byte_mask = 1;
	search_result = 0;

	/* Check if any devices */
	if (!OneWireStruct->LastDeviceFlag) {
 800349c:	7a03      	ldrb	r3, [r0, #8]
uint8_t TM_OneWire_Search(TM_OneWire_t* OneWireStruct, uint8_t command) {
 800349e:	4604      	mov	r4, r0
 80034a0:	460d      	mov	r5, r1
	if (!OneWireStruct->LastDeviceFlag) {
 80034a2:	b91b      	cbnz	r3, 80034ac <TM_OneWire_Search+0x14>
		/* 1-Wire reset */
		if (TM_OneWire_Reset(OneWireStruct)) {
 80034a4:	f7ff ff72 	bl	800338c <TM_OneWire_Reset>
 80034a8:	4681      	mov	r9, r0
 80034aa:	b128      	cbz	r0, 80034b8 <TM_OneWire_Search+0x20>
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 80034ac:	2000      	movs	r0, #0
 80034ae:	71a0      	strb	r0, [r4, #6]
			OneWireStruct->LastDeviceFlag = 0;
 80034b0:	7220      	strb	r0, [r4, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 80034b2:	71e0      	strb	r0, [r4, #7]
			return 0;
 80034b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		}

		/* Issue the search command */
		TM_OneWire_WriteByte(OneWireStruct, command);  
 80034b8:	4629      	mov	r1, r5
 80034ba:	4620      	mov	r0, r4
 80034bc:	f7ff ffca 	bl	8003454 <TM_OneWire_WriteByte>
	rom_byte_mask = 1;
 80034c0:	2601      	movs	r6, #1
	rom_byte_number = 0;
 80034c2:	464f      	mov	r7, r9
	id_bit_number = 1;
 80034c4:	4635      	mov	r5, r6

		/* Loop to do the search */
		do {
			/* Read a bit and its complement */
			id_bit = TM_OneWire_ReadBit(OneWireStruct);
 80034c6:	4620      	mov	r0, r4
 80034c8:	f7ff ffa6 	bl	8003418 <TM_OneWire_ReadBit>
 80034cc:	4680      	mov	r8, r0
			cmp_id_bit = TM_OneWire_ReadBit(OneWireStruct);
 80034ce:	4620      	mov	r0, r4
 80034d0:	f7ff ffa2 	bl	8003418 <TM_OneWire_ReadBit>

			/* Check for no devices on 1-wire */
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 80034d4:	f1b8 0f01 	cmp.w	r8, #1
 80034d8:	d110      	bne.n	80034fc <TM_OneWire_Search+0x64>
 80034da:	2801      	cmp	r0, #1
 80034dc:	d12e      	bne.n	800353c <TM_OneWire_Search+0xa4>
			}
		/* Loop until through all ROM bytes 0-7 */
		} while (rom_byte_number < 8);

		/* If the search was successful then */
		if (!(id_bit_number < 65)) {
 80034de:	2d40      	cmp	r5, #64	; 0x40
 80034e0:	d9e4      	bls.n	80034ac <TM_OneWire_Search+0x14>
			/* Search successful so set LastDiscrepancy, LastDeviceFlag, search_result */
			OneWireStruct->LastDiscrepancy = last_zero;
 80034e2:	f884 9006 	strb.w	r9, [r4, #6]

			/* Check for last device */
			if (OneWireStruct->LastDiscrepancy == 0) {
 80034e6:	f1b9 0f00 	cmp.w	r9, #0
 80034ea:	d101      	bne.n	80034f0 <TM_OneWire_Search+0x58>
				OneWireStruct->LastDeviceFlag = 1;
 80034ec:	2301      	movs	r3, #1
 80034ee:	7223      	strb	r3, [r4, #8]
			search_result = 1;
		}
	}

	/* If no device found then reset counters so next 'search' will be like a first */
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 80034f0:	7a63      	ldrb	r3, [r4, #9]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0da      	beq.n	80034ac <TM_OneWire_Search+0x14>
 80034f6:	2001      	movs	r0, #1
		OneWireStruct->LastFamilyDiscrepancy = 0;
		search_result = 0;
	}

	return search_result;
}
 80034f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (id_bit != cmp_id_bit) {
 80034fc:	4580      	cmp	r8, r0
 80034fe:	eb04 0307 	add.w	r3, r4, r7
 8003502:	d110      	bne.n	8003526 <TM_OneWire_Search+0x8e>
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 8003504:	79a2      	ldrb	r2, [r4, #6]
 8003506:	4295      	cmp	r5, r2
 8003508:	d212      	bcs.n	8003530 <TM_OneWire_Search+0x98>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 800350a:	7a5a      	ldrb	r2, [r3, #9]
 800350c:	4216      	tst	r6, r2
 800350e:	bf14      	ite	ne
 8003510:	f04f 0801 	movne.w	r8, #1
 8003514:	f04f 0800 	moveq.w	r8, #0
					if (search_direction == 0) {
 8003518:	f1b8 0f00 	cmp.w	r8, #0
 800351c:	d10e      	bne.n	800353c <TM_OneWire_Search+0xa4>
						if (last_zero < 9) {
 800351e:	2d08      	cmp	r5, #8
 8003520:	d800      	bhi.n	8003524 <TM_OneWire_Search+0x8c>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8003522:	71e5      	strb	r5, [r4, #7]
 8003524:	46a9      	mov	r9, r5
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8003526:	7a5a      	ldrb	r2, [r3, #9]
 8003528:	ea22 0206 	bic.w	r2, r2, r6
 800352c:	725a      	strb	r2, [r3, #9]
 800352e:	e00b      	b.n	8003548 <TM_OneWire_Search+0xb0>
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8003530:	bf0c      	ite	eq
 8003532:	f04f 0801 	moveq.w	r8, #1
 8003536:	f04f 0800 	movne.w	r8, #0
 800353a:	e7ed      	b.n	8003518 <TM_OneWire_Search+0x80>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 800353c:	19e2      	adds	r2, r4, r7
 800353e:	f04f 0801 	mov.w	r8, #1
 8003542:	7a53      	ldrb	r3, [r2, #9]
 8003544:	4333      	orrs	r3, r6
 8003546:	7253      	strb	r3, [r2, #9]
				TM_OneWire_WriteBit(OneWireStruct, search_direction);
 8003548:	4641      	mov	r1, r8
 800354a:	4620      	mov	r0, r4
				rom_byte_mask <<= 1;
 800354c:	0076      	lsls	r6, r6, #1
				TM_OneWire_WriteBit(OneWireStruct, search_direction);
 800354e:	f7ff ff3d 	bl	80033cc <TM_OneWire_WriteBit>
				if (rom_byte_mask == 0) {
 8003552:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
					rom_byte_number++;
 8003556:	bf04      	itt	eq
 8003558:	3701      	addeq	r7, #1
 800355a:	b2ff      	uxtbeq	r7, r7
				id_bit_number++;
 800355c:	f105 0501 	add.w	r5, r5, #1
					rom_byte_mask = 1;
 8003560:	bf08      	it	eq
 8003562:	2601      	moveq	r6, #1
		} while (rom_byte_number < 8);
 8003564:	2f07      	cmp	r7, #7
				id_bit_number++;
 8003566:	b2ed      	uxtb	r5, r5
		} while (rom_byte_number < 8);
 8003568:	d9ad      	bls.n	80034c6 <TM_OneWire_Search+0x2e>
 800356a:	e7b8      	b.n	80034de <TM_OneWire_Search+0x46>

0800356c <TM_OneWire_First>:
	OneWireStruct->LastDiscrepancy = 0;
 800356c:	2200      	movs	r2, #0
 800356e:	7182      	strb	r2, [r0, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8003570:	7202      	strb	r2, [r0, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8003572:	71c2      	strb	r2, [r0, #7]
	return TM_OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8003574:	21f0      	movs	r1, #240	; 0xf0
 8003576:	f7ff bf8f 	b.w	8003498 <TM_OneWire_Search>

0800357a <TM_OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		TM_OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void TM_OneWire_SelectWithPointer(TM_OneWire_t* OneWireStruct, uint8_t *ROM) {
 800357a:	b570      	push	{r4, r5, r6, lr}
 800357c:	460c      	mov	r4, r1
	uint8_t i;
	TM_OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 800357e:	2155      	movs	r1, #85	; 0x55
void TM_OneWire_SelectWithPointer(TM_OneWire_t* OneWireStruct, uint8_t *ROM) {
 8003580:	4606      	mov	r6, r0
	TM_OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 8003582:	f7ff ff67 	bl	8003454 <TM_OneWire_WriteByte>
 8003586:	1e65      	subs	r5, r4, #1
 8003588:	3407      	adds	r4, #7
	
	for (i = 0; i < 8; i++) {
		TM_OneWire_WriteByte(OneWireStruct, *(ROM + i));
 800358a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800358e:	4630      	mov	r0, r6
 8003590:	f7ff ff60 	bl	8003454 <TM_OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 8003594:	42a5      	cmp	r5, r4
 8003596:	d1f8      	bne.n	800358a <TM_OneWire_SelectWithPointer+0x10>
	}	
}
 8003598:	bd70      	pop	{r4, r5, r6, pc}

0800359a <TM_OneWire_GetFullROM>:

void TM_OneWire_GetFullROM(TM_OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 800359a:	f100 0309 	add.w	r3, r0, #9
 800359e:	3901      	subs	r1, #1
 80035a0:	3011      	adds	r0, #17
	uint8_t i;
	for (i = 0; i < 8; i++) {
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 80035a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035a6:	f801 2f01 	strb.w	r2, [r1, #1]!
	for (i = 0; i < 8; i++) {
 80035aa:	4283      	cmp	r3, r0
 80035ac:	d1f9      	bne.n	80035a2 <TM_OneWire_GetFullROM+0x8>
	}
}
 80035ae:	4770      	bx	lr

080035b0 <TM_OneWire_CRC8>:

uint8_t TM_OneWire_CRC8(uint8_t *addr, uint8_t len) {
 80035b0:	b530      	push	{r4, r5, lr}
 80035b2:	4401      	add	r1, r0
	uint8_t crc = 0, inbyte, i, mix;
 80035b4:	2300      	movs	r3, #0
	
	while (len--) {
 80035b6:	4288      	cmp	r0, r1
 80035b8:	d101      	bne.n	80035be <TM_OneWire_CRC8+0xe>
		}
	}
	
	/* Return calculated CRC */
	return crc;
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	bd30      	pop	{r4, r5, pc}
		inbyte = *addr++;
 80035be:	f810 4b01 	ldrb.w	r4, [r0], #1
 80035c2:	2208      	movs	r2, #8
			mix = (crc ^ inbyte) & 0x01;
 80035c4:	ea83 0504 	eor.w	r5, r3, r4
			if (mix) {
 80035c8:	f015 0f01 	tst.w	r5, #1
 80035cc:	ea4f 0353 	mov.w	r3, r3, lsr #1
				crc ^= 0x8C;
 80035d0:	bf18      	it	ne
 80035d2:	f083 038c 	eorne.w	r3, r3, #140	; 0x8c
 80035d6:	f102 32ff 	add.w	r2, r2, #4294967295
 80035da:	bf18      	it	ne
 80035dc:	b2db      	uxtbne	r3, r3
		for (i = 8; i; i--) {
 80035de:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
			inbyte >>= 1;
 80035e2:	ea4f 0454 	mov.w	r4, r4, lsr #1
		for (i = 8; i; i--) {
 80035e6:	d1ed      	bne.n	80035c4 <TM_OneWire_CRC8+0x14>
 80035e8:	e7e5      	b.n	80035b6 <TM_OneWire_CRC8+0x6>
	...

080035ec <TM_RCC_InitSystem>:
 * | OTHER DEALINGS IN THE SOFTWARE.
 * |----------------------------------------------------------------------
 */
#include "tm_stm32_rcc.h"

TM_RCC_Result_t TM_RCC_InitSystem(void) {
 80035ec:	b510      	push	{r4, lr}
 80035ee:	b094      	sub	sp, #80	; 0x50
	/* Enable D-Cache */
	SCB_EnableDCache();
#endif
	
	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 80035f0:	2300      	movs	r3, #0
 80035f2:	4a23      	ldr	r2, [pc, #140]	; (8003680 <TM_RCC_InitSystem+0x94>)
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80035f8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80035fc:	6411      	str	r1, [r2, #64]	; 0x40
 80035fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003600:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003604:	9200      	str	r2, [sp, #0]
 8003606:	9a00      	ldr	r2, [sp, #0]

#if !defined(STM32F0xx)
	/* Set voltage scaling */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003608:	4a1e      	ldr	r2, [pc, #120]	; (8003684 <TM_RCC_InitSystem+0x98>)
 800360a:	9301      	str	r3, [sp, #4]
 800360c:	6811      	ldr	r1, [r2, #0]
 800360e:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8003612:	6011      	str	r1, [r2, #0]
 8003614:	6812      	ldr	r2, [r2, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE;
	
	/* Select proper PLL input clock */
	if (RCC_OSCILLATORTYPE == RCC_OSCILLATORTYPE_HSE) {	
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
		RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8003616:	930a      	str	r3, [sp, #40]	; 0x28
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003618:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
		RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800361c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003620:	9201      	str	r2, [sp, #4]
		RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003622:	930e      	str	r3, [sp, #56]	; 0x38
	
	/* Set PLL parameters */
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	
#if !defined(STM32F0xx)
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM;
 8003624:	2308      	movs	r3, #8
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003626:	9a01      	ldr	r2, [sp, #4]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM;
 8003628:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE;
 800362a:	2201      	movs	r2, #1
	RCC_OscInitStruct.PLL.PLLN = RCC_PLLN;
 800362c:	f44f 73b4 	mov.w	r3, #360	; 0x168
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003630:	2402      	movs	r4, #2
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE;
 8003632:	9207      	str	r2, [sp, #28]
	RCC_OscInitStruct.PLL.PLLN = RCC_PLLN;
 8003634:	9310      	str	r3, [sp, #64]	; 0x40
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003636:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP;
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ;
 800363a:	2307      	movs	r3, #7
	RCC_OscInitStruct.PLL.PLLR = 7;
#endif
#endif
	
	/* Try to init */
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800363c:	a807      	add	r0, sp, #28
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800363e:	9208      	str	r2, [sp, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003640:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP;
 8003642:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ;
 8003644:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 7;
 8003646:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003648:	f7fd fbd8 	bl	8000dfc <HAL_RCC_OscConfig>
 800364c:	b110      	cbz	r0, 8003654 <TM_RCC_InitSystem+0x68>
		return TM_RCC_Result_Error;
 800364e:	2001      	movs	r0, #1
		return TM_RCC_Result_Error;
	}
	
	/* Return OK */
	return TM_RCC_Result_Ok;
}
 8003650:	b014      	add	sp, #80	; 0x50
 8003652:	bd10      	pop	{r4, pc}
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8003654:	f7fd fa70 	bl	8000b38 <HAL_PWREx_EnableOverDrive>
 8003658:	2800      	cmp	r0, #0
 800365a:	d1f8      	bne.n	800364e <TM_RCC_InitSystem+0x62>
	RCC_ClkInitStruct.ClockType |= RCC_CLOCKTYPE_PCLK2;
 800365c:	230f      	movs	r3, #15
 800365e:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8003660:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003664:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8003666:	9305      	str	r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 8003668:	2106      	movs	r1, #6
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800366a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 800366e:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003670:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003672:	9306      	str	r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 8003674:	f7fd fa9c 	bl	8000bb0 <HAL_RCC_ClockConfig>
		return TM_RCC_Result_Error;
 8003678:	3000      	adds	r0, #0
 800367a:	bf18      	it	ne
 800367c:	2001      	movne	r0, #1
 800367e:	e7e7      	b.n	8003650 <TM_RCC_InitSystem+0x64>
 8003680:	40023800 	.word	0x40023800
 8003684:	40007000 	.word	0x40007000

08003688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800368c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800368e:	e003      	b.n	8003698 <LoopCopyDataInit>

08003690 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003690:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003692:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003694:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003696:	3104      	adds	r1, #4

08003698 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003698:	480b      	ldr	r0, [pc, #44]	; (80036c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800369a:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800369c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800369e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80036a0:	d3f6      	bcc.n	8003690 <CopyDataInit>
  ldr  r2, =_sbss
 80036a2:	4a0b      	ldr	r2, [pc, #44]	; (80036d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80036a4:	e002      	b.n	80036ac <LoopFillZerobss>

080036a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80036a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80036a8:	f842 3b04 	str.w	r3, [r2], #4

080036ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80036ac:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80036ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80036b0:	d3f9      	bcc.n	80036a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80036b2:	f7ff fb4f 	bl	8002d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036b6:	f000 f817 	bl	80036e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036ba:	f7ff f8f3 	bl	80028a4 <main>
  bx  lr    
 80036be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036c0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80036c4:	08004058 	.word	0x08004058
  ldr  r0, =_sdata
 80036c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80036cc:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80036d0:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80036d4:	20004250 	.word	0x20004250

080036d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036d8:	e7fe      	b.n	80036d8 <ADC_IRQHandler>
	...

080036dc <__errno>:
 80036dc:	4b01      	ldr	r3, [pc, #4]	; (80036e4 <__errno+0x8>)
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	20000014 	.word	0x20000014

080036e8 <__libc_init_array>:
 80036e8:	b570      	push	{r4, r5, r6, lr}
 80036ea:	4e0d      	ldr	r6, [pc, #52]	; (8003720 <__libc_init_array+0x38>)
 80036ec:	4c0d      	ldr	r4, [pc, #52]	; (8003724 <__libc_init_array+0x3c>)
 80036ee:	1ba4      	subs	r4, r4, r6
 80036f0:	10a4      	asrs	r4, r4, #2
 80036f2:	2500      	movs	r5, #0
 80036f4:	42a5      	cmp	r5, r4
 80036f6:	d109      	bne.n	800370c <__libc_init_array+0x24>
 80036f8:	4e0b      	ldr	r6, [pc, #44]	; (8003728 <__libc_init_array+0x40>)
 80036fa:	4c0c      	ldr	r4, [pc, #48]	; (800372c <__libc_init_array+0x44>)
 80036fc:	f000 fc3e 	bl	8003f7c <_init>
 8003700:	1ba4      	subs	r4, r4, r6
 8003702:	10a4      	asrs	r4, r4, #2
 8003704:	2500      	movs	r5, #0
 8003706:	42a5      	cmp	r5, r4
 8003708:	d105      	bne.n	8003716 <__libc_init_array+0x2e>
 800370a:	bd70      	pop	{r4, r5, r6, pc}
 800370c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003710:	4798      	blx	r3
 8003712:	3501      	adds	r5, #1
 8003714:	e7ee      	b.n	80036f4 <__libc_init_array+0xc>
 8003716:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800371a:	4798      	blx	r3
 800371c:	3501      	adds	r5, #1
 800371e:	e7f2      	b.n	8003706 <__libc_init_array+0x1e>
 8003720:	08004050 	.word	0x08004050
 8003724:	08004050 	.word	0x08004050
 8003728:	08004050 	.word	0x08004050
 800372c:	08004054 	.word	0x08004054

08003730 <memcpy>:
 8003730:	b510      	push	{r4, lr}
 8003732:	1e43      	subs	r3, r0, #1
 8003734:	440a      	add	r2, r1
 8003736:	4291      	cmp	r1, r2
 8003738:	d100      	bne.n	800373c <memcpy+0xc>
 800373a:	bd10      	pop	{r4, pc}
 800373c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003740:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003744:	e7f7      	b.n	8003736 <memcpy+0x6>

08003746 <memset>:
 8003746:	4402      	add	r2, r0
 8003748:	4603      	mov	r3, r0
 800374a:	4293      	cmp	r3, r2
 800374c:	d100      	bne.n	8003750 <memset+0xa>
 800374e:	4770      	bx	lr
 8003750:	f803 1b01 	strb.w	r1, [r3], #1
 8003754:	e7f9      	b.n	800374a <memset+0x4>
	...

08003758 <_free_r>:
 8003758:	b538      	push	{r3, r4, r5, lr}
 800375a:	4605      	mov	r5, r0
 800375c:	2900      	cmp	r1, #0
 800375e:	d045      	beq.n	80037ec <_free_r+0x94>
 8003760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003764:	1f0c      	subs	r4, r1, #4
 8003766:	2b00      	cmp	r3, #0
 8003768:	bfb8      	it	lt
 800376a:	18e4      	addlt	r4, r4, r3
 800376c:	f000 f8d4 	bl	8003918 <__malloc_lock>
 8003770:	4a1f      	ldr	r2, [pc, #124]	; (80037f0 <_free_r+0x98>)
 8003772:	6813      	ldr	r3, [r2, #0]
 8003774:	4610      	mov	r0, r2
 8003776:	b933      	cbnz	r3, 8003786 <_free_r+0x2e>
 8003778:	6063      	str	r3, [r4, #4]
 800377a:	6014      	str	r4, [r2, #0]
 800377c:	4628      	mov	r0, r5
 800377e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003782:	f000 b8ca 	b.w	800391a <__malloc_unlock>
 8003786:	42a3      	cmp	r3, r4
 8003788:	d90c      	bls.n	80037a4 <_free_r+0x4c>
 800378a:	6821      	ldr	r1, [r4, #0]
 800378c:	1862      	adds	r2, r4, r1
 800378e:	4293      	cmp	r3, r2
 8003790:	bf04      	itt	eq
 8003792:	681a      	ldreq	r2, [r3, #0]
 8003794:	685b      	ldreq	r3, [r3, #4]
 8003796:	6063      	str	r3, [r4, #4]
 8003798:	bf04      	itt	eq
 800379a:	1852      	addeq	r2, r2, r1
 800379c:	6022      	streq	r2, [r4, #0]
 800379e:	6004      	str	r4, [r0, #0]
 80037a0:	e7ec      	b.n	800377c <_free_r+0x24>
 80037a2:	4613      	mov	r3, r2
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	b10a      	cbz	r2, 80037ac <_free_r+0x54>
 80037a8:	42a2      	cmp	r2, r4
 80037aa:	d9fa      	bls.n	80037a2 <_free_r+0x4a>
 80037ac:	6819      	ldr	r1, [r3, #0]
 80037ae:	1858      	adds	r0, r3, r1
 80037b0:	42a0      	cmp	r0, r4
 80037b2:	d10b      	bne.n	80037cc <_free_r+0x74>
 80037b4:	6820      	ldr	r0, [r4, #0]
 80037b6:	4401      	add	r1, r0
 80037b8:	1858      	adds	r0, r3, r1
 80037ba:	4282      	cmp	r2, r0
 80037bc:	6019      	str	r1, [r3, #0]
 80037be:	d1dd      	bne.n	800377c <_free_r+0x24>
 80037c0:	6810      	ldr	r0, [r2, #0]
 80037c2:	6852      	ldr	r2, [r2, #4]
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	4401      	add	r1, r0
 80037c8:	6019      	str	r1, [r3, #0]
 80037ca:	e7d7      	b.n	800377c <_free_r+0x24>
 80037cc:	d902      	bls.n	80037d4 <_free_r+0x7c>
 80037ce:	230c      	movs	r3, #12
 80037d0:	602b      	str	r3, [r5, #0]
 80037d2:	e7d3      	b.n	800377c <_free_r+0x24>
 80037d4:	6820      	ldr	r0, [r4, #0]
 80037d6:	1821      	adds	r1, r4, r0
 80037d8:	428a      	cmp	r2, r1
 80037da:	bf04      	itt	eq
 80037dc:	6811      	ldreq	r1, [r2, #0]
 80037de:	6852      	ldreq	r2, [r2, #4]
 80037e0:	6062      	str	r2, [r4, #4]
 80037e2:	bf04      	itt	eq
 80037e4:	1809      	addeq	r1, r1, r0
 80037e6:	6021      	streq	r1, [r4, #0]
 80037e8:	605c      	str	r4, [r3, #4]
 80037ea:	e7c7      	b.n	800377c <_free_r+0x24>
 80037ec:	bd38      	pop	{r3, r4, r5, pc}
 80037ee:	bf00      	nop
 80037f0:	200040b0 	.word	0x200040b0

080037f4 <_malloc_r>:
 80037f4:	b570      	push	{r4, r5, r6, lr}
 80037f6:	1ccd      	adds	r5, r1, #3
 80037f8:	f025 0503 	bic.w	r5, r5, #3
 80037fc:	3508      	adds	r5, #8
 80037fe:	2d0c      	cmp	r5, #12
 8003800:	bf38      	it	cc
 8003802:	250c      	movcc	r5, #12
 8003804:	2d00      	cmp	r5, #0
 8003806:	4606      	mov	r6, r0
 8003808:	db01      	blt.n	800380e <_malloc_r+0x1a>
 800380a:	42a9      	cmp	r1, r5
 800380c:	d903      	bls.n	8003816 <_malloc_r+0x22>
 800380e:	230c      	movs	r3, #12
 8003810:	6033      	str	r3, [r6, #0]
 8003812:	2000      	movs	r0, #0
 8003814:	bd70      	pop	{r4, r5, r6, pc}
 8003816:	f000 f87f 	bl	8003918 <__malloc_lock>
 800381a:	4a23      	ldr	r2, [pc, #140]	; (80038a8 <_malloc_r+0xb4>)
 800381c:	6814      	ldr	r4, [r2, #0]
 800381e:	4621      	mov	r1, r4
 8003820:	b991      	cbnz	r1, 8003848 <_malloc_r+0x54>
 8003822:	4c22      	ldr	r4, [pc, #136]	; (80038ac <_malloc_r+0xb8>)
 8003824:	6823      	ldr	r3, [r4, #0]
 8003826:	b91b      	cbnz	r3, 8003830 <_malloc_r+0x3c>
 8003828:	4630      	mov	r0, r6
 800382a:	f000 f841 	bl	80038b0 <_sbrk_r>
 800382e:	6020      	str	r0, [r4, #0]
 8003830:	4629      	mov	r1, r5
 8003832:	4630      	mov	r0, r6
 8003834:	f000 f83c 	bl	80038b0 <_sbrk_r>
 8003838:	1c43      	adds	r3, r0, #1
 800383a:	d126      	bne.n	800388a <_malloc_r+0x96>
 800383c:	230c      	movs	r3, #12
 800383e:	6033      	str	r3, [r6, #0]
 8003840:	4630      	mov	r0, r6
 8003842:	f000 f86a 	bl	800391a <__malloc_unlock>
 8003846:	e7e4      	b.n	8003812 <_malloc_r+0x1e>
 8003848:	680b      	ldr	r3, [r1, #0]
 800384a:	1b5b      	subs	r3, r3, r5
 800384c:	d41a      	bmi.n	8003884 <_malloc_r+0x90>
 800384e:	2b0b      	cmp	r3, #11
 8003850:	d90f      	bls.n	8003872 <_malloc_r+0x7e>
 8003852:	600b      	str	r3, [r1, #0]
 8003854:	50cd      	str	r5, [r1, r3]
 8003856:	18cc      	adds	r4, r1, r3
 8003858:	4630      	mov	r0, r6
 800385a:	f000 f85e 	bl	800391a <__malloc_unlock>
 800385e:	f104 000b 	add.w	r0, r4, #11
 8003862:	1d23      	adds	r3, r4, #4
 8003864:	f020 0007 	bic.w	r0, r0, #7
 8003868:	1ac3      	subs	r3, r0, r3
 800386a:	d01b      	beq.n	80038a4 <_malloc_r+0xb0>
 800386c:	425a      	negs	r2, r3
 800386e:	50e2      	str	r2, [r4, r3]
 8003870:	bd70      	pop	{r4, r5, r6, pc}
 8003872:	428c      	cmp	r4, r1
 8003874:	bf0d      	iteet	eq
 8003876:	6863      	ldreq	r3, [r4, #4]
 8003878:	684b      	ldrne	r3, [r1, #4]
 800387a:	6063      	strne	r3, [r4, #4]
 800387c:	6013      	streq	r3, [r2, #0]
 800387e:	bf18      	it	ne
 8003880:	460c      	movne	r4, r1
 8003882:	e7e9      	b.n	8003858 <_malloc_r+0x64>
 8003884:	460c      	mov	r4, r1
 8003886:	6849      	ldr	r1, [r1, #4]
 8003888:	e7ca      	b.n	8003820 <_malloc_r+0x2c>
 800388a:	1cc4      	adds	r4, r0, #3
 800388c:	f024 0403 	bic.w	r4, r4, #3
 8003890:	42a0      	cmp	r0, r4
 8003892:	d005      	beq.n	80038a0 <_malloc_r+0xac>
 8003894:	1a21      	subs	r1, r4, r0
 8003896:	4630      	mov	r0, r6
 8003898:	f000 f80a 	bl	80038b0 <_sbrk_r>
 800389c:	3001      	adds	r0, #1
 800389e:	d0cd      	beq.n	800383c <_malloc_r+0x48>
 80038a0:	6025      	str	r5, [r4, #0]
 80038a2:	e7d9      	b.n	8003858 <_malloc_r+0x64>
 80038a4:	bd70      	pop	{r4, r5, r6, pc}
 80038a6:	bf00      	nop
 80038a8:	200040b0 	.word	0x200040b0
 80038ac:	200040b4 	.word	0x200040b4

080038b0 <_sbrk_r>:
 80038b0:	b538      	push	{r3, r4, r5, lr}
 80038b2:	4c06      	ldr	r4, [pc, #24]	; (80038cc <_sbrk_r+0x1c>)
 80038b4:	2300      	movs	r3, #0
 80038b6:	4605      	mov	r5, r0
 80038b8:	4608      	mov	r0, r1
 80038ba:	6023      	str	r3, [r4, #0]
 80038bc:	f7ff fa30 	bl	8002d20 <_sbrk>
 80038c0:	1c43      	adds	r3, r0, #1
 80038c2:	d102      	bne.n	80038ca <_sbrk_r+0x1a>
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	b103      	cbz	r3, 80038ca <_sbrk_r+0x1a>
 80038c8:	602b      	str	r3, [r5, #0]
 80038ca:	bd38      	pop	{r3, r4, r5, pc}
 80038cc:	2000424c 	.word	0x2000424c

080038d0 <siprintf>:
 80038d0:	b40e      	push	{r1, r2, r3}
 80038d2:	b500      	push	{lr}
 80038d4:	b09c      	sub	sp, #112	; 0x70
 80038d6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80038da:	ab1d      	add	r3, sp, #116	; 0x74
 80038dc:	f8ad 1014 	strh.w	r1, [sp, #20]
 80038e0:	9002      	str	r0, [sp, #8]
 80038e2:	9006      	str	r0, [sp, #24]
 80038e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038e8:	480a      	ldr	r0, [pc, #40]	; (8003914 <siprintf+0x44>)
 80038ea:	9104      	str	r1, [sp, #16]
 80038ec:	9107      	str	r1, [sp, #28]
 80038ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80038f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80038f6:	f8ad 1016 	strh.w	r1, [sp, #22]
 80038fa:	6800      	ldr	r0, [r0, #0]
 80038fc:	9301      	str	r3, [sp, #4]
 80038fe:	a902      	add	r1, sp, #8
 8003900:	f000 f868 	bl	80039d4 <_svfiprintf_r>
 8003904:	9b02      	ldr	r3, [sp, #8]
 8003906:	2200      	movs	r2, #0
 8003908:	701a      	strb	r2, [r3, #0]
 800390a:	b01c      	add	sp, #112	; 0x70
 800390c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003910:	b003      	add	sp, #12
 8003912:	4770      	bx	lr
 8003914:	20000014 	.word	0x20000014

08003918 <__malloc_lock>:
 8003918:	4770      	bx	lr

0800391a <__malloc_unlock>:
 800391a:	4770      	bx	lr

0800391c <__ssputs_r>:
 800391c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003920:	688e      	ldr	r6, [r1, #8]
 8003922:	429e      	cmp	r6, r3
 8003924:	4682      	mov	sl, r0
 8003926:	460c      	mov	r4, r1
 8003928:	4691      	mov	r9, r2
 800392a:	4698      	mov	r8, r3
 800392c:	d835      	bhi.n	800399a <__ssputs_r+0x7e>
 800392e:	898a      	ldrh	r2, [r1, #12]
 8003930:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003934:	d031      	beq.n	800399a <__ssputs_r+0x7e>
 8003936:	6825      	ldr	r5, [r4, #0]
 8003938:	6909      	ldr	r1, [r1, #16]
 800393a:	1a6f      	subs	r7, r5, r1
 800393c:	6965      	ldr	r5, [r4, #20]
 800393e:	2302      	movs	r3, #2
 8003940:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003944:	fb95 f5f3 	sdiv	r5, r5, r3
 8003948:	f108 0301 	add.w	r3, r8, #1
 800394c:	443b      	add	r3, r7
 800394e:	429d      	cmp	r5, r3
 8003950:	bf38      	it	cc
 8003952:	461d      	movcc	r5, r3
 8003954:	0553      	lsls	r3, r2, #21
 8003956:	d531      	bpl.n	80039bc <__ssputs_r+0xa0>
 8003958:	4629      	mov	r1, r5
 800395a:	f7ff ff4b 	bl	80037f4 <_malloc_r>
 800395e:	4606      	mov	r6, r0
 8003960:	b950      	cbnz	r0, 8003978 <__ssputs_r+0x5c>
 8003962:	230c      	movs	r3, #12
 8003964:	f8ca 3000 	str.w	r3, [sl]
 8003968:	89a3      	ldrh	r3, [r4, #12]
 800396a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800396e:	81a3      	strh	r3, [r4, #12]
 8003970:	f04f 30ff 	mov.w	r0, #4294967295
 8003974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003978:	463a      	mov	r2, r7
 800397a:	6921      	ldr	r1, [r4, #16]
 800397c:	f7ff fed8 	bl	8003730 <memcpy>
 8003980:	89a3      	ldrh	r3, [r4, #12]
 8003982:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800398a:	81a3      	strh	r3, [r4, #12]
 800398c:	6126      	str	r6, [r4, #16]
 800398e:	6165      	str	r5, [r4, #20]
 8003990:	443e      	add	r6, r7
 8003992:	1bed      	subs	r5, r5, r7
 8003994:	6026      	str	r6, [r4, #0]
 8003996:	60a5      	str	r5, [r4, #8]
 8003998:	4646      	mov	r6, r8
 800399a:	4546      	cmp	r6, r8
 800399c:	bf28      	it	cs
 800399e:	4646      	movcs	r6, r8
 80039a0:	4632      	mov	r2, r6
 80039a2:	4649      	mov	r1, r9
 80039a4:	6820      	ldr	r0, [r4, #0]
 80039a6:	f000 fa9f 	bl	8003ee8 <memmove>
 80039aa:	68a3      	ldr	r3, [r4, #8]
 80039ac:	1b9b      	subs	r3, r3, r6
 80039ae:	60a3      	str	r3, [r4, #8]
 80039b0:	6823      	ldr	r3, [r4, #0]
 80039b2:	441e      	add	r6, r3
 80039b4:	6026      	str	r6, [r4, #0]
 80039b6:	2000      	movs	r0, #0
 80039b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039bc:	462a      	mov	r2, r5
 80039be:	f000 faad 	bl	8003f1c <_realloc_r>
 80039c2:	4606      	mov	r6, r0
 80039c4:	2800      	cmp	r0, #0
 80039c6:	d1e1      	bne.n	800398c <__ssputs_r+0x70>
 80039c8:	6921      	ldr	r1, [r4, #16]
 80039ca:	4650      	mov	r0, sl
 80039cc:	f7ff fec4 	bl	8003758 <_free_r>
 80039d0:	e7c7      	b.n	8003962 <__ssputs_r+0x46>
	...

080039d4 <_svfiprintf_r>:
 80039d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039d8:	b09d      	sub	sp, #116	; 0x74
 80039da:	4680      	mov	r8, r0
 80039dc:	9303      	str	r3, [sp, #12]
 80039de:	898b      	ldrh	r3, [r1, #12]
 80039e0:	061c      	lsls	r4, r3, #24
 80039e2:	460d      	mov	r5, r1
 80039e4:	4616      	mov	r6, r2
 80039e6:	d50f      	bpl.n	8003a08 <_svfiprintf_r+0x34>
 80039e8:	690b      	ldr	r3, [r1, #16]
 80039ea:	b96b      	cbnz	r3, 8003a08 <_svfiprintf_r+0x34>
 80039ec:	2140      	movs	r1, #64	; 0x40
 80039ee:	f7ff ff01 	bl	80037f4 <_malloc_r>
 80039f2:	6028      	str	r0, [r5, #0]
 80039f4:	6128      	str	r0, [r5, #16]
 80039f6:	b928      	cbnz	r0, 8003a04 <_svfiprintf_r+0x30>
 80039f8:	230c      	movs	r3, #12
 80039fa:	f8c8 3000 	str.w	r3, [r8]
 80039fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003a02:	e0c5      	b.n	8003b90 <_svfiprintf_r+0x1bc>
 8003a04:	2340      	movs	r3, #64	; 0x40
 8003a06:	616b      	str	r3, [r5, #20]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8003a0c:	2320      	movs	r3, #32
 8003a0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a12:	2330      	movs	r3, #48	; 0x30
 8003a14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a18:	f04f 0b01 	mov.w	fp, #1
 8003a1c:	4637      	mov	r7, r6
 8003a1e:	463c      	mov	r4, r7
 8003a20:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d13c      	bne.n	8003aa2 <_svfiprintf_r+0xce>
 8003a28:	ebb7 0a06 	subs.w	sl, r7, r6
 8003a2c:	d00b      	beq.n	8003a46 <_svfiprintf_r+0x72>
 8003a2e:	4653      	mov	r3, sl
 8003a30:	4632      	mov	r2, r6
 8003a32:	4629      	mov	r1, r5
 8003a34:	4640      	mov	r0, r8
 8003a36:	f7ff ff71 	bl	800391c <__ssputs_r>
 8003a3a:	3001      	adds	r0, #1
 8003a3c:	f000 80a3 	beq.w	8003b86 <_svfiprintf_r+0x1b2>
 8003a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a42:	4453      	add	r3, sl
 8003a44:	9309      	str	r3, [sp, #36]	; 0x24
 8003a46:	783b      	ldrb	r3, [r7, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 809c 	beq.w	8003b86 <_svfiprintf_r+0x1b2>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f04f 32ff 	mov.w	r2, #4294967295
 8003a54:	9304      	str	r3, [sp, #16]
 8003a56:	9307      	str	r3, [sp, #28]
 8003a58:	9205      	str	r2, [sp, #20]
 8003a5a:	9306      	str	r3, [sp, #24]
 8003a5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a60:	931a      	str	r3, [sp, #104]	; 0x68
 8003a62:	2205      	movs	r2, #5
 8003a64:	7821      	ldrb	r1, [r4, #0]
 8003a66:	4850      	ldr	r0, [pc, #320]	; (8003ba8 <_svfiprintf_r+0x1d4>)
 8003a68:	f7fc fbda 	bl	8000220 <memchr>
 8003a6c:	1c67      	adds	r7, r4, #1
 8003a6e:	9b04      	ldr	r3, [sp, #16]
 8003a70:	b9d8      	cbnz	r0, 8003aaa <_svfiprintf_r+0xd6>
 8003a72:	06d9      	lsls	r1, r3, #27
 8003a74:	bf44      	itt	mi
 8003a76:	2220      	movmi	r2, #32
 8003a78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a7c:	071a      	lsls	r2, r3, #28
 8003a7e:	bf44      	itt	mi
 8003a80:	222b      	movmi	r2, #43	; 0x2b
 8003a82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a86:	7822      	ldrb	r2, [r4, #0]
 8003a88:	2a2a      	cmp	r2, #42	; 0x2a
 8003a8a:	d016      	beq.n	8003aba <_svfiprintf_r+0xe6>
 8003a8c:	9a07      	ldr	r2, [sp, #28]
 8003a8e:	2100      	movs	r1, #0
 8003a90:	200a      	movs	r0, #10
 8003a92:	4627      	mov	r7, r4
 8003a94:	3401      	adds	r4, #1
 8003a96:	783b      	ldrb	r3, [r7, #0]
 8003a98:	3b30      	subs	r3, #48	; 0x30
 8003a9a:	2b09      	cmp	r3, #9
 8003a9c:	d951      	bls.n	8003b42 <_svfiprintf_r+0x16e>
 8003a9e:	b1c9      	cbz	r1, 8003ad4 <_svfiprintf_r+0x100>
 8003aa0:	e011      	b.n	8003ac6 <_svfiprintf_r+0xf2>
 8003aa2:	2b25      	cmp	r3, #37	; 0x25
 8003aa4:	d0c0      	beq.n	8003a28 <_svfiprintf_r+0x54>
 8003aa6:	4627      	mov	r7, r4
 8003aa8:	e7b9      	b.n	8003a1e <_svfiprintf_r+0x4a>
 8003aaa:	4a3f      	ldr	r2, [pc, #252]	; (8003ba8 <_svfiprintf_r+0x1d4>)
 8003aac:	1a80      	subs	r0, r0, r2
 8003aae:	fa0b f000 	lsl.w	r0, fp, r0
 8003ab2:	4318      	orrs	r0, r3
 8003ab4:	9004      	str	r0, [sp, #16]
 8003ab6:	463c      	mov	r4, r7
 8003ab8:	e7d3      	b.n	8003a62 <_svfiprintf_r+0x8e>
 8003aba:	9a03      	ldr	r2, [sp, #12]
 8003abc:	1d11      	adds	r1, r2, #4
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	9103      	str	r1, [sp, #12]
 8003ac2:	2a00      	cmp	r2, #0
 8003ac4:	db01      	blt.n	8003aca <_svfiprintf_r+0xf6>
 8003ac6:	9207      	str	r2, [sp, #28]
 8003ac8:	e004      	b.n	8003ad4 <_svfiprintf_r+0x100>
 8003aca:	4252      	negs	r2, r2
 8003acc:	f043 0302 	orr.w	r3, r3, #2
 8003ad0:	9207      	str	r2, [sp, #28]
 8003ad2:	9304      	str	r3, [sp, #16]
 8003ad4:	783b      	ldrb	r3, [r7, #0]
 8003ad6:	2b2e      	cmp	r3, #46	; 0x2e
 8003ad8:	d10e      	bne.n	8003af8 <_svfiprintf_r+0x124>
 8003ada:	787b      	ldrb	r3, [r7, #1]
 8003adc:	2b2a      	cmp	r3, #42	; 0x2a
 8003ade:	f107 0101 	add.w	r1, r7, #1
 8003ae2:	d132      	bne.n	8003b4a <_svfiprintf_r+0x176>
 8003ae4:	9b03      	ldr	r3, [sp, #12]
 8003ae6:	1d1a      	adds	r2, r3, #4
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	9203      	str	r2, [sp, #12]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	bfb8      	it	lt
 8003af0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003af4:	3702      	adds	r7, #2
 8003af6:	9305      	str	r3, [sp, #20]
 8003af8:	4c2c      	ldr	r4, [pc, #176]	; (8003bac <_svfiprintf_r+0x1d8>)
 8003afa:	7839      	ldrb	r1, [r7, #0]
 8003afc:	2203      	movs	r2, #3
 8003afe:	4620      	mov	r0, r4
 8003b00:	f7fc fb8e 	bl	8000220 <memchr>
 8003b04:	b138      	cbz	r0, 8003b16 <_svfiprintf_r+0x142>
 8003b06:	2340      	movs	r3, #64	; 0x40
 8003b08:	1b00      	subs	r0, r0, r4
 8003b0a:	fa03 f000 	lsl.w	r0, r3, r0
 8003b0e:	9b04      	ldr	r3, [sp, #16]
 8003b10:	4303      	orrs	r3, r0
 8003b12:	9304      	str	r3, [sp, #16]
 8003b14:	3701      	adds	r7, #1
 8003b16:	7839      	ldrb	r1, [r7, #0]
 8003b18:	4825      	ldr	r0, [pc, #148]	; (8003bb0 <_svfiprintf_r+0x1dc>)
 8003b1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b1e:	2206      	movs	r2, #6
 8003b20:	1c7e      	adds	r6, r7, #1
 8003b22:	f7fc fb7d 	bl	8000220 <memchr>
 8003b26:	2800      	cmp	r0, #0
 8003b28:	d035      	beq.n	8003b96 <_svfiprintf_r+0x1c2>
 8003b2a:	4b22      	ldr	r3, [pc, #136]	; (8003bb4 <_svfiprintf_r+0x1e0>)
 8003b2c:	b9fb      	cbnz	r3, 8003b6e <_svfiprintf_r+0x19a>
 8003b2e:	9b03      	ldr	r3, [sp, #12]
 8003b30:	3307      	adds	r3, #7
 8003b32:	f023 0307 	bic.w	r3, r3, #7
 8003b36:	3308      	adds	r3, #8
 8003b38:	9303      	str	r3, [sp, #12]
 8003b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b3c:	444b      	add	r3, r9
 8003b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8003b40:	e76c      	b.n	8003a1c <_svfiprintf_r+0x48>
 8003b42:	fb00 3202 	mla	r2, r0, r2, r3
 8003b46:	2101      	movs	r1, #1
 8003b48:	e7a3      	b.n	8003a92 <_svfiprintf_r+0xbe>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	9305      	str	r3, [sp, #20]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	240a      	movs	r4, #10
 8003b52:	460f      	mov	r7, r1
 8003b54:	3101      	adds	r1, #1
 8003b56:	783a      	ldrb	r2, [r7, #0]
 8003b58:	3a30      	subs	r2, #48	; 0x30
 8003b5a:	2a09      	cmp	r2, #9
 8003b5c:	d903      	bls.n	8003b66 <_svfiprintf_r+0x192>
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0ca      	beq.n	8003af8 <_svfiprintf_r+0x124>
 8003b62:	9005      	str	r0, [sp, #20]
 8003b64:	e7c8      	b.n	8003af8 <_svfiprintf_r+0x124>
 8003b66:	fb04 2000 	mla	r0, r4, r0, r2
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e7f1      	b.n	8003b52 <_svfiprintf_r+0x17e>
 8003b6e:	ab03      	add	r3, sp, #12
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	462a      	mov	r2, r5
 8003b74:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <_svfiprintf_r+0x1e4>)
 8003b76:	a904      	add	r1, sp, #16
 8003b78:	4640      	mov	r0, r8
 8003b7a:	f3af 8000 	nop.w
 8003b7e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003b82:	4681      	mov	r9, r0
 8003b84:	d1d9      	bne.n	8003b3a <_svfiprintf_r+0x166>
 8003b86:	89ab      	ldrh	r3, [r5, #12]
 8003b88:	065b      	lsls	r3, r3, #25
 8003b8a:	f53f af38 	bmi.w	80039fe <_svfiprintf_r+0x2a>
 8003b8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b90:	b01d      	add	sp, #116	; 0x74
 8003b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b96:	ab03      	add	r3, sp, #12
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	462a      	mov	r2, r5
 8003b9c:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <_svfiprintf_r+0x1e4>)
 8003b9e:	a904      	add	r1, sp, #16
 8003ba0:	4640      	mov	r0, r8
 8003ba2:	f000 f881 	bl	8003ca8 <_printf_i>
 8003ba6:	e7ea      	b.n	8003b7e <_svfiprintf_r+0x1aa>
 8003ba8:	08004015 	.word	0x08004015
 8003bac:	0800401b 	.word	0x0800401b
 8003bb0:	0800401f 	.word	0x0800401f
 8003bb4:	00000000 	.word	0x00000000
 8003bb8:	0800391d 	.word	0x0800391d

08003bbc <_printf_common>:
 8003bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc0:	4691      	mov	r9, r2
 8003bc2:	461f      	mov	r7, r3
 8003bc4:	688a      	ldr	r2, [r1, #8]
 8003bc6:	690b      	ldr	r3, [r1, #16]
 8003bc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	bfb8      	it	lt
 8003bd0:	4613      	movlt	r3, r2
 8003bd2:	f8c9 3000 	str.w	r3, [r9]
 8003bd6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bda:	4606      	mov	r6, r0
 8003bdc:	460c      	mov	r4, r1
 8003bde:	b112      	cbz	r2, 8003be6 <_printf_common+0x2a>
 8003be0:	3301      	adds	r3, #1
 8003be2:	f8c9 3000 	str.w	r3, [r9]
 8003be6:	6823      	ldr	r3, [r4, #0]
 8003be8:	0699      	lsls	r1, r3, #26
 8003bea:	bf42      	ittt	mi
 8003bec:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003bf0:	3302      	addmi	r3, #2
 8003bf2:	f8c9 3000 	strmi.w	r3, [r9]
 8003bf6:	6825      	ldr	r5, [r4, #0]
 8003bf8:	f015 0506 	ands.w	r5, r5, #6
 8003bfc:	d107      	bne.n	8003c0e <_printf_common+0x52>
 8003bfe:	f104 0a19 	add.w	sl, r4, #25
 8003c02:	68e3      	ldr	r3, [r4, #12]
 8003c04:	f8d9 2000 	ldr.w	r2, [r9]
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	429d      	cmp	r5, r3
 8003c0c:	db29      	blt.n	8003c62 <_printf_common+0xa6>
 8003c0e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003c12:	6822      	ldr	r2, [r4, #0]
 8003c14:	3300      	adds	r3, #0
 8003c16:	bf18      	it	ne
 8003c18:	2301      	movne	r3, #1
 8003c1a:	0692      	lsls	r2, r2, #26
 8003c1c:	d42e      	bmi.n	8003c7c <_printf_common+0xc0>
 8003c1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c22:	4639      	mov	r1, r7
 8003c24:	4630      	mov	r0, r6
 8003c26:	47c0      	blx	r8
 8003c28:	3001      	adds	r0, #1
 8003c2a:	d021      	beq.n	8003c70 <_printf_common+0xb4>
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	68e5      	ldr	r5, [r4, #12]
 8003c30:	f8d9 2000 	ldr.w	r2, [r9]
 8003c34:	f003 0306 	and.w	r3, r3, #6
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	bf08      	it	eq
 8003c3c:	1aad      	subeq	r5, r5, r2
 8003c3e:	68a3      	ldr	r3, [r4, #8]
 8003c40:	6922      	ldr	r2, [r4, #16]
 8003c42:	bf0c      	ite	eq
 8003c44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c48:	2500      	movne	r5, #0
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	bfc4      	itt	gt
 8003c4e:	1a9b      	subgt	r3, r3, r2
 8003c50:	18ed      	addgt	r5, r5, r3
 8003c52:	f04f 0900 	mov.w	r9, #0
 8003c56:	341a      	adds	r4, #26
 8003c58:	454d      	cmp	r5, r9
 8003c5a:	d11b      	bne.n	8003c94 <_printf_common+0xd8>
 8003c5c:	2000      	movs	r0, #0
 8003c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c62:	2301      	movs	r3, #1
 8003c64:	4652      	mov	r2, sl
 8003c66:	4639      	mov	r1, r7
 8003c68:	4630      	mov	r0, r6
 8003c6a:	47c0      	blx	r8
 8003c6c:	3001      	adds	r0, #1
 8003c6e:	d103      	bne.n	8003c78 <_printf_common+0xbc>
 8003c70:	f04f 30ff 	mov.w	r0, #4294967295
 8003c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c78:	3501      	adds	r5, #1
 8003c7a:	e7c2      	b.n	8003c02 <_printf_common+0x46>
 8003c7c:	18e1      	adds	r1, r4, r3
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	2030      	movs	r0, #48	; 0x30
 8003c82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c86:	4422      	add	r2, r4
 8003c88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c90:	3302      	adds	r3, #2
 8003c92:	e7c4      	b.n	8003c1e <_printf_common+0x62>
 8003c94:	2301      	movs	r3, #1
 8003c96:	4622      	mov	r2, r4
 8003c98:	4639      	mov	r1, r7
 8003c9a:	4630      	mov	r0, r6
 8003c9c:	47c0      	blx	r8
 8003c9e:	3001      	adds	r0, #1
 8003ca0:	d0e6      	beq.n	8003c70 <_printf_common+0xb4>
 8003ca2:	f109 0901 	add.w	r9, r9, #1
 8003ca6:	e7d7      	b.n	8003c58 <_printf_common+0x9c>

08003ca8 <_printf_i>:
 8003ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003cac:	4617      	mov	r7, r2
 8003cae:	7e0a      	ldrb	r2, [r1, #24]
 8003cb0:	b085      	sub	sp, #20
 8003cb2:	2a6e      	cmp	r2, #110	; 0x6e
 8003cb4:	4698      	mov	r8, r3
 8003cb6:	4606      	mov	r6, r0
 8003cb8:	460c      	mov	r4, r1
 8003cba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003cbc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003cc0:	f000 80bc 	beq.w	8003e3c <_printf_i+0x194>
 8003cc4:	d81a      	bhi.n	8003cfc <_printf_i+0x54>
 8003cc6:	2a63      	cmp	r2, #99	; 0x63
 8003cc8:	d02e      	beq.n	8003d28 <_printf_i+0x80>
 8003cca:	d80a      	bhi.n	8003ce2 <_printf_i+0x3a>
 8003ccc:	2a00      	cmp	r2, #0
 8003cce:	f000 80c8 	beq.w	8003e62 <_printf_i+0x1ba>
 8003cd2:	2a58      	cmp	r2, #88	; 0x58
 8003cd4:	f000 808a 	beq.w	8003dec <_printf_i+0x144>
 8003cd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cdc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003ce0:	e02a      	b.n	8003d38 <_printf_i+0x90>
 8003ce2:	2a64      	cmp	r2, #100	; 0x64
 8003ce4:	d001      	beq.n	8003cea <_printf_i+0x42>
 8003ce6:	2a69      	cmp	r2, #105	; 0x69
 8003ce8:	d1f6      	bne.n	8003cd8 <_printf_i+0x30>
 8003cea:	6821      	ldr	r1, [r4, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003cf2:	d023      	beq.n	8003d3c <_printf_i+0x94>
 8003cf4:	1d11      	adds	r1, r2, #4
 8003cf6:	6019      	str	r1, [r3, #0]
 8003cf8:	6813      	ldr	r3, [r2, #0]
 8003cfa:	e027      	b.n	8003d4c <_printf_i+0xa4>
 8003cfc:	2a73      	cmp	r2, #115	; 0x73
 8003cfe:	f000 80b4 	beq.w	8003e6a <_printf_i+0x1c2>
 8003d02:	d808      	bhi.n	8003d16 <_printf_i+0x6e>
 8003d04:	2a6f      	cmp	r2, #111	; 0x6f
 8003d06:	d02a      	beq.n	8003d5e <_printf_i+0xb6>
 8003d08:	2a70      	cmp	r2, #112	; 0x70
 8003d0a:	d1e5      	bne.n	8003cd8 <_printf_i+0x30>
 8003d0c:	680a      	ldr	r2, [r1, #0]
 8003d0e:	f042 0220 	orr.w	r2, r2, #32
 8003d12:	600a      	str	r2, [r1, #0]
 8003d14:	e003      	b.n	8003d1e <_printf_i+0x76>
 8003d16:	2a75      	cmp	r2, #117	; 0x75
 8003d18:	d021      	beq.n	8003d5e <_printf_i+0xb6>
 8003d1a:	2a78      	cmp	r2, #120	; 0x78
 8003d1c:	d1dc      	bne.n	8003cd8 <_printf_i+0x30>
 8003d1e:	2278      	movs	r2, #120	; 0x78
 8003d20:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003d24:	496e      	ldr	r1, [pc, #440]	; (8003ee0 <_printf_i+0x238>)
 8003d26:	e064      	b.n	8003df2 <_printf_i+0x14a>
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003d2e:	1d11      	adds	r1, r2, #4
 8003d30:	6019      	str	r1, [r3, #0]
 8003d32:	6813      	ldr	r3, [r2, #0]
 8003d34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e0a3      	b.n	8003e84 <_printf_i+0x1dc>
 8003d3c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003d40:	f102 0104 	add.w	r1, r2, #4
 8003d44:	6019      	str	r1, [r3, #0]
 8003d46:	d0d7      	beq.n	8003cf8 <_printf_i+0x50>
 8003d48:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	da03      	bge.n	8003d58 <_printf_i+0xb0>
 8003d50:	222d      	movs	r2, #45	; 0x2d
 8003d52:	425b      	negs	r3, r3
 8003d54:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003d58:	4962      	ldr	r1, [pc, #392]	; (8003ee4 <_printf_i+0x23c>)
 8003d5a:	220a      	movs	r2, #10
 8003d5c:	e017      	b.n	8003d8e <_printf_i+0xe6>
 8003d5e:	6820      	ldr	r0, [r4, #0]
 8003d60:	6819      	ldr	r1, [r3, #0]
 8003d62:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003d66:	d003      	beq.n	8003d70 <_printf_i+0xc8>
 8003d68:	1d08      	adds	r0, r1, #4
 8003d6a:	6018      	str	r0, [r3, #0]
 8003d6c:	680b      	ldr	r3, [r1, #0]
 8003d6e:	e006      	b.n	8003d7e <_printf_i+0xd6>
 8003d70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d74:	f101 0004 	add.w	r0, r1, #4
 8003d78:	6018      	str	r0, [r3, #0]
 8003d7a:	d0f7      	beq.n	8003d6c <_printf_i+0xc4>
 8003d7c:	880b      	ldrh	r3, [r1, #0]
 8003d7e:	4959      	ldr	r1, [pc, #356]	; (8003ee4 <_printf_i+0x23c>)
 8003d80:	2a6f      	cmp	r2, #111	; 0x6f
 8003d82:	bf14      	ite	ne
 8003d84:	220a      	movne	r2, #10
 8003d86:	2208      	moveq	r2, #8
 8003d88:	2000      	movs	r0, #0
 8003d8a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003d8e:	6865      	ldr	r5, [r4, #4]
 8003d90:	60a5      	str	r5, [r4, #8]
 8003d92:	2d00      	cmp	r5, #0
 8003d94:	f2c0 809c 	blt.w	8003ed0 <_printf_i+0x228>
 8003d98:	6820      	ldr	r0, [r4, #0]
 8003d9a:	f020 0004 	bic.w	r0, r0, #4
 8003d9e:	6020      	str	r0, [r4, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d13f      	bne.n	8003e24 <_printf_i+0x17c>
 8003da4:	2d00      	cmp	r5, #0
 8003da6:	f040 8095 	bne.w	8003ed4 <_printf_i+0x22c>
 8003daa:	4675      	mov	r5, lr
 8003dac:	2a08      	cmp	r2, #8
 8003dae:	d10b      	bne.n	8003dc8 <_printf_i+0x120>
 8003db0:	6823      	ldr	r3, [r4, #0]
 8003db2:	07da      	lsls	r2, r3, #31
 8003db4:	d508      	bpl.n	8003dc8 <_printf_i+0x120>
 8003db6:	6923      	ldr	r3, [r4, #16]
 8003db8:	6862      	ldr	r2, [r4, #4]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	bfde      	ittt	le
 8003dbe:	2330      	movle	r3, #48	; 0x30
 8003dc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003dc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003dc8:	ebae 0305 	sub.w	r3, lr, r5
 8003dcc:	6123      	str	r3, [r4, #16]
 8003dce:	f8cd 8000 	str.w	r8, [sp]
 8003dd2:	463b      	mov	r3, r7
 8003dd4:	aa03      	add	r2, sp, #12
 8003dd6:	4621      	mov	r1, r4
 8003dd8:	4630      	mov	r0, r6
 8003dda:	f7ff feef 	bl	8003bbc <_printf_common>
 8003dde:	3001      	adds	r0, #1
 8003de0:	d155      	bne.n	8003e8e <_printf_i+0x1e6>
 8003de2:	f04f 30ff 	mov.w	r0, #4294967295
 8003de6:	b005      	add	sp, #20
 8003de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003dec:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003df0:	493c      	ldr	r1, [pc, #240]	; (8003ee4 <_printf_i+0x23c>)
 8003df2:	6822      	ldr	r2, [r4, #0]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003dfa:	f100 0504 	add.w	r5, r0, #4
 8003dfe:	601d      	str	r5, [r3, #0]
 8003e00:	d001      	beq.n	8003e06 <_printf_i+0x15e>
 8003e02:	6803      	ldr	r3, [r0, #0]
 8003e04:	e002      	b.n	8003e0c <_printf_i+0x164>
 8003e06:	0655      	lsls	r5, r2, #25
 8003e08:	d5fb      	bpl.n	8003e02 <_printf_i+0x15a>
 8003e0a:	8803      	ldrh	r3, [r0, #0]
 8003e0c:	07d0      	lsls	r0, r2, #31
 8003e0e:	bf44      	itt	mi
 8003e10:	f042 0220 	orrmi.w	r2, r2, #32
 8003e14:	6022      	strmi	r2, [r4, #0]
 8003e16:	b91b      	cbnz	r3, 8003e20 <_printf_i+0x178>
 8003e18:	6822      	ldr	r2, [r4, #0]
 8003e1a:	f022 0220 	bic.w	r2, r2, #32
 8003e1e:	6022      	str	r2, [r4, #0]
 8003e20:	2210      	movs	r2, #16
 8003e22:	e7b1      	b.n	8003d88 <_printf_i+0xe0>
 8003e24:	4675      	mov	r5, lr
 8003e26:	fbb3 f0f2 	udiv	r0, r3, r2
 8003e2a:	fb02 3310 	mls	r3, r2, r0, r3
 8003e2e:	5ccb      	ldrb	r3, [r1, r3]
 8003e30:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003e34:	4603      	mov	r3, r0
 8003e36:	2800      	cmp	r0, #0
 8003e38:	d1f5      	bne.n	8003e26 <_printf_i+0x17e>
 8003e3a:	e7b7      	b.n	8003dac <_printf_i+0x104>
 8003e3c:	6808      	ldr	r0, [r1, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	6949      	ldr	r1, [r1, #20]
 8003e42:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003e46:	d004      	beq.n	8003e52 <_printf_i+0x1aa>
 8003e48:	1d10      	adds	r0, r2, #4
 8003e4a:	6018      	str	r0, [r3, #0]
 8003e4c:	6813      	ldr	r3, [r2, #0]
 8003e4e:	6019      	str	r1, [r3, #0]
 8003e50:	e007      	b.n	8003e62 <_printf_i+0x1ba>
 8003e52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e56:	f102 0004 	add.w	r0, r2, #4
 8003e5a:	6018      	str	r0, [r3, #0]
 8003e5c:	6813      	ldr	r3, [r2, #0]
 8003e5e:	d0f6      	beq.n	8003e4e <_printf_i+0x1a6>
 8003e60:	8019      	strh	r1, [r3, #0]
 8003e62:	2300      	movs	r3, #0
 8003e64:	6123      	str	r3, [r4, #16]
 8003e66:	4675      	mov	r5, lr
 8003e68:	e7b1      	b.n	8003dce <_printf_i+0x126>
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	1d11      	adds	r1, r2, #4
 8003e6e:	6019      	str	r1, [r3, #0]
 8003e70:	6815      	ldr	r5, [r2, #0]
 8003e72:	6862      	ldr	r2, [r4, #4]
 8003e74:	2100      	movs	r1, #0
 8003e76:	4628      	mov	r0, r5
 8003e78:	f7fc f9d2 	bl	8000220 <memchr>
 8003e7c:	b108      	cbz	r0, 8003e82 <_printf_i+0x1da>
 8003e7e:	1b40      	subs	r0, r0, r5
 8003e80:	6060      	str	r0, [r4, #4]
 8003e82:	6863      	ldr	r3, [r4, #4]
 8003e84:	6123      	str	r3, [r4, #16]
 8003e86:	2300      	movs	r3, #0
 8003e88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e8c:	e79f      	b.n	8003dce <_printf_i+0x126>
 8003e8e:	6923      	ldr	r3, [r4, #16]
 8003e90:	462a      	mov	r2, r5
 8003e92:	4639      	mov	r1, r7
 8003e94:	4630      	mov	r0, r6
 8003e96:	47c0      	blx	r8
 8003e98:	3001      	adds	r0, #1
 8003e9a:	d0a2      	beq.n	8003de2 <_printf_i+0x13a>
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	079b      	lsls	r3, r3, #30
 8003ea0:	d507      	bpl.n	8003eb2 <_printf_i+0x20a>
 8003ea2:	2500      	movs	r5, #0
 8003ea4:	f104 0919 	add.w	r9, r4, #25
 8003ea8:	68e3      	ldr	r3, [r4, #12]
 8003eaa:	9a03      	ldr	r2, [sp, #12]
 8003eac:	1a9b      	subs	r3, r3, r2
 8003eae:	429d      	cmp	r5, r3
 8003eb0:	db05      	blt.n	8003ebe <_printf_i+0x216>
 8003eb2:	68e0      	ldr	r0, [r4, #12]
 8003eb4:	9b03      	ldr	r3, [sp, #12]
 8003eb6:	4298      	cmp	r0, r3
 8003eb8:	bfb8      	it	lt
 8003eba:	4618      	movlt	r0, r3
 8003ebc:	e793      	b.n	8003de6 <_printf_i+0x13e>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	464a      	mov	r2, r9
 8003ec2:	4639      	mov	r1, r7
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	47c0      	blx	r8
 8003ec8:	3001      	adds	r0, #1
 8003eca:	d08a      	beq.n	8003de2 <_printf_i+0x13a>
 8003ecc:	3501      	adds	r5, #1
 8003ece:	e7eb      	b.n	8003ea8 <_printf_i+0x200>
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1a7      	bne.n	8003e24 <_printf_i+0x17c>
 8003ed4:	780b      	ldrb	r3, [r1, #0]
 8003ed6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003eda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ede:	e765      	b.n	8003dac <_printf_i+0x104>
 8003ee0:	08004037 	.word	0x08004037
 8003ee4:	08004026 	.word	0x08004026

08003ee8 <memmove>:
 8003ee8:	4288      	cmp	r0, r1
 8003eea:	b510      	push	{r4, lr}
 8003eec:	eb01 0302 	add.w	r3, r1, r2
 8003ef0:	d803      	bhi.n	8003efa <memmove+0x12>
 8003ef2:	1e42      	subs	r2, r0, #1
 8003ef4:	4299      	cmp	r1, r3
 8003ef6:	d10c      	bne.n	8003f12 <memmove+0x2a>
 8003ef8:	bd10      	pop	{r4, pc}
 8003efa:	4298      	cmp	r0, r3
 8003efc:	d2f9      	bcs.n	8003ef2 <memmove+0xa>
 8003efe:	1881      	adds	r1, r0, r2
 8003f00:	1ad2      	subs	r2, r2, r3
 8003f02:	42d3      	cmn	r3, r2
 8003f04:	d100      	bne.n	8003f08 <memmove+0x20>
 8003f06:	bd10      	pop	{r4, pc}
 8003f08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f0c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003f10:	e7f7      	b.n	8003f02 <memmove+0x1a>
 8003f12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f16:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003f1a:	e7eb      	b.n	8003ef4 <memmove+0xc>

08003f1c <_realloc_r>:
 8003f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1e:	4607      	mov	r7, r0
 8003f20:	4614      	mov	r4, r2
 8003f22:	460e      	mov	r6, r1
 8003f24:	b921      	cbnz	r1, 8003f30 <_realloc_r+0x14>
 8003f26:	4611      	mov	r1, r2
 8003f28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003f2c:	f7ff bc62 	b.w	80037f4 <_malloc_r>
 8003f30:	b922      	cbnz	r2, 8003f3c <_realloc_r+0x20>
 8003f32:	f7ff fc11 	bl	8003758 <_free_r>
 8003f36:	4625      	mov	r5, r4
 8003f38:	4628      	mov	r0, r5
 8003f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f3c:	f000 f814 	bl	8003f68 <_malloc_usable_size_r>
 8003f40:	4284      	cmp	r4, r0
 8003f42:	d90f      	bls.n	8003f64 <_realloc_r+0x48>
 8003f44:	4621      	mov	r1, r4
 8003f46:	4638      	mov	r0, r7
 8003f48:	f7ff fc54 	bl	80037f4 <_malloc_r>
 8003f4c:	4605      	mov	r5, r0
 8003f4e:	2800      	cmp	r0, #0
 8003f50:	d0f2      	beq.n	8003f38 <_realloc_r+0x1c>
 8003f52:	4631      	mov	r1, r6
 8003f54:	4622      	mov	r2, r4
 8003f56:	f7ff fbeb 	bl	8003730 <memcpy>
 8003f5a:	4631      	mov	r1, r6
 8003f5c:	4638      	mov	r0, r7
 8003f5e:	f7ff fbfb 	bl	8003758 <_free_r>
 8003f62:	e7e9      	b.n	8003f38 <_realloc_r+0x1c>
 8003f64:	4635      	mov	r5, r6
 8003f66:	e7e7      	b.n	8003f38 <_realloc_r+0x1c>

08003f68 <_malloc_usable_size_r>:
 8003f68:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003f6c:	2800      	cmp	r0, #0
 8003f6e:	f1a0 0004 	sub.w	r0, r0, #4
 8003f72:	bfbc      	itt	lt
 8003f74:	580b      	ldrlt	r3, [r1, r0]
 8003f76:	18c0      	addlt	r0, r0, r3
 8003f78:	4770      	bx	lr
	...

08003f7c <_init>:
 8003f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7e:	bf00      	nop
 8003f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f82:	bc08      	pop	{r3}
 8003f84:	469e      	mov	lr, r3
 8003f86:	4770      	bx	lr

08003f88 <_fini>:
 8003f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8a:	bf00      	nop
 8003f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f8e:	bc08      	pop	{r3}
 8003f90:	469e      	mov	lr, r3
 8003f92:	4770      	bx	lr
