
Temp1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003398  08003398  00013398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003410  08003410  00013410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003418  08003418  00013418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800341c  0800341c  0001341c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  08003420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004144  20000014  08003434  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20004158  08003434  00024158  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b709  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004209  00000000  00000000  0003b74d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000aeda  00000000  00000000  0003f956  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000010a8  00000000  00000000  0004a830  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000014c0  00000000  00000000  0004b8d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008c09  00000000  00000000  0004cd98  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000067e7  00000000  00000000  000559a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005c188  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002f98  00000000  00000000  0005c204  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003380 	.word	0x08003380

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	08003380 	.word	0x08003380

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b97a 	b.w	800051c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	468c      	mov	ip, r1
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	9e08      	ldr	r6, [sp, #32]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d151      	bne.n	80002f4 <__udivmoddi4+0xb4>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d96d      	bls.n	8000332 <__udivmoddi4+0xf2>
 8000256:	fab2 fe82 	clz	lr, r2
 800025a:	f1be 0f00 	cmp.w	lr, #0
 800025e:	d00b      	beq.n	8000278 <__udivmoddi4+0x38>
 8000260:	f1ce 0c20 	rsb	ip, lr, #32
 8000264:	fa01 f50e 	lsl.w	r5, r1, lr
 8000268:	fa20 fc0c 	lsr.w	ip, r0, ip
 800026c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000270:	ea4c 0c05 	orr.w	ip, ip, r5
 8000274:	fa00 f40e 	lsl.w	r4, r0, lr
 8000278:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800027c:	0c25      	lsrs	r5, r4, #16
 800027e:	fbbc f8fa 	udiv	r8, ip, sl
 8000282:	fa1f f987 	uxth.w	r9, r7
 8000286:	fb0a cc18 	mls	ip, sl, r8, ip
 800028a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800028e:	fb08 f309 	mul.w	r3, r8, r9
 8000292:	42ab      	cmp	r3, r5
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x6c>
 8000296:	19ed      	adds	r5, r5, r7
 8000298:	f108 32ff 	add.w	r2, r8, #4294967295
 800029c:	f080 8123 	bcs.w	80004e6 <__udivmoddi4+0x2a6>
 80002a0:	42ab      	cmp	r3, r5
 80002a2:	f240 8120 	bls.w	80004e6 <__udivmoddi4+0x2a6>
 80002a6:	f1a8 0802 	sub.w	r8, r8, #2
 80002aa:	443d      	add	r5, r7
 80002ac:	1aed      	subs	r5, r5, r3
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002b4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002bc:	fb00 f909 	mul.w	r9, r0, r9
 80002c0:	45a1      	cmp	r9, r4
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x98>
 80002c4:	19e4      	adds	r4, r4, r7
 80002c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ca:	f080 810a 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80002ce:	45a1      	cmp	r9, r4
 80002d0:	f240 8107 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80002d4:	3802      	subs	r0, #2
 80002d6:	443c      	add	r4, r7
 80002d8:	eba4 0409 	sub.w	r4, r4, r9
 80002dc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002e0:	2100      	movs	r1, #0
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d061      	beq.n	80003aa <__udivmoddi4+0x16a>
 80002e6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ea:	2300      	movs	r3, #0
 80002ec:	6034      	str	r4, [r6, #0]
 80002ee:	6073      	str	r3, [r6, #4]
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0xc8>
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d054      	beq.n	80003a6 <__udivmoddi4+0x166>
 80002fc:	2100      	movs	r1, #0
 80002fe:	e886 0021 	stmia.w	r6, {r0, r5}
 8000302:	4608      	mov	r0, r1
 8000304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000308:	fab3 f183 	clz	r1, r3
 800030c:	2900      	cmp	r1, #0
 800030e:	f040 808e 	bne.w	800042e <__udivmoddi4+0x1ee>
 8000312:	42ab      	cmp	r3, r5
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xdc>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80fa 	bhi.w	8000510 <__udivmoddi4+0x2d0>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb65 0503 	sbc.w	r5, r5, r3
 8000322:	2001      	movs	r0, #1
 8000324:	46ac      	mov	ip, r5
 8000326:	2e00      	cmp	r6, #0
 8000328:	d03f      	beq.n	80003aa <__udivmoddi4+0x16a>
 800032a:	e886 1010 	stmia.w	r6, {r4, ip}
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	b912      	cbnz	r2, 800033a <__udivmoddi4+0xfa>
 8000334:	2701      	movs	r7, #1
 8000336:	fbb7 f7f2 	udiv	r7, r7, r2
 800033a:	fab7 fe87 	clz	lr, r7
 800033e:	f1be 0f00 	cmp.w	lr, #0
 8000342:	d134      	bne.n	80003ae <__udivmoddi4+0x16e>
 8000344:	1beb      	subs	r3, r5, r7
 8000346:	0c3a      	lsrs	r2, r7, #16
 8000348:	fa1f fc87 	uxth.w	ip, r7
 800034c:	2101      	movs	r1, #1
 800034e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000352:	0c25      	lsrs	r5, r4, #16
 8000354:	fb02 3318 	mls	r3, r2, r8, r3
 8000358:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800035c:	fb0c f308 	mul.w	r3, ip, r8
 8000360:	42ab      	cmp	r3, r5
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x134>
 8000364:	19ed      	adds	r5, r5, r7
 8000366:	f108 30ff 	add.w	r0, r8, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x132>
 800036c:	42ab      	cmp	r3, r5
 800036e:	f200 80d1 	bhi.w	8000514 <__udivmoddi4+0x2d4>
 8000372:	4680      	mov	r8, r0
 8000374:	1aed      	subs	r5, r5, r3
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb5 f0f2 	udiv	r0, r5, r2
 800037c:	fb02 5510 	mls	r5, r2, r0, r5
 8000380:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000384:	fb0c fc00 	mul.w	ip, ip, r0
 8000388:	45a4      	cmp	ip, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x15c>
 800038c:	19e4      	adds	r4, r4, r7
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x15a>
 8000394:	45a4      	cmp	ip, r4
 8000396:	f200 80b8 	bhi.w	800050a <__udivmoddi4+0x2ca>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 040c 	sub.w	r4, r4, ip
 80003a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a4:	e79d      	b.n	80002e2 <__udivmoddi4+0xa2>
 80003a6:	4631      	mov	r1, r6
 80003a8:	4630      	mov	r0, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	f1ce 0420 	rsb	r4, lr, #32
 80003b2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003b6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ba:	fa20 f804 	lsr.w	r8, r0, r4
 80003be:	0c3a      	lsrs	r2, r7, #16
 80003c0:	fa25 f404 	lsr.w	r4, r5, r4
 80003c4:	ea48 0803 	orr.w	r8, r8, r3
 80003c8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003cc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003d0:	fb02 4411 	mls	r4, r2, r1, r4
 80003d4:	fa1f fc87 	uxth.w	ip, r7
 80003d8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003dc:	fb01 f30c 	mul.w	r3, r1, ip
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x1bc>
 80003e8:	19ed      	adds	r5, r5, r7
 80003ea:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ee:	f080 808a 	bcs.w	8000506 <__udivmoddi4+0x2c6>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	f240 8087 	bls.w	8000506 <__udivmoddi4+0x2c6>
 80003f8:	3902      	subs	r1, #2
 80003fa:	443d      	add	r5, r7
 80003fc:	1aeb      	subs	r3, r5, r3
 80003fe:	fa1f f588 	uxth.w	r5, r8
 8000402:	fbb3 f0f2 	udiv	r0, r3, r2
 8000406:	fb02 3310 	mls	r3, r2, r0, r3
 800040a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800040e:	fb00 f30c 	mul.w	r3, r0, ip
 8000412:	42ab      	cmp	r3, r5
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x1e6>
 8000416:	19ed      	adds	r5, r5, r7
 8000418:	f100 38ff 	add.w	r8, r0, #4294967295
 800041c:	d26f      	bcs.n	80004fe <__udivmoddi4+0x2be>
 800041e:	42ab      	cmp	r3, r5
 8000420:	d96d      	bls.n	80004fe <__udivmoddi4+0x2be>
 8000422:	3802      	subs	r0, #2
 8000424:	443d      	add	r5, r7
 8000426:	1aeb      	subs	r3, r5, r3
 8000428:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042c:	e78f      	b.n	800034e <__udivmoddi4+0x10e>
 800042e:	f1c1 0720 	rsb	r7, r1, #32
 8000432:	fa22 f807 	lsr.w	r8, r2, r7
 8000436:	408b      	lsls	r3, r1
 8000438:	fa05 f401 	lsl.w	r4, r5, r1
 800043c:	ea48 0303 	orr.w	r3, r8, r3
 8000440:	fa20 fe07 	lsr.w	lr, r0, r7
 8000444:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000448:	40fd      	lsrs	r5, r7
 800044a:	ea4e 0e04 	orr.w	lr, lr, r4
 800044e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000452:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000456:	fb0c 5519 	mls	r5, ip, r9, r5
 800045a:	fa1f f883 	uxth.w	r8, r3
 800045e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000462:	fb09 f408 	mul.w	r4, r9, r8
 8000466:	42ac      	cmp	r4, r5
 8000468:	fa02 f201 	lsl.w	r2, r2, r1
 800046c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x244>
 8000472:	18ed      	adds	r5, r5, r3
 8000474:	f109 30ff 	add.w	r0, r9, #4294967295
 8000478:	d243      	bcs.n	8000502 <__udivmoddi4+0x2c2>
 800047a:	42ac      	cmp	r4, r5
 800047c:	d941      	bls.n	8000502 <__udivmoddi4+0x2c2>
 800047e:	f1a9 0902 	sub.w	r9, r9, #2
 8000482:	441d      	add	r5, r3
 8000484:	1b2d      	subs	r5, r5, r4
 8000486:	fa1f fe8e 	uxth.w	lr, lr
 800048a:	fbb5 f0fc 	udiv	r0, r5, ip
 800048e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000492:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000496:	fb00 f808 	mul.w	r8, r0, r8
 800049a:	45a0      	cmp	r8, r4
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x26e>
 800049e:	18e4      	adds	r4, r4, r3
 80004a0:	f100 35ff 	add.w	r5, r0, #4294967295
 80004a4:	d229      	bcs.n	80004fa <__udivmoddi4+0x2ba>
 80004a6:	45a0      	cmp	r8, r4
 80004a8:	d927      	bls.n	80004fa <__udivmoddi4+0x2ba>
 80004aa:	3802      	subs	r0, #2
 80004ac:	441c      	add	r4, r3
 80004ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b2:	eba4 0408 	sub.w	r4, r4, r8
 80004b6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ba:	454c      	cmp	r4, r9
 80004bc:	46c6      	mov	lr, r8
 80004be:	464d      	mov	r5, r9
 80004c0:	d315      	bcc.n	80004ee <__udivmoddi4+0x2ae>
 80004c2:	d012      	beq.n	80004ea <__udivmoddi4+0x2aa>
 80004c4:	b156      	cbz	r6, 80004dc <__udivmoddi4+0x29c>
 80004c6:	ebba 030e 	subs.w	r3, sl, lr
 80004ca:	eb64 0405 	sbc.w	r4, r4, r5
 80004ce:	fa04 f707 	lsl.w	r7, r4, r7
 80004d2:	40cb      	lsrs	r3, r1
 80004d4:	431f      	orrs	r7, r3
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	6037      	str	r7, [r6, #0]
 80004da:	6074      	str	r4, [r6, #4]
 80004dc:	2100      	movs	r1, #0
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	4618      	mov	r0, r3
 80004e4:	e6f8      	b.n	80002d8 <__udivmoddi4+0x98>
 80004e6:	4690      	mov	r8, r2
 80004e8:	e6e0      	b.n	80002ac <__udivmoddi4+0x6c>
 80004ea:	45c2      	cmp	sl, r8
 80004ec:	d2ea      	bcs.n	80004c4 <__udivmoddi4+0x284>
 80004ee:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f2:	eb69 0503 	sbc.w	r5, r9, r3
 80004f6:	3801      	subs	r0, #1
 80004f8:	e7e4      	b.n	80004c4 <__udivmoddi4+0x284>
 80004fa:	4628      	mov	r0, r5
 80004fc:	e7d7      	b.n	80004ae <__udivmoddi4+0x26e>
 80004fe:	4640      	mov	r0, r8
 8000500:	e791      	b.n	8000426 <__udivmoddi4+0x1e6>
 8000502:	4681      	mov	r9, r0
 8000504:	e7be      	b.n	8000484 <__udivmoddi4+0x244>
 8000506:	4601      	mov	r1, r0
 8000508:	e778      	b.n	80003fc <__udivmoddi4+0x1bc>
 800050a:	3802      	subs	r0, #2
 800050c:	443c      	add	r4, r7
 800050e:	e745      	b.n	800039c <__udivmoddi4+0x15c>
 8000510:	4608      	mov	r0, r1
 8000512:	e708      	b.n	8000326 <__udivmoddi4+0xe6>
 8000514:	f1a8 0802 	sub.w	r8, r8, #2
 8000518:	443d      	add	r5, r7
 800051a:	e72b      	b.n	8000374 <__udivmoddi4+0x134>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000520:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x30>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000532:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800053a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f809 	bl	8000554 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f002 f9d6 	bl	80028f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f002 f93c 	bl	80027c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800054c:	2000      	movs	r0, #0
 800054e:	bd08      	pop	{r3, pc}
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000554:	4a07      	ldr	r2, [pc, #28]	; (8000574 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000556:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000558:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800055c:	041b      	lsls	r3, r3, #16
 800055e:	0c1b      	lsrs	r3, r3, #16
 8000560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000564:	0200      	lsls	r0, r0, #8
 8000566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800056e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000570:	60d3      	str	r3, [r2, #12]
 8000572:	4770      	bx	lr
 8000574:	e000ed00 	.word	0xe000ed00

08000578 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000578:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	68dc      	ldr	r4, [r3, #12]
 800057e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000582:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000586:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000588:	2b04      	cmp	r3, #4
 800058a:	bf28      	it	cs
 800058c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800058e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000590:	f04f 0501 	mov.w	r5, #1
 8000594:	fa05 f303 	lsl.w	r3, r5, r3
 8000598:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059c:	bf8c      	ite	hi
 800059e:	3c03      	subhi	r4, #3
 80005a0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a2:	4019      	ands	r1, r3
 80005a4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005a6:	fa05 f404 	lsl.w	r4, r5, r4
 80005aa:	3c01      	subs	r4, #1
 80005ac:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005ae:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b0:	ea42 0201 	orr.w	r2, r2, r1
 80005b4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b8:	bfad      	iteet	ge
 80005ba:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005be:	f000 000f 	andlt.w	r0, r0, #15
 80005c2:	4b06      	ldrlt	r3, [pc, #24]	; (80005dc <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c8:	bfb5      	itete	lt
 80005ca:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005cc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ce:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005d4:	bd30      	pop	{r4, r5, pc}
 80005d6:	bf00      	nop
 80005d8:	e000ed00 	.word	0xe000ed00
 80005dc:	e000ed14 	.word	0xe000ed14

080005e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80005e0:	2800      	cmp	r0, #0
 80005e2:	db08      	blt.n	80005f6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005e4:	0942      	lsrs	r2, r0, #5
 80005e6:	2301      	movs	r3, #1
 80005e8:	f000 001f 	and.w	r0, r0, #31
 80005ec:	fa03 f000 	lsl.w	r0, r3, r0
 80005f0:	4b01      	ldr	r3, [pc, #4]	; (80005f8 <HAL_NVIC_EnableIRQ+0x18>)
 80005f2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100

080005fc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80005fc:	6803      	ldr	r3, [r0, #0]
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000604:	f023 0303 	bic.w	r3, r3, #3
 8000608:	2118      	movs	r1, #24
 800060a:	3a10      	subs	r2, #16
 800060c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000610:	4904      	ldr	r1, [pc, #16]	; (8000624 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000612:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000614:	bf88      	it	hi
 8000616:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000618:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800061a:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800061c:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 800061e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	080033d0 	.word	0x080033d0

08000628 <HAL_DMA_Init>:
{
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800062c:	f002 fa36 	bl	8002a9c <HAL_GetTick>
 8000630:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000632:	2c00      	cmp	r4, #0
 8000634:	d071      	beq.n	800071a <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000636:	2300      	movs	r3, #0
 8000638:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800063c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800063e:	2302      	movs	r3, #2
 8000640:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000644:	6813      	ldr	r3, [r2, #0]
 8000646:	f023 0301 	bic.w	r3, r3, #1
 800064a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800064c:	6821      	ldr	r1, [r4, #0]
 800064e:	680b      	ldr	r3, [r1, #0]
 8000650:	07d8      	lsls	r0, r3, #31
 8000652:	d43c      	bmi.n	80006ce <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000654:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000656:	4d32      	ldr	r5, [pc, #200]	; (8000720 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000658:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800065a:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800065c:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800065e:	68a3      	ldr	r3, [r4, #8]
 8000660:	4313      	orrs	r3, r2
 8000662:	68e2      	ldr	r2, [r4, #12]
 8000664:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000666:	6922      	ldr	r2, [r4, #16]
 8000668:	4313      	orrs	r3, r2
 800066a:	6962      	ldr	r2, [r4, #20]
 800066c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800066e:	69e2      	ldr	r2, [r4, #28]
 8000670:	4303      	orrs	r3, r0
 8000672:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000674:	6a22      	ldr	r2, [r4, #32]
 8000676:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000678:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800067a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800067c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000680:	bf01      	itttt	eq
 8000682:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000684:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8000686:	4335      	orreq	r5, r6
 8000688:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 800068a:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 800068c:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800068e:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000690:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000694:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000698:	d10b      	bne.n	80006b2 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 800069a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800069c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800069e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80006a0:	b13d      	cbz	r5, 80006b2 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80006a2:	b9f8      	cbnz	r0, 80006e4 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 80006a4:	2a01      	cmp	r2, #1
 80006a6:	d02d      	beq.n	8000704 <HAL_DMA_Init+0xdc>
 80006a8:	d301      	bcc.n	80006ae <HAL_DMA_Init+0x86>
 80006aa:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80006ac:	d101      	bne.n	80006b2 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80006ae:	01ea      	lsls	r2, r5, #7
 80006b0:	d42b      	bmi.n	800070a <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 80006b2:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80006b4:	4620      	mov	r0, r4
 80006b6:	f7ff ffa1 	bl	80005fc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80006ba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80006bc:	233f      	movs	r3, #63	; 0x3f
 80006be:	4093      	lsls	r3, r2
 80006c0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80006c2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80006c4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80006c6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80006c8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80006ce:	f002 f9e5 	bl	8002a9c <HAL_GetTick>
 80006d2:	1b40      	subs	r0, r0, r5
 80006d4:	2805      	cmp	r0, #5
 80006d6:	d9b9      	bls.n	800064c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80006d8:	2320      	movs	r3, #32
 80006da:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80006dc:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 80006de:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80006e4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80006e8:	d113      	bne.n	8000712 <HAL_DMA_Init+0xea>
    switch (tmp)
 80006ea:	2a03      	cmp	r2, #3
 80006ec:	d8e1      	bhi.n	80006b2 <HAL_DMA_Init+0x8a>
 80006ee:	a001      	add	r0, pc, #4	; (adr r0, 80006f4 <HAL_DMA_Init+0xcc>)
 80006f0:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80006f4:	0800070b 	.word	0x0800070b
 80006f8:	080006af 	.word	0x080006af
 80006fc:	0800070b 	.word	0x0800070b
 8000700:	08000705 	.word	0x08000705
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000704:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000708:	d1d3      	bne.n	80006b2 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800070a:	2340      	movs	r3, #64	; 0x40
 800070c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800070e:	2001      	movs	r0, #1
 8000710:	e7e5      	b.n	80006de <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000712:	2a02      	cmp	r2, #2
 8000714:	d9f9      	bls.n	800070a <HAL_DMA_Init+0xe2>
 8000716:	2a03      	cmp	r2, #3
 8000718:	e7c8      	b.n	80006ac <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800071a:	2001      	movs	r0, #1
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	bf00      	nop
 8000720:	f010803f 	.word	0xf010803f

08000724 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000724:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000728:	2b02      	cmp	r3, #2
 800072a:	d003      	beq.n	8000734 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800072c:	2380      	movs	r3, #128	; 0x80
 800072e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000730:	2001      	movs	r0, #1
 8000732:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8000734:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000736:	2305      	movs	r3, #5
 8000738:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800073c:	6813      	ldr	r3, [r2, #0]
 800073e:	f023 0301 	bic.w	r3, r3, #1
 8000742:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000744:	2000      	movs	r0, #0
}
 8000746:	4770      	bx	lr

08000748 <HAL_DMA_IRQHandler>:
{
 8000748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800074a:	2300      	movs	r3, #0
 800074c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800074e:	4b5a      	ldr	r3, [pc, #360]	; (80008b8 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000750:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8000752:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000754:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000756:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000758:	2208      	movs	r2, #8
 800075a:	409a      	lsls	r2, r3
 800075c:	4216      	tst	r6, r2
{
 800075e:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000760:	d00c      	beq.n	800077c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000762:	6801      	ldr	r1, [r0, #0]
 8000764:	6808      	ldr	r0, [r1, #0]
 8000766:	0740      	lsls	r0, r0, #29
 8000768:	d508      	bpl.n	800077c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800076a:	6808      	ldr	r0, [r1, #0]
 800076c:	f020 0004 	bic.w	r0, r0, #4
 8000770:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000772:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000774:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000776:	f042 0201 	orr.w	r2, r2, #1
 800077a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800077c:	2201      	movs	r2, #1
 800077e:	409a      	lsls	r2, r3
 8000780:	4216      	tst	r6, r2
 8000782:	d008      	beq.n	8000796 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000784:	6821      	ldr	r1, [r4, #0]
 8000786:	6949      	ldr	r1, [r1, #20]
 8000788:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800078a:	bf41      	itttt	mi
 800078c:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800078e:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000790:	f042 0202 	orrmi.w	r2, r2, #2
 8000794:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000796:	2204      	movs	r2, #4
 8000798:	409a      	lsls	r2, r3
 800079a:	4216      	tst	r6, r2
 800079c:	d008      	beq.n	80007b0 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800079e:	6821      	ldr	r1, [r4, #0]
 80007a0:	6809      	ldr	r1, [r1, #0]
 80007a2:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80007a4:	bf41      	itttt	mi
 80007a6:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80007a8:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80007aa:	f042 0204 	orrmi.w	r2, r2, #4
 80007ae:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80007b0:	2210      	movs	r2, #16
 80007b2:	409a      	lsls	r2, r3
 80007b4:	4216      	tst	r6, r2
 80007b6:	d010      	beq.n	80007da <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80007b8:	6823      	ldr	r3, [r4, #0]
 80007ba:	6819      	ldr	r1, [r3, #0]
 80007bc:	0709      	lsls	r1, r1, #28
 80007be:	d50c      	bpl.n	80007da <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80007c0:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	0350      	lsls	r0, r2, #13
 80007c6:	d535      	bpl.n	8000834 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	0319      	lsls	r1, r3, #12
 80007cc:	d401      	bmi.n	80007d2 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80007ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007d0:	e000      	b.n	80007d4 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80007d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80007d4:	b10b      	cbz	r3, 80007da <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80007d6:	4620      	mov	r0, r4
 80007d8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80007da:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80007dc:	2220      	movs	r2, #32
 80007de:	408a      	lsls	r2, r1
 80007e0:	4216      	tst	r6, r2
 80007e2:	d038      	beq.n	8000856 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80007e4:	6823      	ldr	r3, [r4, #0]
 80007e6:	6818      	ldr	r0, [r3, #0]
 80007e8:	06c6      	lsls	r6, r0, #27
 80007ea:	d534      	bpl.n	8000856 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80007ec:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80007ee:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80007f2:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80007f4:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80007f6:	d125      	bne.n	8000844 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80007f8:	f022 0216 	bic.w	r2, r2, #22
 80007fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80007fe:	695a      	ldr	r2, [r3, #20]
 8000800:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000804:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000806:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000808:	b90a      	cbnz	r2, 800080e <HAL_DMA_IRQHandler+0xc6>
 800080a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800080c:	b11a      	cbz	r2, 8000816 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	f022 0208 	bic.w	r2, r2, #8
 8000814:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000816:	233f      	movs	r3, #63	; 0x3f
 8000818:	408b      	lsls	r3, r1
 800081a:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 800081c:	2300      	movs	r3, #0
 800081e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000822:	2301      	movs	r3, #1
 8000824:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000828:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800082a:	b10b      	cbz	r3, 8000830 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 800082c:	4620      	mov	r0, r4
 800082e:	4798      	blx	r3
}
 8000830:	b003      	add	sp, #12
 8000832:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000838:	bf5e      	ittt	pl
 800083a:	681a      	ldrpl	r2, [r3, #0]
 800083c:	f022 0208 	bicpl.w	r2, r2, #8
 8000840:	601a      	strpl	r2, [r3, #0]
 8000842:	e7c4      	b.n	80007ce <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000844:	0350      	lsls	r0, r2, #13
 8000846:	d528      	bpl.n	800089a <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	0319      	lsls	r1, r3, #12
 800084c:	d432      	bmi.n	80008b4 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 800084e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000850:	b10b      	cbz	r3, 8000856 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000852:	4620      	mov	r0, r4
 8000854:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000856:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000858:	2b00      	cmp	r3, #0
 800085a:	d0e9      	beq.n	8000830 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800085c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800085e:	07da      	lsls	r2, r3, #31
 8000860:	d519      	bpl.n	8000896 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000862:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000864:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000866:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800086a:	6813      	ldr	r3, [r2, #0]
 800086c:	f023 0301 	bic.w	r3, r3, #1
 8000870:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000872:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000876:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 800087a:	9b01      	ldr	r3, [sp, #4]
 800087c:	3301      	adds	r3, #1
 800087e:	429f      	cmp	r7, r3
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	d302      	bcc.n	800088a <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000884:	6813      	ldr	r3, [r2, #0]
 8000886:	07db      	lsls	r3, r3, #31
 8000888:	d4f7      	bmi.n	800087a <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 800088a:	2300      	movs	r3, #0
 800088c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000890:	2301      	movs	r3, #1
 8000892:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000896:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000898:	e7c7      	b.n	800082a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80008a0:	d108      	bne.n	80008b4 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80008a2:	6819      	ldr	r1, [r3, #0]
 80008a4:	f021 0110 	bic.w	r1, r1, #16
 80008a8:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80008aa:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80008ac:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80008b0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80008b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80008b6:	e7cb      	b.n	8000850 <HAL_DMA_IRQHandler+0x108>
 80008b8:	20000010 	.word	0x20000010

080008bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008c0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008c2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c4:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000a68 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80008c8:	4a65      	ldr	r2, [pc, #404]	; (8000a60 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008ca:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000a6c <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008ce:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008d0:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80008d2:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008d6:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80008d8:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008dc:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80008e0:	45b6      	cmp	lr, r6
 80008e2:	f040 80aa 	bne.w	8000a3a <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e6:	684c      	ldr	r4, [r1, #4]
 80008e8:	f024 0710 	bic.w	r7, r4, #16
 80008ec:	2f02      	cmp	r7, #2
 80008ee:	d116      	bne.n	800091e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80008f0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80008f4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008f8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80008fc:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000900:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000904:	f04f 0c0f 	mov.w	ip, #15
 8000908:	fa0c fc0b 	lsl.w	ip, ip, fp
 800090c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000910:	690d      	ldr	r5, [r1, #16]
 8000912:	fa05 f50b 	lsl.w	r5, r5, fp
 8000916:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800091a:	f8ca 5020 	str.w	r5, [sl, #32]
 800091e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000922:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000924:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000928:	fa05 f50a 	lsl.w	r5, r5, sl
 800092c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800092e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000932:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000936:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800093a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800093c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000940:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000942:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000946:	d811      	bhi.n	800096c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000948:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800094a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800094e:	68cf      	ldr	r7, [r1, #12]
 8000950:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000954:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000958:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800095a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800095c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000960:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000964:	409f      	lsls	r7, r3
 8000966:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800096a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800096c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800096e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000970:	688f      	ldr	r7, [r1, #8]
 8000972:	fa07 f70a 	lsl.w	r7, r7, sl
 8000976:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000978:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800097a:	00e5      	lsls	r5, r4, #3
 800097c:	d55d      	bpl.n	8000a3a <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	f04f 0b00 	mov.w	fp, #0
 8000982:	f8cd b00c 	str.w	fp, [sp, #12]
 8000986:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800098a:	4d36      	ldr	r5, [pc, #216]	; (8000a64 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000990:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000994:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000998:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800099c:	9703      	str	r7, [sp, #12]
 800099e:	9f03      	ldr	r7, [sp, #12]
 80009a0:	f023 0703 	bic.w	r7, r3, #3
 80009a4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80009a8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009ac:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80009b0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009b4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80009b8:	f04f 0e0f 	mov.w	lr, #15
 80009bc:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009c0:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009c2:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009c6:	d03f      	beq.n	8000a48 <HAL_GPIO_Init+0x18c>
 80009c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80009cc:	42a8      	cmp	r0, r5
 80009ce:	d03d      	beq.n	8000a4c <HAL_GPIO_Init+0x190>
 80009d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80009d4:	42a8      	cmp	r0, r5
 80009d6:	d03b      	beq.n	8000a50 <HAL_GPIO_Init+0x194>
 80009d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80009dc:	42a8      	cmp	r0, r5
 80009de:	d039      	beq.n	8000a54 <HAL_GPIO_Init+0x198>
 80009e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80009e4:	42a8      	cmp	r0, r5
 80009e6:	d037      	beq.n	8000a58 <HAL_GPIO_Init+0x19c>
 80009e8:	4548      	cmp	r0, r9
 80009ea:	d037      	beq.n	8000a5c <HAL_GPIO_Init+0x1a0>
 80009ec:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80009f0:	42a8      	cmp	r0, r5
 80009f2:	bf14      	ite	ne
 80009f4:	2507      	movne	r5, #7
 80009f6:	2506      	moveq	r5, #6
 80009f8:	fa05 f50c 	lsl.w	r5, r5, ip
 80009fc:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a00:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000a02:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000a04:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a06:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000a0a:	bf0c      	ite	eq
 8000a0c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000a0e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000a10:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000a12:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a14:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000a18:	bf0c      	ite	eq
 8000a1a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000a1c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000a1e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a20:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a22:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000a26:	bf0c      	ite	eq
 8000a28:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000a2a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000a2c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000a2e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a30:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000a32:	bf54      	ite	pl
 8000a34:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000a36:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000a38:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	2b10      	cmp	r3, #16
 8000a3e:	f47f af48 	bne.w	80008d2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000a42:	b005      	add	sp, #20
 8000a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a48:	465d      	mov	r5, fp
 8000a4a:	e7d5      	b.n	80009f8 <HAL_GPIO_Init+0x13c>
 8000a4c:	2501      	movs	r5, #1
 8000a4e:	e7d3      	b.n	80009f8 <HAL_GPIO_Init+0x13c>
 8000a50:	2502      	movs	r5, #2
 8000a52:	e7d1      	b.n	80009f8 <HAL_GPIO_Init+0x13c>
 8000a54:	2503      	movs	r5, #3
 8000a56:	e7cf      	b.n	80009f8 <HAL_GPIO_Init+0x13c>
 8000a58:	2504      	movs	r5, #4
 8000a5a:	e7cd      	b.n	80009f8 <HAL_GPIO_Init+0x13c>
 8000a5c:	2505      	movs	r5, #5
 8000a5e:	e7cb      	b.n	80009f8 <HAL_GPIO_Init+0x13c>
 8000a60:	40013c00 	.word	0x40013c00
 8000a64:	40020000 	.word	0x40020000
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40021400 	.word	0x40021400

08000a70 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a70:	b10a      	cbz	r2, 8000a76 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a72:	6181      	str	r1, [r0, #24]
 8000a74:	4770      	bx	lr
 8000a76:	0409      	lsls	r1, r1, #16
 8000a78:	e7fb      	b.n	8000a72 <HAL_GPIO_WritePin+0x2>
	...

08000a7c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	9301      	str	r3, [sp, #4]
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000a84:	4c18      	ldr	r4, [pc, #96]	; (8000ae8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a8c:	641a      	str	r2, [r3, #64]	; 0x40
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a94:	9301      	str	r3, [sp, #4]
 8000a96:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <HAL_PWREx_EnableOverDrive+0x70>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000a9e:	f001 fffd 	bl	8002a9c <HAL_GetTick>
 8000aa2:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000aa4:	6863      	ldr	r3, [r4, #4]
 8000aa6:	03da      	lsls	r2, r3, #15
 8000aa8:	d50b      	bpl.n	8000ac2 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000aac:	4c0e      	ldr	r4, [pc, #56]	; (8000ae8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000aae:	2201      	movs	r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000ab2:	f001 fff3 	bl	8002a9c <HAL_GetTick>
 8000ab6:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ab8:	6863      	ldr	r3, [r4, #4]
 8000aba:	039b      	lsls	r3, r3, #14
 8000abc:	d50a      	bpl.n	8000ad4 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000abe:	2000      	movs	r0, #0
 8000ac0:	e006      	b.n	8000ad0 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ac2:	f001 ffeb 	bl	8002a9c <HAL_GetTick>
 8000ac6:	1b40      	subs	r0, r0, r5
 8000ac8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000acc:	d9ea      	bls.n	8000aa4 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8000ace:	2003      	movs	r0, #3
}
 8000ad0:	b003      	add	sp, #12
 8000ad2:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ad4:	f001 ffe2 	bl	8002a9c <HAL_GetTick>
 8000ad8:	1b40      	subs	r0, r0, r5
 8000ada:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000ade:	d9eb      	bls.n	8000ab8 <HAL_PWREx_EnableOverDrive+0x3c>
 8000ae0:	e7f5      	b.n	8000ace <HAL_PWREx_EnableOverDrive+0x52>
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40007000 	.word	0x40007000
 8000aec:	420e0040 	.word	0x420e0040
 8000af0:	420e0044 	.word	0x420e0044

08000af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000af8:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000afa:	4604      	mov	r4, r0
 8000afc:	b910      	cbnz	r0, 8000b04 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8000afe:	2001      	movs	r0, #1
 8000b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b04:	4b44      	ldr	r3, [pc, #272]	; (8000c18 <HAL_RCC_ClockConfig+0x124>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	f002 020f 	and.w	r2, r2, #15
 8000b0c:	428a      	cmp	r2, r1
 8000b0e:	d328      	bcc.n	8000b62 <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b10:	6821      	ldr	r1, [r4, #0]
 8000b12:	078f      	lsls	r7, r1, #30
 8000b14:	d42d      	bmi.n	8000b72 <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b16:	07c8      	lsls	r0, r1, #31
 8000b18:	d440      	bmi.n	8000b9c <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b1a:	4b3f      	ldr	r3, [pc, #252]	; (8000c18 <HAL_RCC_ClockConfig+0x124>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	f002 020f 	and.w	r2, r2, #15
 8000b22:	4295      	cmp	r5, r2
 8000b24:	d366      	bcc.n	8000bf4 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b26:	6822      	ldr	r2, [r4, #0]
 8000b28:	0751      	lsls	r1, r2, #29
 8000b2a:	d46c      	bmi.n	8000c06 <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b2c:	0713      	lsls	r3, r2, #28
 8000b2e:	d507      	bpl.n	8000b40 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000b30:	4a3a      	ldr	r2, [pc, #232]	; (8000c1c <HAL_RCC_ClockConfig+0x128>)
 8000b32:	6921      	ldr	r1, [r4, #16]
 8000b34:	6893      	ldr	r3, [r2, #8]
 8000b36:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000b3a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000b3e:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000b40:	f000 f8b6 	bl	8000cb0 <HAL_RCC_GetSysClockFreq>
 8000b44:	4b35      	ldr	r3, [pc, #212]	; (8000c1c <HAL_RCC_ClockConfig+0x128>)
 8000b46:	4a36      	ldr	r2, [pc, #216]	; (8000c20 <HAL_RCC_ClockConfig+0x12c>)
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000b4e:	5cd3      	ldrb	r3, [r2, r3]
 8000b50:	40d8      	lsrs	r0, r3
 8000b52:	4b34      	ldr	r3, [pc, #208]	; (8000c24 <HAL_RCC_ClockConfig+0x130>)
 8000b54:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b56:	2000      	movs	r0, #0
 8000b58:	f001 fecc 	bl	80028f4 <HAL_InitTick>

  return HAL_OK;
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b62:	b2ca      	uxtb	r2, r1
 8000b64:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f003 030f 	and.w	r3, r3, #15
 8000b6c:	4299      	cmp	r1, r3
 8000b6e:	d1c6      	bne.n	8000afe <HAL_RCC_ClockConfig+0xa>
 8000b70:	e7ce      	b.n	8000b10 <HAL_RCC_ClockConfig+0x1c>
 8000b72:	4b2a      	ldr	r3, [pc, #168]	; (8000c1c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b74:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000b78:	bf1e      	ittt	ne
 8000b7a:	689a      	ldrne	r2, [r3, #8]
 8000b7c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000b80:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b82:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000b84:	bf42      	ittt	mi
 8000b86:	689a      	ldrmi	r2, [r3, #8]
 8000b88:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000b8c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b8e:	689a      	ldr	r2, [r3, #8]
 8000b90:	68a0      	ldr	r0, [r4, #8]
 8000b92:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000b96:	4302      	orrs	r2, r0
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	e7bc      	b.n	8000b16 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b9c:	6862      	ldr	r2, [r4, #4]
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <HAL_RCC_ClockConfig+0x128>)
 8000ba0:	2a01      	cmp	r2, #1
 8000ba2:	d11d      	bne.n	8000be0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000baa:	d0a8      	beq.n	8000afe <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bac:	4e1b      	ldr	r6, [pc, #108]	; (8000c1c <HAL_RCC_ClockConfig+0x128>)
 8000bae:	68b3      	ldr	r3, [r6, #8]
 8000bb0:	f023 0303 	bic.w	r3, r3, #3
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000bb8:	f001 ff70 	bl	8002a9c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bbc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000bc0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000bc2:	68b3      	ldr	r3, [r6, #8]
 8000bc4:	6862      	ldr	r2, [r4, #4]
 8000bc6:	f003 030c 	and.w	r3, r3, #12
 8000bca:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000bce:	d0a4      	beq.n	8000b1a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bd0:	f001 ff64 	bl	8002a9c <HAL_GetTick>
 8000bd4:	1bc0      	subs	r0, r0, r7
 8000bd6:	4540      	cmp	r0, r8
 8000bd8:	d9f3      	bls.n	8000bc2 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000bda:	2003      	movs	r0, #3
}
 8000bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000be0:	1e91      	subs	r1, r2, #2
 8000be2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000be4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000be6:	d802      	bhi.n	8000bee <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000be8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000bec:	e7dd      	b.n	8000baa <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bee:	f013 0f02 	tst.w	r3, #2
 8000bf2:	e7da      	b.n	8000baa <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bf4:	b2ea      	uxtb	r2, r5
 8000bf6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 030f 	and.w	r3, r3, #15
 8000bfe:	429d      	cmp	r5, r3
 8000c00:	f47f af7d 	bne.w	8000afe <HAL_RCC_ClockConfig+0xa>
 8000c04:	e78f      	b.n	8000b26 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c06:	4905      	ldr	r1, [pc, #20]	; (8000c1c <HAL_RCC_ClockConfig+0x128>)
 8000c08:	68e0      	ldr	r0, [r4, #12]
 8000c0a:	688b      	ldr	r3, [r1, #8]
 8000c0c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000c10:	4303      	orrs	r3, r0
 8000c12:	608b      	str	r3, [r1, #8]
 8000c14:	e78a      	b.n	8000b2c <HAL_RCC_ClockConfig+0x38>
 8000c16:	bf00      	nop
 8000c18:	40023c00 	.word	0x40023c00
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	080033f6 	.word	0x080033f6
 8000c24:	20000010 	.word	0x20000010

08000c28 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000c28:	4b01      	ldr	r3, [pc, #4]	; (8000c30 <HAL_RCC_GetHCLKFreq+0x8>)
 8000c2a:	6818      	ldr	r0, [r3, #0]
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000010 	.word	0x20000010

08000c34 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000c3e:	5cd3      	ldrb	r3, [r2, r3]
 8000c40:	4a03      	ldr	r2, [pc, #12]	; (8000c50 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000c42:	6810      	ldr	r0, [r2, #0]
}
 8000c44:	40d8      	lsrs	r0, r3
 8000c46:	4770      	bx	lr
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	08003406 	.word	0x08003406
 8000c50:	20000010 	.word	0x20000010

08000c54 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000c5e:	5cd3      	ldrb	r3, [r2, r3]
 8000c60:	4a03      	ldr	r2, [pc, #12]	; (8000c70 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000c62:	6810      	ldr	r0, [r2, #0]
}
 8000c64:	40d8      	lsrs	r0, r3
 8000c66:	4770      	bx	lr
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	08003406 	.word	0x08003406
 8000c70:	20000010 	.word	0x20000010

08000c74 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000c74:	230f      	movs	r3, #15
 8000c76:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <HAL_RCC_GetClockConfig+0x34>)
 8000c7a:	689a      	ldr	r2, [r3, #8]
 8000c7c:	f002 0203 	and.w	r2, r2, #3
 8000c80:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000c88:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000c8a:	689a      	ldr	r2, [r3, #8]
 8000c8c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000c90:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	08db      	lsrs	r3, r3, #3
 8000c96:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000c9a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <HAL_RCC_GetClockConfig+0x38>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 030f 	and.w	r3, r3, #15
 8000ca4:	600b      	str	r3, [r1, #0]
 8000ca6:	4770      	bx	lr
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40023c00 	.word	0x40023c00

08000cb0 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000cb0:	4920      	ldr	r1, [pc, #128]	; (8000d34 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8000cb2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000cb4:	688b      	ldr	r3, [r1, #8]
 8000cb6:	f003 030c 	and.w	r3, r3, #12
 8000cba:	2b08      	cmp	r3, #8
 8000cbc:	d007      	beq.n	8000cce <HAL_RCC_GetSysClockFreq+0x1e>
 8000cbe:	2b0c      	cmp	r3, #12
 8000cc0:	d020      	beq.n	8000d04 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000cc2:	4a1d      	ldr	r2, [pc, #116]	; (8000d38 <HAL_RCC_GetSysClockFreq+0x88>)
 8000cc4:	481d      	ldr	r0, [pc, #116]	; (8000d3c <HAL_RCC_GetSysClockFreq+0x8c>)
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf18      	it	ne
 8000cca:	4610      	movne	r0, r2
 8000ccc:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000cce:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000cd0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000cd2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000cd4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000cd8:	bf14      	ite	ne
 8000cda:	4818      	ldrne	r0, [pc, #96]	; (8000d3c <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000cdc:	4816      	ldreq	r0, [pc, #88]	; (8000d38 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000cde:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000ce2:	bf18      	it	ne
 8000ce4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ce6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000cea:	fba1 0100 	umull	r0, r1, r1, r0
 8000cee:	f7ff fa8f 	bl	8000210 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <HAL_RCC_GetSysClockFreq+0x84>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 8000cfe:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d02:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d04:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d06:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d08:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d0a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d0e:	bf14      	ite	ne
 8000d10:	480a      	ldrne	r0, [pc, #40]	; (8000d3c <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d12:	4809      	ldreq	r0, [pc, #36]	; (8000d38 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d14:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000d18:	bf18      	it	ne
 8000d1a:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d1c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d20:	fba1 0100 	umull	r0, r1, r1, r0
 8000d24:	f7ff fa74 	bl	8000210 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000d28:	4b02      	ldr	r3, [pc, #8]	; (8000d34 <HAL_RCC_GetSysClockFreq+0x84>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8000d30:	e7e5      	b.n	8000cfe <HAL_RCC_GetSysClockFreq+0x4e>
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800
 8000d38:	00f42400 	.word	0x00f42400
 8000d3c:	007a1200 	.word	0x007a1200

08000d40 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d40:	6803      	ldr	r3, [r0, #0]
{
 8000d42:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d46:	07df      	lsls	r7, r3, #31
{
 8000d48:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d4a:	d410      	bmi.n	8000d6e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d4c:	6823      	ldr	r3, [r4, #0]
 8000d4e:	079e      	lsls	r6, r3, #30
 8000d50:	d467      	bmi.n	8000e22 <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d52:	6823      	ldr	r3, [r4, #0]
 8000d54:	071a      	lsls	r2, r3, #28
 8000d56:	f100 80b2 	bmi.w	8000ebe <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d5a:	6823      	ldr	r3, [r4, #0]
 8000d5c:	075b      	lsls	r3, r3, #29
 8000d5e:	f100 80d0 	bmi.w	8000f02 <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d62:	69a2      	ldr	r2, [r4, #24]
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 8139 	bne.w	8000fdc <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	e01e      	b.n	8000dac <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000d6e:	4b97      	ldr	r3, [pc, #604]	; (8000fcc <HAL_RCC_OscConfig+0x28c>)
 8000d70:	689a      	ldr	r2, [r3, #8]
 8000d72:	f002 020c 	and.w	r2, r2, #12
 8000d76:	2a04      	cmp	r2, #4
 8000d78:	d010      	beq.n	8000d9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000d80:	2a08      	cmp	r2, #8
 8000d82:	d102      	bne.n	8000d8a <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	025d      	lsls	r5, r3, #9
 8000d88:	d408      	bmi.n	8000d9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d8a:	4b90      	ldr	r3, [pc, #576]	; (8000fcc <HAL_RCC_OscConfig+0x28c>)
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000d92:	2a0c      	cmp	r2, #12
 8000d94:	d10d      	bne.n	8000db2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	0250      	lsls	r0, r2, #9
 8000d9a:	d50a      	bpl.n	8000db2 <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d9c:	4b8b      	ldr	r3, [pc, #556]	; (8000fcc <HAL_RCC_OscConfig+0x28c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	0399      	lsls	r1, r3, #14
 8000da2:	d5d3      	bpl.n	8000d4c <HAL_RCC_OscConfig+0xc>
 8000da4:	6863      	ldr	r3, [r4, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1d0      	bne.n	8000d4c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000daa:	2001      	movs	r0, #1
}
 8000dac:	b002      	add	sp, #8
 8000dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000db2:	6862      	ldr	r2, [r4, #4]
 8000db4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000db8:	d111      	bne.n	8000dde <HAL_RCC_OscConfig+0x9e>
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000dc0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dc2:	f001 fe6b 	bl	8002a9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc6:	4d81      	ldr	r5, [pc, #516]	; (8000fcc <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000dc8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dca:	682b      	ldr	r3, [r5, #0]
 8000dcc:	039a      	lsls	r2, r3, #14
 8000dce:	d4bd      	bmi.n	8000d4c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dd0:	f001 fe64 	bl	8002a9c <HAL_GetTick>
 8000dd4:	1b80      	subs	r0, r0, r6
 8000dd6:	2864      	cmp	r0, #100	; 0x64
 8000dd8:	d9f7      	bls.n	8000dca <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8000dda:	2003      	movs	r0, #3
 8000ddc:	e7e6      	b.n	8000dac <HAL_RCC_OscConfig+0x6c>
 8000dde:	4d7b      	ldr	r5, [pc, #492]	; (8000fcc <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000de0:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000de4:	682b      	ldr	r3, [r5, #0]
 8000de6:	d107      	bne.n	8000df8 <HAL_RCC_OscConfig+0xb8>
 8000de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dec:	602b      	str	r3, [r5, #0]
 8000dee:	682b      	ldr	r3, [r5, #0]
 8000df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000df4:	602b      	str	r3, [r5, #0]
 8000df6:	e7e4      	b.n	8000dc2 <HAL_RCC_OscConfig+0x82>
 8000df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dfc:	602b      	str	r3, [r5, #0]
 8000dfe:	682b      	ldr	r3, [r5, #0]
 8000e00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e04:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	d1db      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000e0a:	f001 fe47 	bl	8002a9c <HAL_GetTick>
 8000e0e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e10:	682b      	ldr	r3, [r5, #0]
 8000e12:	039b      	lsls	r3, r3, #14
 8000e14:	d59a      	bpl.n	8000d4c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e16:	f001 fe41 	bl	8002a9c <HAL_GetTick>
 8000e1a:	1b80      	subs	r0, r0, r6
 8000e1c:	2864      	cmp	r0, #100	; 0x64
 8000e1e:	d9f7      	bls.n	8000e10 <HAL_RCC_OscConfig+0xd0>
 8000e20:	e7db      	b.n	8000dda <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000e22:	4b6a      	ldr	r3, [pc, #424]	; (8000fcc <HAL_RCC_OscConfig+0x28c>)
 8000e24:	689a      	ldr	r2, [r3, #8]
 8000e26:	f012 0f0c 	tst.w	r2, #12
 8000e2a:	d010      	beq.n	8000e4e <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000e32:	2a08      	cmp	r2, #8
 8000e34:	d102      	bne.n	8000e3c <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	025f      	lsls	r7, r3, #9
 8000e3a:	d508      	bpl.n	8000e4e <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e3c:	4a63      	ldr	r2, [pc, #396]	; (8000fcc <HAL_RCC_OscConfig+0x28c>)
 8000e3e:	6893      	ldr	r3, [r2, #8]
 8000e40:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000e44:	2b0c      	cmp	r3, #12
 8000e46:	d111      	bne.n	8000e6c <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e48:	6853      	ldr	r3, [r2, #4]
 8000e4a:	025e      	lsls	r6, r3, #9
 8000e4c:	d40e      	bmi.n	8000e6c <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e4e:	4b5f      	ldr	r3, [pc, #380]	; (8000fcc <HAL_RCC_OscConfig+0x28c>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	0795      	lsls	r5, r2, #30
 8000e54:	d502      	bpl.n	8000e5c <HAL_RCC_OscConfig+0x11c>
 8000e56:	68e2      	ldr	r2, [r4, #12]
 8000e58:	2a01      	cmp	r2, #1
 8000e5a:	d1a6      	bne.n	8000daa <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	6921      	ldr	r1, [r4, #16]
 8000e60:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000e64:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000e68:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e6a:	e772      	b.n	8000d52 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e6c:	68e2      	ldr	r2, [r4, #12]
 8000e6e:	4b58      	ldr	r3, [pc, #352]	; (8000fd0 <HAL_RCC_OscConfig+0x290>)
 8000e70:	b1b2      	cbz	r2, 8000ea0 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8000e72:	2201      	movs	r2, #1
 8000e74:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e76:	f001 fe11 	bl	8002a9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e7a:	4d54      	ldr	r5, [pc, #336]	; (8000fcc <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000e7c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e7e:	682b      	ldr	r3, [r5, #0]
 8000e80:	0798      	lsls	r0, r3, #30
 8000e82:	d507      	bpl.n	8000e94 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e84:	682b      	ldr	r3, [r5, #0]
 8000e86:	6922      	ldr	r2, [r4, #16]
 8000e88:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e8c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e90:	602b      	str	r3, [r5, #0]
 8000e92:	e75e      	b.n	8000d52 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e94:	f001 fe02 	bl	8002a9c <HAL_GetTick>
 8000e98:	1b80      	subs	r0, r0, r6
 8000e9a:	2802      	cmp	r0, #2
 8000e9c:	d9ef      	bls.n	8000e7e <HAL_RCC_OscConfig+0x13e>
 8000e9e:	e79c      	b.n	8000dda <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8000ea0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ea2:	f001 fdfb 	bl	8002a9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea6:	4d49      	ldr	r5, [pc, #292]	; (8000fcc <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000ea8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eaa:	682b      	ldr	r3, [r5, #0]
 8000eac:	0799      	lsls	r1, r3, #30
 8000eae:	f57f af50 	bpl.w	8000d52 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eb2:	f001 fdf3 	bl	8002a9c <HAL_GetTick>
 8000eb6:	1b80      	subs	r0, r0, r6
 8000eb8:	2802      	cmp	r0, #2
 8000eba:	d9f6      	bls.n	8000eaa <HAL_RCC_OscConfig+0x16a>
 8000ebc:	e78d      	b.n	8000dda <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000ebe:	6962      	ldr	r2, [r4, #20]
 8000ec0:	4b44      	ldr	r3, [pc, #272]	; (8000fd4 <HAL_RCC_OscConfig+0x294>)
 8000ec2:	b17a      	cbz	r2, 8000ee4 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ec8:	f001 fde8 	bl	8002a9c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ecc:	4d3f      	ldr	r5, [pc, #252]	; (8000fcc <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000ece:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ed0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ed2:	079f      	lsls	r7, r3, #30
 8000ed4:	f53f af41 	bmi.w	8000d5a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ed8:	f001 fde0 	bl	8002a9c <HAL_GetTick>
 8000edc:	1b80      	subs	r0, r0, r6
 8000ede:	2802      	cmp	r0, #2
 8000ee0:	d9f6      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x190>
 8000ee2:	e77a      	b.n	8000dda <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8000ee4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ee6:	f001 fdd9 	bl	8002a9c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eea:	4d38      	ldr	r5, [pc, #224]	; (8000fcc <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000eec:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ef0:	0798      	lsls	r0, r3, #30
 8000ef2:	f57f af32 	bpl.w	8000d5a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ef6:	f001 fdd1 	bl	8002a9c <HAL_GetTick>
 8000efa:	1b80      	subs	r0, r0, r6
 8000efc:	2802      	cmp	r0, #2
 8000efe:	d9f6      	bls.n	8000eee <HAL_RCC_OscConfig+0x1ae>
 8000f00:	e76b      	b.n	8000dda <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f02:	4b32      	ldr	r3, [pc, #200]	; (8000fcc <HAL_RCC_OscConfig+0x28c>)
 8000f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f06:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000f0a:	d128      	bne.n	8000f5e <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f0c:	9201      	str	r2, [sp, #4]
 8000f0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f14:	641a      	str	r2, [r3, #64]	; 0x40
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1c:	9301      	str	r3, [sp, #4]
 8000f1e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f20:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f22:	4d2d      	ldr	r5, [pc, #180]	; (8000fd8 <HAL_RCC_OscConfig+0x298>)
 8000f24:	682b      	ldr	r3, [r5, #0]
 8000f26:	05d9      	lsls	r1, r3, #23
 8000f28:	d51b      	bpl.n	8000f62 <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f2a:	68a3      	ldr	r3, [r4, #8]
 8000f2c:	4d27      	ldr	r5, [pc, #156]	; (8000fcc <HAL_RCC_OscConfig+0x28c>)
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d127      	bne.n	8000f82 <HAL_RCC_OscConfig+0x242>
 8000f32:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000f3a:	f001 fdaf 	bl	8002a9c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f3e:	4d23      	ldr	r5, [pc, #140]	; (8000fcc <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000f40:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f42:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f46:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f48:	079b      	lsls	r3, r3, #30
 8000f4a:	d539      	bpl.n	8000fc0 <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 8000f4c:	2e00      	cmp	r6, #0
 8000f4e:	f43f af08 	beq.w	8000d62 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f52:	4a1e      	ldr	r2, [pc, #120]	; (8000fcc <HAL_RCC_OscConfig+0x28c>)
 8000f54:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5c:	e701      	b.n	8000d62 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000f5e:	2600      	movs	r6, #0
 8000f60:	e7df      	b.n	8000f22 <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f62:	682b      	ldr	r3, [r5, #0]
 8000f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f68:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000f6a:	f001 fd97 	bl	8002a9c <HAL_GetTick>
 8000f6e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f70:	682b      	ldr	r3, [r5, #0]
 8000f72:	05da      	lsls	r2, r3, #23
 8000f74:	d4d9      	bmi.n	8000f2a <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f76:	f001 fd91 	bl	8002a9c <HAL_GetTick>
 8000f7a:	1bc0      	subs	r0, r0, r7
 8000f7c:	2802      	cmp	r0, #2
 8000f7e:	d9f7      	bls.n	8000f70 <HAL_RCC_OscConfig+0x230>
 8000f80:	e72b      	b.n	8000dda <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f82:	2b05      	cmp	r3, #5
 8000f84:	d104      	bne.n	8000f90 <HAL_RCC_OscConfig+0x250>
 8000f86:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f88:	f043 0304 	orr.w	r3, r3, #4
 8000f8c:	672b      	str	r3, [r5, #112]	; 0x70
 8000f8e:	e7d0      	b.n	8000f32 <HAL_RCC_OscConfig+0x1f2>
 8000f90:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000f92:	f022 0201 	bic.w	r2, r2, #1
 8000f96:	672a      	str	r2, [r5, #112]	; 0x70
 8000f98:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000f9a:	f022 0204 	bic.w	r2, r2, #4
 8000f9e:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1ca      	bne.n	8000f3a <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8000fa4:	f001 fd7a 	bl	8002a9c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fa8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000fac:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fae:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000fb0:	0798      	lsls	r0, r3, #30
 8000fb2:	d5cb      	bpl.n	8000f4c <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fb4:	f001 fd72 	bl	8002a9c <HAL_GetTick>
 8000fb8:	1bc0      	subs	r0, r0, r7
 8000fba:	4540      	cmp	r0, r8
 8000fbc:	d9f7      	bls.n	8000fae <HAL_RCC_OscConfig+0x26e>
 8000fbe:	e70c      	b.n	8000dda <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fc0:	f001 fd6c 	bl	8002a9c <HAL_GetTick>
 8000fc4:	1bc0      	subs	r0, r0, r7
 8000fc6:	4540      	cmp	r0, r8
 8000fc8:	d9bd      	bls.n	8000f46 <HAL_RCC_OscConfig+0x206>
 8000fca:	e706      	b.n	8000dda <HAL_RCC_OscConfig+0x9a>
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	42470000 	.word	0x42470000
 8000fd4:	42470e80 	.word	0x42470e80
 8000fd8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000fdc:	4d23      	ldr	r5, [pc, #140]	; (800106c <HAL_RCC_OscConfig+0x32c>)
 8000fde:	68ab      	ldr	r3, [r5, #8]
 8000fe0:	f003 030c 	and.w	r3, r3, #12
 8000fe4:	2b08      	cmp	r3, #8
 8000fe6:	f43f aee0 	beq.w	8000daa <HAL_RCC_OscConfig+0x6a>
 8000fea:	4e21      	ldr	r6, [pc, #132]	; (8001070 <HAL_RCC_OscConfig+0x330>)
 8000fec:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fee:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000ff0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ff2:	d12d      	bne.n	8001050 <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8000ff4:	f001 fd52 	bl	8002a9c <HAL_GetTick>
 8000ff8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ffa:	682b      	ldr	r3, [r5, #0]
 8000ffc:	0199      	lsls	r1, r3, #6
 8000ffe:	d421      	bmi.n	8001044 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001000:	6a22      	ldr	r2, [r4, #32]
 8001002:	69e3      	ldr	r3, [r4, #28]
 8001004:	4313      	orrs	r3, r2
 8001006:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001008:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800100c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800100e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001012:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001014:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001018:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800101a:	4c14      	ldr	r4, [pc, #80]	; (800106c <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800101c:	0852      	lsrs	r2, r2, #1
 800101e:	3a01      	subs	r2, #1
 8001020:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001024:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001026:	2301      	movs	r3, #1
 8001028:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800102a:	f001 fd37 	bl	8002a9c <HAL_GetTick>
 800102e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001030:	6823      	ldr	r3, [r4, #0]
 8001032:	019a      	lsls	r2, r3, #6
 8001034:	f53f ae99 	bmi.w	8000d6a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001038:	f001 fd30 	bl	8002a9c <HAL_GetTick>
 800103c:	1b40      	subs	r0, r0, r5
 800103e:	2802      	cmp	r0, #2
 8001040:	d9f6      	bls.n	8001030 <HAL_RCC_OscConfig+0x2f0>
 8001042:	e6ca      	b.n	8000dda <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001044:	f001 fd2a 	bl	8002a9c <HAL_GetTick>
 8001048:	1bc0      	subs	r0, r0, r7
 800104a:	2802      	cmp	r0, #2
 800104c:	d9d5      	bls.n	8000ffa <HAL_RCC_OscConfig+0x2ba>
 800104e:	e6c4      	b.n	8000dda <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8001050:	f001 fd24 	bl	8002a9c <HAL_GetTick>
 8001054:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001056:	682b      	ldr	r3, [r5, #0]
 8001058:	019b      	lsls	r3, r3, #6
 800105a:	f57f ae86 	bpl.w	8000d6a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800105e:	f001 fd1d 	bl	8002a9c <HAL_GetTick>
 8001062:	1b00      	subs	r0, r0, r4
 8001064:	2802      	cmp	r0, #2
 8001066:	d9f6      	bls.n	8001056 <HAL_RCC_OscConfig+0x316>
 8001068:	e6b7      	b.n	8000dda <HAL_RCC_OscConfig+0x9a>
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800
 8001070:	42470060 	.word	0x42470060

08001074 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001074:	6803      	ldr	r3, [r0, #0]
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	f042 0201 	orr.w	r2, r2, #1
 800107c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001084:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8001086:	bf1e      	ittt	ne
 8001088:	681a      	ldrne	r2, [r3, #0]
 800108a:	f042 0201 	orrne.w	r2, r2, #1
 800108e:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8001090:	2000      	movs	r0, #0
 8001092:	4770      	bx	lr

08001094 <HAL_TIM_OC_DelayElapsedCallback>:
 8001094:	4770      	bx	lr

08001096 <HAL_TIM_IC_CaptureCallback>:
 8001096:	4770      	bx	lr

08001098 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001098:	4770      	bx	lr

0800109a <HAL_TIM_TriggerCallback>:
 800109a:	4770      	bx	lr

0800109c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800109c:	6803      	ldr	r3, [r0, #0]
 800109e:	691a      	ldr	r2, [r3, #16]
 80010a0:	0791      	lsls	r1, r2, #30
{
 80010a2:	b510      	push	{r4, lr}
 80010a4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80010a6:	d50e      	bpl.n	80010c6 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80010a8:	68da      	ldr	r2, [r3, #12]
 80010aa:	0792      	lsls	r2, r2, #30
 80010ac:	d50b      	bpl.n	80010c6 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80010ae:	f06f 0202 	mvn.w	r2, #2
 80010b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80010b4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80010b6:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80010b8:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80010ba:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80010bc:	d077      	beq.n	80011ae <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80010be:	f7ff ffea 	bl	8001096 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010c2:	2300      	movs	r3, #0
 80010c4:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80010c6:	6823      	ldr	r3, [r4, #0]
 80010c8:	691a      	ldr	r2, [r3, #16]
 80010ca:	0750      	lsls	r0, r2, #29
 80010cc:	d510      	bpl.n	80010f0 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80010ce:	68da      	ldr	r2, [r3, #12]
 80010d0:	0751      	lsls	r1, r2, #29
 80010d2:	d50d      	bpl.n	80010f0 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80010d4:	f06f 0204 	mvn.w	r2, #4
 80010d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010da:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80010dc:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010de:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80010e2:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010e4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010e6:	d068      	beq.n	80011ba <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80010e8:	f7ff ffd5 	bl	8001096 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010ec:	2300      	movs	r3, #0
 80010ee:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80010f0:	6823      	ldr	r3, [r4, #0]
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	0712      	lsls	r2, r2, #28
 80010f6:	d50f      	bpl.n	8001118 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80010f8:	68da      	ldr	r2, [r3, #12]
 80010fa:	0710      	lsls	r0, r2, #28
 80010fc:	d50c      	bpl.n	8001118 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80010fe:	f06f 0208 	mvn.w	r2, #8
 8001102:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001104:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001106:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001108:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800110a:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800110c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800110e:	d05a      	beq.n	80011c6 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001110:	f7ff ffc1 	bl	8001096 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001114:	2300      	movs	r3, #0
 8001116:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001118:	6823      	ldr	r3, [r4, #0]
 800111a:	691a      	ldr	r2, [r3, #16]
 800111c:	06d2      	lsls	r2, r2, #27
 800111e:	d510      	bpl.n	8001142 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001120:	68da      	ldr	r2, [r3, #12]
 8001122:	06d0      	lsls	r0, r2, #27
 8001124:	d50d      	bpl.n	8001142 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001126:	f06f 0210 	mvn.w	r2, #16
 800112a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800112c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800112e:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001130:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001134:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001136:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001138:	d04b      	beq.n	80011d2 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800113a:	f7ff ffac 	bl	8001096 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800113e:	2300      	movs	r3, #0
 8001140:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001142:	6823      	ldr	r3, [r4, #0]
 8001144:	691a      	ldr	r2, [r3, #16]
 8001146:	07d1      	lsls	r1, r2, #31
 8001148:	d508      	bpl.n	800115c <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800114a:	68da      	ldr	r2, [r3, #12]
 800114c:	07d2      	lsls	r2, r2, #31
 800114e:	d505      	bpl.n	800115c <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001150:	f06f 0201 	mvn.w	r2, #1
 8001154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001156:	4620      	mov	r0, r4
 8001158:	f001 fb28 	bl	80027ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800115c:	6823      	ldr	r3, [r4, #0]
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	0610      	lsls	r0, r2, #24
 8001162:	d508      	bpl.n	8001176 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	0611      	lsls	r1, r2, #24
 8001168:	d505      	bpl.n	8001176 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800116a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800116e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001170:	4620      	mov	r0, r4
 8001172:	f000 f8d4 	bl	800131e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001176:	6823      	ldr	r3, [r4, #0]
 8001178:	691a      	ldr	r2, [r3, #16]
 800117a:	0652      	lsls	r2, r2, #25
 800117c:	d508      	bpl.n	8001190 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800117e:	68da      	ldr	r2, [r3, #12]
 8001180:	0650      	lsls	r0, r2, #25
 8001182:	d505      	bpl.n	8001190 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001184:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800118a:	4620      	mov	r0, r4
 800118c:	f7ff ff85 	bl	800109a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001190:	6823      	ldr	r3, [r4, #0]
 8001192:	691a      	ldr	r2, [r3, #16]
 8001194:	0691      	lsls	r1, r2, #26
 8001196:	d522      	bpl.n	80011de <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001198:	68da      	ldr	r2, [r3, #12]
 800119a:	0692      	lsls	r2, r2, #26
 800119c:	d51f      	bpl.n	80011de <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800119e:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80011a2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80011a4:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80011a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80011aa:	f000 b8b7 	b.w	800131c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80011ae:	f7ff ff71 	bl	8001094 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011b2:	4620      	mov	r0, r4
 80011b4:	f7ff ff70 	bl	8001098 <HAL_TIM_PWM_PulseFinishedCallback>
 80011b8:	e783      	b.n	80010c2 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011ba:	f7ff ff6b 	bl	8001094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011be:	4620      	mov	r0, r4
 80011c0:	f7ff ff6a 	bl	8001098 <HAL_TIM_PWM_PulseFinishedCallback>
 80011c4:	e792      	b.n	80010ec <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011c6:	f7ff ff65 	bl	8001094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011ca:	4620      	mov	r0, r4
 80011cc:	f7ff ff64 	bl	8001098 <HAL_TIM_PWM_PulseFinishedCallback>
 80011d0:	e7a0      	b.n	8001114 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011d2:	f7ff ff5f 	bl	8001094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011d6:	4620      	mov	r0, r4
 80011d8:	f7ff ff5e 	bl	8001098 <HAL_TIM_PWM_PulseFinishedCallback>
 80011dc:	e7af      	b.n	800113e <HAL_TIM_IRQHandler+0xa2>
 80011de:	bd10      	pop	{r4, pc}

080011e0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011e0:	4a30      	ldr	r2, [pc, #192]	; (80012a4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80011e2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011e4:	4290      	cmp	r0, r2
 80011e6:	d012      	beq.n	800120e <TIM_Base_SetConfig+0x2e>
 80011e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80011ec:	d00f      	beq.n	800120e <TIM_Base_SetConfig+0x2e>
 80011ee:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80011f2:	4290      	cmp	r0, r2
 80011f4:	d00b      	beq.n	800120e <TIM_Base_SetConfig+0x2e>
 80011f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011fa:	4290      	cmp	r0, r2
 80011fc:	d007      	beq.n	800120e <TIM_Base_SetConfig+0x2e>
 80011fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001202:	4290      	cmp	r0, r2
 8001204:	d003      	beq.n	800120e <TIM_Base_SetConfig+0x2e>
 8001206:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800120a:	4290      	cmp	r0, r2
 800120c:	d119      	bne.n	8001242 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800120e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001214:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001216:	4a23      	ldr	r2, [pc, #140]	; (80012a4 <TIM_Base_SetConfig+0xc4>)
 8001218:	4290      	cmp	r0, r2
 800121a:	d029      	beq.n	8001270 <TIM_Base_SetConfig+0x90>
 800121c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001220:	d026      	beq.n	8001270 <TIM_Base_SetConfig+0x90>
 8001222:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001226:	4290      	cmp	r0, r2
 8001228:	d022      	beq.n	8001270 <TIM_Base_SetConfig+0x90>
 800122a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800122e:	4290      	cmp	r0, r2
 8001230:	d01e      	beq.n	8001270 <TIM_Base_SetConfig+0x90>
 8001232:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001236:	4290      	cmp	r0, r2
 8001238:	d01a      	beq.n	8001270 <TIM_Base_SetConfig+0x90>
 800123a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800123e:	4290      	cmp	r0, r2
 8001240:	d016      	beq.n	8001270 <TIM_Base_SetConfig+0x90>
 8001242:	4a19      	ldr	r2, [pc, #100]	; (80012a8 <TIM_Base_SetConfig+0xc8>)
 8001244:	4290      	cmp	r0, r2
 8001246:	d013      	beq.n	8001270 <TIM_Base_SetConfig+0x90>
 8001248:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800124c:	4290      	cmp	r0, r2
 800124e:	d00f      	beq.n	8001270 <TIM_Base_SetConfig+0x90>
 8001250:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001254:	4290      	cmp	r0, r2
 8001256:	d00b      	beq.n	8001270 <TIM_Base_SetConfig+0x90>
 8001258:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800125c:	4290      	cmp	r0, r2
 800125e:	d007      	beq.n	8001270 <TIM_Base_SetConfig+0x90>
 8001260:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001264:	4290      	cmp	r0, r2
 8001266:	d003      	beq.n	8001270 <TIM_Base_SetConfig+0x90>
 8001268:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800126c:	4290      	cmp	r0, r2
 800126e:	d103      	bne.n	8001278 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001270:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001276:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001278:	694a      	ldr	r2, [r1, #20]
 800127a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800127e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001280:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001282:	688b      	ldr	r3, [r1, #8]
 8001284:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001286:	680b      	ldr	r3, [r1, #0]
 8001288:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <TIM_Base_SetConfig+0xc4>)
 800128c:	4298      	cmp	r0, r3
 800128e:	d003      	beq.n	8001298 <TIM_Base_SetConfig+0xb8>
 8001290:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001294:	4298      	cmp	r0, r3
 8001296:	d101      	bne.n	800129c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001298:	690b      	ldr	r3, [r1, #16]
 800129a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800129c:	2301      	movs	r3, #1
 800129e:	6143      	str	r3, [r0, #20]
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40010000 	.word	0x40010000
 80012a8:	40014000 	.word	0x40014000

080012ac <HAL_TIM_Base_Init>:
{
 80012ac:	b510      	push	{r4, lr}
  if (htim == NULL)
 80012ae:	4604      	mov	r4, r0
 80012b0:	b1a0      	cbz	r0, 80012dc <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80012b2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80012b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012ba:	b91b      	cbnz	r3, 80012c4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80012bc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80012c0:	f001 faa2 	bl	8002808 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80012c4:	2302      	movs	r3, #2
 80012c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012ca:	6820      	ldr	r0, [r4, #0]
 80012cc:	1d21      	adds	r1, r4, #4
 80012ce:	f7ff ff87 	bl	80011e0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80012d2:	2301      	movs	r3, #1
 80012d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80012d8:	2000      	movs	r0, #0
 80012da:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80012dc:	2001      	movs	r0, #1
}
 80012de:	bd10      	pop	{r4, pc}

080012e0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80012e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80012e4:	2b01      	cmp	r3, #1
{
 80012e6:	b530      	push	{r4, r5, lr}
 80012e8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80012ec:	d014      	beq.n	8001318 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80012ee:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80012f0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80012f4:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80012f6:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80012f8:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80012fa:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 80012fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001300:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001304:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001306:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001308:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800130a:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800130c:	2301      	movs	r3, #1
 800130e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001312:	2300      	movs	r3, #0
 8001314:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001318:	4618      	mov	r0, r3

  return HAL_OK;
}
 800131a:	bd30      	pop	{r4, r5, pc}

0800131c <HAL_TIMEx_CommutCallback>:
 800131c:	4770      	bx	lr

0800131e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800131e:	4770      	bx	lr

08001320 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001320:	6803      	ldr	r3, [r0, #0]
 8001322:	68da      	ldr	r2, [r3, #12]
 8001324:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001328:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800132a:	695a      	ldr	r2, [r3, #20]
 800132c:	f022 0201 	bic.w	r2, r2, #1
 8001330:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001332:	2320      	movs	r3, #32
 8001334:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001338:	4770      	bx	lr
	...

0800133c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800133c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001340:	6806      	ldr	r6, [r0, #0]
 8001342:	68c2      	ldr	r2, [r0, #12]
 8001344:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001346:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001348:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800134c:	4313      	orrs	r3, r2
 800134e:	6133      	str	r3, [r6, #16]
{
 8001350:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001352:	6883      	ldr	r3, [r0, #8]
 8001354:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001356:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001358:	4303      	orrs	r3, r0
 800135a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800135c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001360:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001362:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001366:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8001368:	4313      	orrs	r3, r2
 800136a:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800136c:	6973      	ldr	r3, [r6, #20]
 800136e:	69a2      	ldr	r2, [r4, #24]
 8001370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001374:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001376:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800137a:	6173      	str	r3, [r6, #20]
 800137c:	4b7a      	ldr	r3, [pc, #488]	; (8001568 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800137e:	d17c      	bne.n	800147a <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001380:	429e      	cmp	r6, r3
 8001382:	d003      	beq.n	800138c <UART_SetConfig+0x50>
 8001384:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001388:	429e      	cmp	r6, r3
 800138a:	d144      	bne.n	8001416 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800138c:	f7ff fc62 	bl	8000c54 <HAL_RCC_GetPCLK2Freq>
 8001390:	2519      	movs	r5, #25
 8001392:	fb05 f300 	mul.w	r3, r5, r0
 8001396:	6860      	ldr	r0, [r4, #4]
 8001398:	f04f 0964 	mov.w	r9, #100	; 0x64
 800139c:	0040      	lsls	r0, r0, #1
 800139e:	fbb3 f3f0 	udiv	r3, r3, r0
 80013a2:	fbb3 f3f9 	udiv	r3, r3, r9
 80013a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80013aa:	f7ff fc53 	bl	8000c54 <HAL_RCC_GetPCLK2Freq>
 80013ae:	6863      	ldr	r3, [r4, #4]
 80013b0:	4368      	muls	r0, r5
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	fbb0 f7f3 	udiv	r7, r0, r3
 80013b8:	f7ff fc4c 	bl	8000c54 <HAL_RCC_GetPCLK2Freq>
 80013bc:	6863      	ldr	r3, [r4, #4]
 80013be:	4368      	muls	r0, r5
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80013c6:	fbb3 f3f9 	udiv	r3, r3, r9
 80013ca:	fb09 7313 	mls	r3, r9, r3, r7
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	3332      	adds	r3, #50	; 0x32
 80013d2:	fbb3 f3f9 	udiv	r3, r3, r9
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80013dc:	f7ff fc3a 	bl	8000c54 <HAL_RCC_GetPCLK2Freq>
 80013e0:	6862      	ldr	r2, [r4, #4]
 80013e2:	4368      	muls	r0, r5
 80013e4:	0052      	lsls	r2, r2, #1
 80013e6:	fbb0 faf2 	udiv	sl, r0, r2
 80013ea:	f7ff fc33 	bl	8000c54 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80013ee:	6863      	ldr	r3, [r4, #4]
 80013f0:	4368      	muls	r0, r5
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80013f8:	fbb3 f3f9 	udiv	r3, r3, r9
 80013fc:	fb09 a313 	mls	r3, r9, r3, sl
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	3332      	adds	r3, #50	; 0x32
 8001404:	fbb3 f3f9 	udiv	r3, r3, r9
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800140e:	443b      	add	r3, r7
 8001410:	60b3      	str	r3, [r6, #8]
 8001412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001416:	f7ff fc0d 	bl	8000c34 <HAL_RCC_GetPCLK1Freq>
 800141a:	2519      	movs	r5, #25
 800141c:	fb05 f300 	mul.w	r3, r5, r0
 8001420:	6860      	ldr	r0, [r4, #4]
 8001422:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001426:	0040      	lsls	r0, r0, #1
 8001428:	fbb3 f3f0 	udiv	r3, r3, r0
 800142c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001430:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001434:	f7ff fbfe 	bl	8000c34 <HAL_RCC_GetPCLK1Freq>
 8001438:	6863      	ldr	r3, [r4, #4]
 800143a:	4368      	muls	r0, r5
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	fbb0 f7f3 	udiv	r7, r0, r3
 8001442:	f7ff fbf7 	bl	8000c34 <HAL_RCC_GetPCLK1Freq>
 8001446:	6863      	ldr	r3, [r4, #4]
 8001448:	4368      	muls	r0, r5
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001450:	fbb3 f3f9 	udiv	r3, r3, r9
 8001454:	fb09 7313 	mls	r3, r9, r3, r7
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	3332      	adds	r3, #50	; 0x32
 800145c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001466:	f7ff fbe5 	bl	8000c34 <HAL_RCC_GetPCLK1Freq>
 800146a:	6862      	ldr	r2, [r4, #4]
 800146c:	4368      	muls	r0, r5
 800146e:	0052      	lsls	r2, r2, #1
 8001470:	fbb0 faf2 	udiv	sl, r0, r2
 8001474:	f7ff fbde 	bl	8000c34 <HAL_RCC_GetPCLK1Freq>
 8001478:	e7b9      	b.n	80013ee <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800147a:	429e      	cmp	r6, r3
 800147c:	d002      	beq.n	8001484 <UART_SetConfig+0x148>
 800147e:	4b3b      	ldr	r3, [pc, #236]	; (800156c <UART_SetConfig+0x230>)
 8001480:	429e      	cmp	r6, r3
 8001482:	d140      	bne.n	8001506 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001484:	f7ff fbe6 	bl	8000c54 <HAL_RCC_GetPCLK2Freq>
 8001488:	6867      	ldr	r7, [r4, #4]
 800148a:	2519      	movs	r5, #25
 800148c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001490:	fb05 f300 	mul.w	r3, r5, r0
 8001494:	00bf      	lsls	r7, r7, #2
 8001496:	fbb3 f3f7 	udiv	r3, r3, r7
 800149a:	fbb3 f3f9 	udiv	r3, r3, r9
 800149e:	011f      	lsls	r7, r3, #4
 80014a0:	f7ff fbd8 	bl	8000c54 <HAL_RCC_GetPCLK2Freq>
 80014a4:	6863      	ldr	r3, [r4, #4]
 80014a6:	4368      	muls	r0, r5
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	fbb0 f8f3 	udiv	r8, r0, r3
 80014ae:	f7ff fbd1 	bl	8000c54 <HAL_RCC_GetPCLK2Freq>
 80014b2:	6863      	ldr	r3, [r4, #4]
 80014b4:	4368      	muls	r0, r5
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80014bc:	fbb3 f3f9 	udiv	r3, r3, r9
 80014c0:	fb09 8313 	mls	r3, r9, r3, r8
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	3332      	adds	r3, #50	; 0x32
 80014c8:	fbb3 f3f9 	udiv	r3, r3, r9
 80014cc:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80014d0:	f7ff fbc0 	bl	8000c54 <HAL_RCC_GetPCLK2Freq>
 80014d4:	6862      	ldr	r2, [r4, #4]
 80014d6:	4368      	muls	r0, r5
 80014d8:	0092      	lsls	r2, r2, #2
 80014da:	fbb0 faf2 	udiv	sl, r0, r2
 80014de:	f7ff fbb9 	bl	8000c54 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80014e2:	6863      	ldr	r3, [r4, #4]
 80014e4:	4368      	muls	r0, r5
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ec:	fbb3 f3f9 	udiv	r3, r3, r9
 80014f0:	fb09 a313 	mls	r3, r9, r3, sl
 80014f4:	011b      	lsls	r3, r3, #4
 80014f6:	3332      	adds	r3, #50	; 0x32
 80014f8:	fbb3 f3f9 	udiv	r3, r3, r9
 80014fc:	f003 030f 	and.w	r3, r3, #15
 8001500:	ea43 0308 	orr.w	r3, r3, r8
 8001504:	e783      	b.n	800140e <UART_SetConfig+0xd2>
 8001506:	f7ff fb95 	bl	8000c34 <HAL_RCC_GetPCLK1Freq>
 800150a:	6867      	ldr	r7, [r4, #4]
 800150c:	2519      	movs	r5, #25
 800150e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001512:	fb05 f300 	mul.w	r3, r5, r0
 8001516:	00bf      	lsls	r7, r7, #2
 8001518:	fbb3 f3f7 	udiv	r3, r3, r7
 800151c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001520:	011f      	lsls	r7, r3, #4
 8001522:	f7ff fb87 	bl	8000c34 <HAL_RCC_GetPCLK1Freq>
 8001526:	6863      	ldr	r3, [r4, #4]
 8001528:	4368      	muls	r0, r5
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	fbb0 f8f3 	udiv	r8, r0, r3
 8001530:	f7ff fb80 	bl	8000c34 <HAL_RCC_GetPCLK1Freq>
 8001534:	6863      	ldr	r3, [r4, #4]
 8001536:	4368      	muls	r0, r5
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	fbb0 f3f3 	udiv	r3, r0, r3
 800153e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001542:	fb09 8313 	mls	r3, r9, r3, r8
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	3332      	adds	r3, #50	; 0x32
 800154a:	fbb3 f3f9 	udiv	r3, r3, r9
 800154e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001552:	f7ff fb6f 	bl	8000c34 <HAL_RCC_GetPCLK1Freq>
 8001556:	6862      	ldr	r2, [r4, #4]
 8001558:	4368      	muls	r0, r5
 800155a:	0092      	lsls	r2, r2, #2
 800155c:	fbb0 faf2 	udiv	sl, r0, r2
 8001560:	f7ff fb68 	bl	8000c34 <HAL_RCC_GetPCLK1Freq>
 8001564:	e7bd      	b.n	80014e2 <UART_SetConfig+0x1a6>
 8001566:	bf00      	nop
 8001568:	40011000 	.word	0x40011000
 800156c:	40011400 	.word	0x40011400

08001570 <HAL_UART_Init>:
{
 8001570:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001572:	4604      	mov	r4, r0
 8001574:	b340      	cbz	r0, 80015c8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001576:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800157a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800157e:	b91b      	cbnz	r3, 8001588 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001580:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001584:	f001 f958 	bl	8002838 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001588:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800158a:	2324      	movs	r3, #36	; 0x24
 800158c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001590:	68d3      	ldr	r3, [r2, #12]
 8001592:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001596:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001598:	4620      	mov	r0, r4
 800159a:	f7ff fecf 	bl	800133c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800159e:	6823      	ldr	r3, [r4, #0]
 80015a0:	691a      	ldr	r2, [r3, #16]
 80015a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80015a6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015a8:	695a      	ldr	r2, [r3, #20]
 80015aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80015ae:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015b6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015b8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80015ba:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015bc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80015be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80015c2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80015c6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80015c8:	2001      	movs	r0, #1
}
 80015ca:	bd10      	pop	{r4, pc}

080015cc <HAL_UART_TxCpltCallback>:
 80015cc:	4770      	bx	lr

080015ce <HAL_UART_RxCpltCallback>:
 80015ce:	4770      	bx	lr

080015d0 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80015d0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80015d4:	2b22      	cmp	r3, #34	; 0x22
{
 80015d6:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80015d8:	d136      	bne.n	8001648 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80015da:	6883      	ldr	r3, [r0, #8]
 80015dc:	6901      	ldr	r1, [r0, #16]
 80015de:	6802      	ldr	r2, [r0, #0]
 80015e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80015e6:	d123      	bne.n	8001630 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80015e8:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80015ea:	b9e9      	cbnz	r1, 8001628 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80015ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80015f0:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80015f4:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80015f6:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80015f8:	3c01      	subs	r4, #1
 80015fa:	b2a4      	uxth	r4, r4
 80015fc:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80015fe:	b98c      	cbnz	r4, 8001624 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001600:	6803      	ldr	r3, [r0, #0]
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	f022 0220 	bic.w	r2, r2, #32
 8001608:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800160a:	68da      	ldr	r2, [r3, #12]
 800160c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001610:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001612:	695a      	ldr	r2, [r3, #20]
 8001614:	f022 0201 	bic.w	r2, r2, #1
 8001618:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800161a:	2320      	movs	r3, #32
 800161c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001620:	f7ff ffd5 	bl	80015ce <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8001624:	2000      	movs	r0, #0
}
 8001626:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	f823 2b01 	strh.w	r2, [r3], #1
 800162e:	e7e1      	b.n	80015f4 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001630:	b921      	cbnz	r1, 800163c <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001632:	1c59      	adds	r1, r3, #1
 8001634:	6852      	ldr	r2, [r2, #4]
 8001636:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001638:	701a      	strb	r2, [r3, #0]
 800163a:	e7dc      	b.n	80015f6 <UART_Receive_IT+0x26>
 800163c:	6852      	ldr	r2, [r2, #4]
 800163e:	1c59      	adds	r1, r3, #1
 8001640:	6281      	str	r1, [r0, #40]	; 0x28
 8001642:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001646:	e7f7      	b.n	8001638 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001648:	2002      	movs	r0, #2
 800164a:	bd10      	pop	{r4, pc}

0800164c <HAL_UART_ErrorCallback>:
 800164c:	4770      	bx	lr
	...

08001650 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001650:	6803      	ldr	r3, [r0, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001654:	68d9      	ldr	r1, [r3, #12]
{
 8001656:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001658:	0716      	lsls	r6, r2, #28
{
 800165a:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800165c:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800165e:	d107      	bne.n	8001670 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001660:	0696      	lsls	r6, r2, #26
 8001662:	d55a      	bpl.n	800171a <HAL_UART_IRQHandler+0xca>
 8001664:	068d      	lsls	r5, r1, #26
 8001666:	d558      	bpl.n	800171a <HAL_UART_IRQHandler+0xca>
}
 8001668:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800166c:	f7ff bfb0 	b.w	80015d0 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001670:	f015 0501 	ands.w	r5, r5, #1
 8001674:	d102      	bne.n	800167c <HAL_UART_IRQHandler+0x2c>
 8001676:	f411 7f90 	tst.w	r1, #288	; 0x120
 800167a:	d04e      	beq.n	800171a <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800167c:	07d3      	lsls	r3, r2, #31
 800167e:	d505      	bpl.n	800168c <HAL_UART_IRQHandler+0x3c>
 8001680:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001682:	bf42      	ittt	mi
 8001684:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001686:	f043 0301 	orrmi.w	r3, r3, #1
 800168a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800168c:	0750      	lsls	r0, r2, #29
 800168e:	d504      	bpl.n	800169a <HAL_UART_IRQHandler+0x4a>
 8001690:	b11d      	cbz	r5, 800169a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001692:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001694:	f043 0302 	orr.w	r3, r3, #2
 8001698:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800169a:	0793      	lsls	r3, r2, #30
 800169c:	d504      	bpl.n	80016a8 <HAL_UART_IRQHandler+0x58>
 800169e:	b11d      	cbz	r5, 80016a8 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80016a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80016a8:	0716      	lsls	r6, r2, #28
 80016aa:	d504      	bpl.n	80016b6 <HAL_UART_IRQHandler+0x66>
 80016ac:	b11d      	cbz	r5, 80016b6 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80016ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80016b0:	f043 0308 	orr.w	r3, r3, #8
 80016b4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80016b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d066      	beq.n	800178a <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80016bc:	0695      	lsls	r5, r2, #26
 80016be:	d504      	bpl.n	80016ca <HAL_UART_IRQHandler+0x7a>
 80016c0:	0688      	lsls	r0, r1, #26
 80016c2:	d502      	bpl.n	80016ca <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 80016c4:	4620      	mov	r0, r4
 80016c6:	f7ff ff83 	bl	80015d0 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80016ca:	6823      	ldr	r3, [r4, #0]
 80016cc:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80016ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80016d0:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 80016d2:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80016d4:	d402      	bmi.n	80016dc <HAL_UART_IRQHandler+0x8c>
 80016d6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80016da:	d01a      	beq.n	8001712 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 80016dc:	f7ff fe20 	bl	8001320 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80016e0:	6823      	ldr	r3, [r4, #0]
 80016e2:	695a      	ldr	r2, [r3, #20]
 80016e4:	0652      	lsls	r2, r2, #25
 80016e6:	d510      	bpl.n	800170a <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80016e8:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80016ea:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80016ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016f0:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80016f2:	b150      	cbz	r0, 800170a <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80016f4:	4b25      	ldr	r3, [pc, #148]	; (800178c <HAL_UART_IRQHandler+0x13c>)
 80016f6:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80016f8:	f7ff f814 	bl	8000724 <HAL_DMA_Abort_IT>
 80016fc:	2800      	cmp	r0, #0
 80016fe:	d044      	beq.n	800178a <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001700:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001702:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001706:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001708:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800170a:	4620      	mov	r0, r4
 800170c:	f7ff ff9e 	bl	800164c <HAL_UART_ErrorCallback>
 8001710:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001712:	f7ff ff9b 	bl	800164c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001716:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001718:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800171a:	0616      	lsls	r6, r2, #24
 800171c:	d527      	bpl.n	800176e <HAL_UART_IRQHandler+0x11e>
 800171e:	060d      	lsls	r5, r1, #24
 8001720:	d525      	bpl.n	800176e <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001722:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001726:	2a21      	cmp	r2, #33	; 0x21
 8001728:	d12f      	bne.n	800178a <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800172a:	68a2      	ldr	r2, [r4, #8]
 800172c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001730:	6a22      	ldr	r2, [r4, #32]
 8001732:	d117      	bne.n	8001764 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001734:	8811      	ldrh	r1, [r2, #0]
 8001736:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800173a:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800173c:	6921      	ldr	r1, [r4, #16]
 800173e:	b979      	cbnz	r1, 8001760 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001740:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001742:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8001744:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001746:	3a01      	subs	r2, #1
 8001748:	b292      	uxth	r2, r2
 800174a:	84e2      	strh	r2, [r4, #38]	; 0x26
 800174c:	b9ea      	cbnz	r2, 800178a <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001754:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001760:	3201      	adds	r2, #1
 8001762:	e7ee      	b.n	8001742 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001764:	1c51      	adds	r1, r2, #1
 8001766:	6221      	str	r1, [r4, #32]
 8001768:	7812      	ldrb	r2, [r2, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	e7ea      	b.n	8001744 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800176e:	0650      	lsls	r0, r2, #25
 8001770:	d50b      	bpl.n	800178a <HAL_UART_IRQHandler+0x13a>
 8001772:	064a      	lsls	r2, r1, #25
 8001774:	d509      	bpl.n	800178a <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001776:	68da      	ldr	r2, [r3, #12]
 8001778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800177c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800177e:	2320      	movs	r3, #32
 8001780:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001784:	4620      	mov	r0, r4
 8001786:	f7ff ff21 	bl	80015cc <HAL_UART_TxCpltCallback>
 800178a:	bd70      	pop	{r4, r5, r6, pc}
 800178c:	08001791 	.word	0x08001791

08001790 <UART_DMAAbortOnError>:
{
 8001790:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001792:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8001794:	2300      	movs	r3, #0
 8001796:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001798:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800179a:	f7ff ff57 	bl	800164c <HAL_UART_ErrorCallback>
 800179e:	bd08      	pop	{r3, pc}

080017a0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80017a0:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80017a2:	f000 fca7 	bl	80020f4 <vTaskStartScheduler>
  
  return osOK;
}
 80017a6:	2000      	movs	r0, #0
 80017a8:	bd08      	pop	{r3, pc}

080017aa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80017aa:	b570      	push	{r4, r5, r6, lr}
 80017ac:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80017ae:	6946      	ldr	r6, [r0, #20]
 80017b0:	692a      	ldr	r2, [r5, #16]
 80017b2:	6840      	ldr	r0, [r0, #4]
 80017b4:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 80017b8:	460b      	mov	r3, r1
 80017ba:	b086      	sub	sp, #24
 80017bc:	6829      	ldr	r1, [r5, #0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80017be:	b176      	cbz	r6, 80017de <osThreadCreate+0x34>
 80017c0:	69ad      	ldr	r5, [r5, #24]
 80017c2:	b165      	cbz	r5, 80017de <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 80017c4:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80017c6:	bf14      	ite	ne
 80017c8:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80017ca:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80017cc:	9502      	str	r5, [sp, #8]
 80017ce:	e88d 0050 	stmia.w	sp, {r4, r6}
 80017d2:	f000 fc2b 	bl	800202c <xTaskCreateStatic>
 80017d6:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80017d8:	9805      	ldr	r0, [sp, #20]
}
 80017da:	b006      	add	sp, #24
 80017dc:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 80017de:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80017e0:	bf14      	ite	ne
 80017e2:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80017e4:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80017e6:	ad05      	add	r5, sp, #20
 80017e8:	b292      	uxth	r2, r2
 80017ea:	e88d 0030 	stmia.w	sp, {r4, r5}
 80017ee:	f000 fc54 	bl	800209a <xTaskCreate>
 80017f2:	2801      	cmp	r0, #1
 80017f4:	d0f0      	beq.n	80017d8 <osThreadCreate+0x2e>
      return NULL;
 80017f6:	2000      	movs	r0, #0
 80017f8:	e7ef      	b.n	80017da <osThreadCreate+0x30>

080017fa <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017fa:	f100 0308 	add.w	r3, r0, #8
 80017fe:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001800:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001804:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001806:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001808:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800180a:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800180c:	6003      	str	r3, [r0, #0]
 800180e:	4770      	bx	lr

08001810 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001810:	2300      	movs	r3, #0
 8001812:	6103      	str	r3, [r0, #16]
 8001814:	4770      	bx	lr

08001816 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001816:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001818:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001822:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001824:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001826:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001828:	3301      	adds	r3, #1
 800182a:	6003      	str	r3, [r0, #0]
 800182c:	4770      	bx	lr

0800182e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800182e:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001830:	1c53      	adds	r3, r2, #1
{
 8001832:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001834:	d10a      	bne.n	800184c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001836:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800183c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800183e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001840:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001842:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001844:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001846:	3301      	adds	r3, #1
 8001848:	6003      	str	r3, [r0, #0]
 800184a:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800184c:	f100 0308 	add.w	r3, r0, #8
 8001850:	685c      	ldr	r4, [r3, #4]
 8001852:	6825      	ldr	r5, [r4, #0]
 8001854:	42aa      	cmp	r2, r5
 8001856:	d3ef      	bcc.n	8001838 <vListInsert+0xa>
 8001858:	4623      	mov	r3, r4
 800185a:	e7f9      	b.n	8001850 <vListInsert+0x22>

0800185c <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800185c:	6841      	ldr	r1, [r0, #4]
 800185e:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001860:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001862:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001864:	6882      	ldr	r2, [r0, #8]
 8001866:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001868:	6859      	ldr	r1, [r3, #4]
 800186a:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800186c:	bf08      	it	eq
 800186e:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001870:	2200      	movs	r2, #0
 8001872:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	3a01      	subs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800187a:	6818      	ldr	r0, [r3, #0]
}
 800187c:	4770      	bx	lr
	...

08001880 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001880:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001886:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <prvTaskExitError+0x3c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	3301      	adds	r3, #1
 800188c:	d008      	beq.n	80018a0 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800188e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001892:	f383 8811 	msr	BASEPRI, r3
 8001896:	f3bf 8f6f 	isb	sy
 800189a:	f3bf 8f4f 	dsb	sy
 800189e:	e7fe      	b.n	800189e <prvTaskExitError+0x1e>
 80018a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018a4:	f383 8811 	msr	BASEPRI, r3
 80018a8:	f3bf 8f6f 	isb	sy
 80018ac:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80018b0:	9b01      	ldr	r3, [sp, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0fc      	beq.n	80018b0 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80018b6:	b002      	add	sp, #8
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000000 	.word	0x20000000

080018c0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80018c0:	4808      	ldr	r0, [pc, #32]	; (80018e4 <prvPortStartFirstTask+0x24>)
 80018c2:	6800      	ldr	r0, [r0, #0]
 80018c4:	6800      	ldr	r0, [r0, #0]
 80018c6:	f380 8808 	msr	MSP, r0
 80018ca:	f04f 0000 	mov.w	r0, #0
 80018ce:	f380 8814 	msr	CONTROL, r0
 80018d2:	b662      	cpsie	i
 80018d4:	b661      	cpsie	f
 80018d6:	f3bf 8f4f 	dsb	sy
 80018da:	f3bf 8f6f 	isb	sy
 80018de:	df00      	svc	0
 80018e0:	bf00      	nop
 80018e2:	0000      	.short	0x0000
 80018e4:	e000ed08 	.word	0xe000ed08

080018e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80018e8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80018f8 <vPortEnableVFP+0x10>
 80018ec:	6801      	ldr	r1, [r0, #0]
 80018ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80018f2:	6001      	str	r1, [r0, #0]
 80018f4:	4770      	bx	lr
 80018f6:	0000      	.short	0x0000
 80018f8:	e000ed88 	.word	0xe000ed88

080018fc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80018fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001900:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001904:	4b07      	ldr	r3, [pc, #28]	; (8001924 <pxPortInitialiseStack+0x28>)
 8001906:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800190a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800190e:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001912:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001916:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800191a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800191e:	3844      	subs	r0, #68	; 0x44
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	08001881 	.word	0x08001881
	...

08001930 <SVC_Handler>:
	__asm volatile (
 8001930:	4b07      	ldr	r3, [pc, #28]	; (8001950 <pxCurrentTCBConst2>)
 8001932:	6819      	ldr	r1, [r3, #0]
 8001934:	6808      	ldr	r0, [r1, #0]
 8001936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800193a:	f380 8809 	msr	PSP, r0
 800193e:	f3bf 8f6f 	isb	sy
 8001942:	f04f 0000 	mov.w	r0, #0
 8001946:	f380 8811 	msr	BASEPRI, r0
 800194a:	4770      	bx	lr
 800194c:	f3af 8000 	nop.w

08001950 <pxCurrentTCBConst2>:
 8001950:	20003c50 	.word	0x20003c50

08001954 <vPortEnterCritical>:
 8001954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001958:	f383 8811 	msr	BASEPRI, r3
 800195c:	f3bf 8f6f 	isb	sy
 8001960:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001964:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <vPortEnterCritical+0x3c>)
 8001966:	6813      	ldr	r3, [r2, #0]
 8001968:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800196a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800196c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800196e:	d10d      	bne.n	800198c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <vPortEnterCritical+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001978:	d008      	beq.n	800198c <vPortEnterCritical+0x38>
 800197a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800197e:	f383 8811 	msr	BASEPRI, r3
 8001982:	f3bf 8f6f 	isb	sy
 8001986:	f3bf 8f4f 	dsb	sy
 800198a:	e7fe      	b.n	800198a <vPortEnterCritical+0x36>
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20000000 	.word	0x20000000
 8001994:	e000ed04 	.word	0xe000ed04

08001998 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001998:	4a08      	ldr	r2, [pc, #32]	; (80019bc <vPortExitCritical+0x24>)
 800199a:	6813      	ldr	r3, [r2, #0]
 800199c:	b943      	cbnz	r3, 80019b0 <vPortExitCritical+0x18>
 800199e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019a2:	f383 8811 	msr	BASEPRI, r3
 80019a6:	f3bf 8f6f 	isb	sy
 80019aa:	f3bf 8f4f 	dsb	sy
 80019ae:	e7fe      	b.n	80019ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80019b0:	3b01      	subs	r3, #1
 80019b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80019b4:	b90b      	cbnz	r3, 80019ba <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80019b6:	f383 8811 	msr	BASEPRI, r3
 80019ba:	4770      	bx	lr
 80019bc:	20000000 	.word	0x20000000

080019c0 <PendSV_Handler>:
	__asm volatile
 80019c0:	f3ef 8009 	mrs	r0, PSP
 80019c4:	f3bf 8f6f 	isb	sy
 80019c8:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <pxCurrentTCBConst>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	f01e 0f10 	tst.w	lr, #16
 80019d0:	bf08      	it	eq
 80019d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80019d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019da:	6010      	str	r0, [r2, #0]
 80019dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80019e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80019e4:	f380 8811 	msr	BASEPRI, r0
 80019e8:	f3bf 8f4f 	dsb	sy
 80019ec:	f3bf 8f6f 	isb	sy
 80019f0:	f000 fcec 	bl	80023cc <vTaskSwitchContext>
 80019f4:	f04f 0000 	mov.w	r0, #0
 80019f8:	f380 8811 	msr	BASEPRI, r0
 80019fc:	bc09      	pop	{r0, r3}
 80019fe:	6819      	ldr	r1, [r3, #0]
 8001a00:	6808      	ldr	r0, [r1, #0]
 8001a02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a06:	f01e 0f10 	tst.w	lr, #16
 8001a0a:	bf08      	it	eq
 8001a0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001a10:	f380 8809 	msr	PSP, r0
 8001a14:	f3bf 8f6f 	isb	sy
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	f3af 8000 	nop.w

08001a20 <pxCurrentTCBConst>:
 8001a20:	20003c50 	.word	0x20003c50

08001a24 <SysTick_Handler>:
{
 8001a24:	b508      	push	{r3, lr}
	__asm volatile
 8001a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a2a:	f383 8811 	msr	BASEPRI, r3
 8001a2e:	f3bf 8f6f 	isb	sy
 8001a32:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001a36:	f000 fb9b 	bl	8002170 <xTaskIncrementTick>
 8001a3a:	b118      	cbz	r0, 8001a44 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <SysTick_Handler+0x28>)
 8001a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a42:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001a44:	2300      	movs	r3, #0
 8001a46:	f383 8811 	msr	BASEPRI, r3
 8001a4a:	bd08      	pop	{r3, pc}
 8001a4c:	e000ed04 	.word	0xe000ed04

08001a50 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001a50:	4a08      	ldr	r2, [pc, #32]	; (8001a74 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001a52:	4909      	ldr	r1, [pc, #36]	; (8001a78 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001a58:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <vPortSetupTimerInterrupt+0x2c>)
 8001a5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a66:	4906      	ldr	r1, [pc, #24]	; (8001a80 <vPortSetupTimerInterrupt+0x30>)
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001a6c:	2307      	movs	r3, #7
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000e010 	.word	0xe000e010
 8001a78:	e000e018 	.word	0xe000e018
 8001a7c:	20000010 	.word	0x20000010
 8001a80:	e000e014 	.word	0xe000e014

08001a84 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001a84:	4b39      	ldr	r3, [pc, #228]	; (8001b6c <xPortStartScheduler+0xe8>)
 8001a86:	4a3a      	ldr	r2, [pc, #232]	; (8001b70 <xPortStartScheduler+0xec>)
{
 8001a88:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001a8a:	6819      	ldr	r1, [r3, #0]
 8001a8c:	4291      	cmp	r1, r2
 8001a8e:	d108      	bne.n	8001aa2 <xPortStartScheduler+0x1e>
	__asm volatile
 8001a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a94:	f383 8811 	msr	BASEPRI, r3
 8001a98:	f3bf 8f6f 	isb	sy
 8001a9c:	f3bf 8f4f 	dsb	sy
 8001aa0:	e7fe      	b.n	8001aa0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b33      	ldr	r3, [pc, #204]	; (8001b74 <xPortStartScheduler+0xf0>)
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d108      	bne.n	8001abc <xPortStartScheduler+0x38>
 8001aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aae:	f383 8811 	msr	BASEPRI, r3
 8001ab2:	f3bf 8f6f 	isb	sy
 8001ab6:	f3bf 8f4f 	dsb	sy
 8001aba:	e7fe      	b.n	8001aba <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001abc:	4b2e      	ldr	r3, [pc, #184]	; (8001b78 <xPortStartScheduler+0xf4>)
 8001abe:	781a      	ldrb	r2, [r3, #0]
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001ac4:	22ff      	movs	r2, #255	; 0xff
 8001ac6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001ac8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001aca:	4a2c      	ldr	r2, [pc, #176]	; (8001b7c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001ad2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001ad6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ada:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001adc:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <xPortStartScheduler+0xfc>)
 8001ade:	2207      	movs	r2, #7
 8001ae0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001ae8:	0600      	lsls	r0, r0, #24
 8001aea:	f102 34ff 	add.w	r4, r2, #4294967295
 8001aee:	d40d      	bmi.n	8001b0c <xPortStartScheduler+0x88>
 8001af0:	b101      	cbz	r1, 8001af4 <xPortStartScheduler+0x70>
 8001af2:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	2a03      	cmp	r2, #3
 8001af8:	d011      	beq.n	8001b1e <xPortStartScheduler+0x9a>
 8001afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001afe:	f383 8811 	msr	BASEPRI, r3
 8001b02:	f3bf 8f6f 	isb	sy
 8001b06:	f3bf 8f4f 	dsb	sy
 8001b0a:	e7fe      	b.n	8001b0a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001b0c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001b10:	0052      	lsls	r2, r2, #1
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	f88d 2003 	strb.w	r2, [sp, #3]
 8001b18:	2101      	movs	r1, #1
 8001b1a:	4622      	mov	r2, r4
 8001b1c:	e7e2      	b.n	8001ae4 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001b1e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001b20:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001b24:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001b26:	9b01      	ldr	r3, [sp, #4]
 8001b28:	4a13      	ldr	r2, [pc, #76]	; (8001b78 <xPortStartScheduler+0xf4>)
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <xPortStartScheduler+0x100>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001b36:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001b3e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001b40:	f7ff ff86 	bl	8001a50 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001b44:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <xPortStartScheduler+0x104>)
 8001b46:	2400      	movs	r4, #0
 8001b48:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8001b4a:	f7ff fecd 	bl	80018e8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001b4e:	4a0f      	ldr	r2, [pc, #60]	; (8001b8c <xPortStartScheduler+0x108>)
 8001b50:	6813      	ldr	r3, [r2, #0]
 8001b52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001b56:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001b58:	f7ff feb2 	bl	80018c0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8001b5c:	f000 fc36 	bl	80023cc <vTaskSwitchContext>
	prvTaskExitError();
 8001b60:	f7ff fe8e 	bl	8001880 <prvTaskExitError>
}
 8001b64:	4620      	mov	r0, r4
 8001b66:	b002      	add	sp, #8
 8001b68:	bd10      	pop	{r4, pc}
 8001b6a:	bf00      	nop
 8001b6c:	e000ed00 	.word	0xe000ed00
 8001b70:	410fc271 	.word	0x410fc271
 8001b74:	410fc270 	.word	0x410fc270
 8001b78:	e000e400 	.word	0xe000e400
 8001b7c:	20000030 	.word	0x20000030
 8001b80:	20000034 	.word	0x20000034
 8001b84:	e000ed20 	.word	0xe000ed20
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	e000ef34 	.word	0xe000ef34

08001b90 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001b90:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001b92:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <prvInsertBlockIntoFreeList+0x40>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4282      	cmp	r2, r0
 8001b98:	d318      	bcc.n	8001bcc <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001b9a:	685c      	ldr	r4, [r3, #4]
 8001b9c:	1919      	adds	r1, r3, r4
 8001b9e:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001ba0:	bf01      	itttt	eq
 8001ba2:	6841      	ldreq	r1, [r0, #4]
 8001ba4:	4618      	moveq	r0, r3
 8001ba6:	1909      	addeq	r1, r1, r4
 8001ba8:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001baa:	6844      	ldr	r4, [r0, #4]
 8001bac:	1901      	adds	r1, r0, r4
 8001bae:	428a      	cmp	r2, r1
 8001bb0:	d107      	bne.n	8001bc2 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001bb2:	4908      	ldr	r1, [pc, #32]	; (8001bd4 <prvInsertBlockIntoFreeList+0x44>)
 8001bb4:	6809      	ldr	r1, [r1, #0]
 8001bb6:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001bb8:	bf1f      	itttt	ne
 8001bba:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001bbc:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001bbe:	1909      	addne	r1, r1, r4
 8001bc0:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001bc2:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001bc4:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001bc6:	bf18      	it	ne
 8001bc8:	6018      	strne	r0, [r3, #0]
 8001bca:	bd10      	pop	{r4, pc}
 8001bcc:	4613      	mov	r3, r2
 8001bce:	e7e1      	b.n	8001b94 <prvInsertBlockIntoFreeList+0x4>
 8001bd0:	20003c48 	.word	0x20003c48
 8001bd4:	20000038 	.word	0x20000038

08001bd8 <pvPortMalloc>:
{
 8001bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bdc:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001bde:	f000 fabf 	bl	8002160 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001be2:	493e      	ldr	r1, [pc, #248]	; (8001cdc <pvPortMalloc+0x104>)
 8001be4:	4d3e      	ldr	r5, [pc, #248]	; (8001ce0 <pvPortMalloc+0x108>)
 8001be6:	680b      	ldr	r3, [r1, #0]
 8001be8:	bb0b      	cbnz	r3, 8001c2e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8001bea:	4a3e      	ldr	r2, [pc, #248]	; (8001ce4 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001bec:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001bee:	bf1f      	itttt	ne
 8001bf0:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001bf2:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001bf6:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8001bfa:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001bfc:	bf14      	ite	ne
 8001bfe:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001c00:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001c04:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8001c06:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001c08:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001c0c:	4e36      	ldr	r6, [pc, #216]	; (8001ce8 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8001c0e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001c10:	2000      	movs	r0, #0
 8001c12:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001c14:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8001c16:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001c18:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001c1a:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001c1c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001c1e:	4b33      	ldr	r3, [pc, #204]	; (8001cec <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001c20:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001c22:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001c24:	4b32      	ldr	r3, [pc, #200]	; (8001cf0 <pvPortMalloc+0x118>)
 8001c26:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001c28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001c2c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001c2e:	682f      	ldr	r7, [r5, #0]
 8001c30:	4227      	tst	r7, r4
 8001c32:	d116      	bne.n	8001c62 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8001c34:	2c00      	cmp	r4, #0
 8001c36:	d041      	beq.n	8001cbc <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8001c38:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001c3c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001c3e:	bf1c      	itt	ne
 8001c40:	f023 0307 	bicne.w	r3, r3, #7
 8001c44:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001c46:	b163      	cbz	r3, 8001c62 <pvPortMalloc+0x8a>
 8001c48:	4a29      	ldr	r2, [pc, #164]	; (8001cf0 <pvPortMalloc+0x118>)
 8001c4a:	6816      	ldr	r6, [r2, #0]
 8001c4c:	42b3      	cmp	r3, r6
 8001c4e:	4690      	mov	r8, r2
 8001c50:	d807      	bhi.n	8001c62 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8001c52:	4a25      	ldr	r2, [pc, #148]	; (8001ce8 <pvPortMalloc+0x110>)
 8001c54:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001c56:	6868      	ldr	r0, [r5, #4]
 8001c58:	4283      	cmp	r3, r0
 8001c5a:	d804      	bhi.n	8001c66 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001c5c:	6809      	ldr	r1, [r1, #0]
 8001c5e:	428d      	cmp	r5, r1
 8001c60:	d107      	bne.n	8001c72 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8001c62:	2400      	movs	r4, #0
 8001c64:	e02a      	b.n	8001cbc <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001c66:	682c      	ldr	r4, [r5, #0]
 8001c68:	2c00      	cmp	r4, #0
 8001c6a:	d0f7      	beq.n	8001c5c <pvPortMalloc+0x84>
 8001c6c:	462a      	mov	r2, r5
 8001c6e:	4625      	mov	r5, r4
 8001c70:	e7f1      	b.n	8001c56 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001c72:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001c74:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001c76:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001c78:	1ac2      	subs	r2, r0, r3
 8001c7a:	2a10      	cmp	r2, #16
 8001c7c:	d90f      	bls.n	8001c9e <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001c7e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c80:	0741      	lsls	r1, r0, #29
 8001c82:	d008      	beq.n	8001c96 <pvPortMalloc+0xbe>
 8001c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c88:	f383 8811 	msr	BASEPRI, r3
 8001c8c:	f3bf 8f6f 	isb	sy
 8001c90:	f3bf 8f4f 	dsb	sy
 8001c94:	e7fe      	b.n	8001c94 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001c96:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001c98:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001c9a:	f7ff ff79 	bl	8001b90 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001c9e:	4913      	ldr	r1, [pc, #76]	; (8001cec <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001ca0:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001ca2:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001ca4:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001ca6:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001ca8:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8001caa:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001cae:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001cb2:	bf38      	it	cc
 8001cb4:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001cb6:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001cb8:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001cba:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001cbc:	f000 faea 	bl	8002294 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001cc0:	0763      	lsls	r3, r4, #29
 8001cc2:	d008      	beq.n	8001cd6 <pvPortMalloc+0xfe>
 8001cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc8:	f383 8811 	msr	BASEPRI, r3
 8001ccc:	f3bf 8f6f 	isb	sy
 8001cd0:	f3bf 8f4f 	dsb	sy
 8001cd4:	e7fe      	b.n	8001cd4 <pvPortMalloc+0xfc>
}
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cdc:	20000038 	.word	0x20000038
 8001ce0:	20003c3c 	.word	0x20003c3c
 8001ce4:	2000003c 	.word	0x2000003c
 8001ce8:	20003c48 	.word	0x20003c48
 8001cec:	20003c44 	.word	0x20003c44
 8001cf0:	20003c40 	.word	0x20003c40

08001cf4 <vPortFree>:
{
 8001cf4:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001cf6:	4604      	mov	r4, r0
 8001cf8:	b370      	cbz	r0, 8001d58 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001cfa:	4a18      	ldr	r2, [pc, #96]	; (8001d5c <vPortFree+0x68>)
 8001cfc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001d00:	6812      	ldr	r2, [r2, #0]
 8001d02:	4213      	tst	r3, r2
 8001d04:	d108      	bne.n	8001d18 <vPortFree+0x24>
 8001d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d0a:	f383 8811 	msr	BASEPRI, r3
 8001d0e:	f3bf 8f6f 	isb	sy
 8001d12:	f3bf 8f4f 	dsb	sy
 8001d16:	e7fe      	b.n	8001d16 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001d18:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001d1c:	b141      	cbz	r1, 8001d30 <vPortFree+0x3c>
 8001d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d22:	f383 8811 	msr	BASEPRI, r3
 8001d26:	f3bf 8f6f 	isb	sy
 8001d2a:	f3bf 8f4f 	dsb	sy
 8001d2e:	e7fe      	b.n	8001d2e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001d30:	ea23 0302 	bic.w	r3, r3, r2
 8001d34:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001d38:	f000 fa12 	bl	8002160 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001d3c:	4a08      	ldr	r2, [pc, #32]	; (8001d60 <vPortFree+0x6c>)
 8001d3e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8001d42:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001d44:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001d48:	440b      	add	r3, r1
 8001d4a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001d4c:	f7ff ff20 	bl	8001b90 <prvInsertBlockIntoFreeList>
}
 8001d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8001d54:	f000 ba9e 	b.w	8002294 <xTaskResumeAll>
 8001d58:	bd10      	pop	{r4, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20003c3c 	.word	0x20003c3c
 8001d60:	20003c40 	.word	0x20003c40

08001d64 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d68:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001d6a:	f7ff fdf3 	bl	8001954 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001d6e:	4b2d      	ldr	r3, [pc, #180]	; (8001e24 <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8001d70:	4c2d      	ldr	r4, [pc, #180]	; (8001e28 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4f2d      	ldr	r7, [pc, #180]	; (8001e2c <prvAddNewTaskToReadyList+0xc8>)
 8001d76:	3201      	adds	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001d7a:	6825      	ldr	r5, [r4, #0]
 8001d7c:	2d00      	cmp	r5, #0
 8001d7e:	d145      	bne.n	8001e0c <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001d80:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d11c      	bne.n	8001dc2 <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001d88:	1978      	adds	r0, r7, r5
 8001d8a:	3514      	adds	r5, #20
 8001d8c:	f7ff fd35 	bl	80017fa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d90:	2d8c      	cmp	r5, #140	; 0x8c
 8001d92:	d1f9      	bne.n	8001d88 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001d94:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8001e58 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8001d98:	4d25      	ldr	r5, [pc, #148]	; (8001e30 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 8001d9a:	4640      	mov	r0, r8
 8001d9c:	f7ff fd2d 	bl	80017fa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001da0:	4628      	mov	r0, r5
 8001da2:	f7ff fd2a 	bl	80017fa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001da6:	4823      	ldr	r0, [pc, #140]	; (8001e34 <prvAddNewTaskToReadyList+0xd0>)
 8001da8:	f7ff fd27 	bl	80017fa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001dac:	4822      	ldr	r0, [pc, #136]	; (8001e38 <prvAddNewTaskToReadyList+0xd4>)
 8001dae:	f7ff fd24 	bl	80017fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001db2:	4822      	ldr	r0, [pc, #136]	; (8001e3c <prvAddNewTaskToReadyList+0xd8>)
 8001db4:	f7ff fd21 	bl	80017fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001db8:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <prvAddNewTaskToReadyList+0xdc>)
 8001dba:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001dbe:	4b21      	ldr	r3, [pc, #132]	; (8001e44 <prvAddNewTaskToReadyList+0xe0>)
 8001dc0:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8001dc2:	4a21      	ldr	r2, [pc, #132]	; (8001e48 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 8001dc4:	4921      	ldr	r1, [pc, #132]	; (8001e4c <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8001dc6:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001dc8:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001dca:	3301      	adds	r3, #1
 8001dcc:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001dce:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	4093      	lsls	r3, r2
 8001dd4:	4303      	orrs	r3, r0
 8001dd6:	2014      	movs	r0, #20
 8001dd8:	600b      	str	r3, [r1, #0]
 8001dda:	fb00 7002 	mla	r0, r0, r2, r7
 8001dde:	1d31      	adds	r1, r6, #4
 8001de0:	f7ff fd19 	bl	8001816 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001de4:	f7ff fdd8 	bl	8001998 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001de8:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <prvAddNewTaskToReadyList+0xec>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	b163      	cbz	r3, 8001e08 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001dee:	6823      	ldr	r3, [r4, #0]
 8001df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d207      	bcs.n	8001e08 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8001df8:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <prvAddNewTaskToReadyList+0xf0>)
 8001dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	f3bf 8f4f 	dsb	sy
 8001e04:	f3bf 8f6f 	isb	sy
 8001e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8001e0c:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <prvAddNewTaskToReadyList+0xec>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1d6      	bne.n	8001dc2 <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001e14:	6823      	ldr	r3, [r4, #0]
 8001e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e18:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001e1a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001e1c:	bf98      	it	ls
 8001e1e:	6026      	strls	r6, [r4, #0]
 8001e20:	e7cf      	b.n	8001dc2 <prvAddNewTaskToReadyList+0x5e>
 8001e22:	bf00      	nop
 8001e24:	20003ce8 	.word	0x20003ce8
 8001e28:	20003c50 	.word	0x20003c50
 8001e2c:	20003c5c 	.word	0x20003c5c
 8001e30:	20003d14 	.word	0x20003d14
 8001e34:	20003d30 	.word	0x20003d30
 8001e38:	20003d5c 	.word	0x20003d5c
 8001e3c:	20003d48 	.word	0x20003d48
 8001e40:	20003c54 	.word	0x20003c54
 8001e44:	20003c58 	.word	0x20003c58
 8001e48:	20003cf8 	.word	0x20003cf8
 8001e4c:	20003cfc 	.word	0x20003cfc
 8001e50:	20003d44 	.word	0x20003d44
 8001e54:	e000ed04 	.word	0xe000ed04
 8001e58:	20003d00 	.word	0x20003d00

08001e5c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e5c:	4a06      	ldr	r2, [pc, #24]	; (8001e78 <prvResetNextTaskUnblockTime+0x1c>)
 8001e5e:	6813      	ldr	r3, [r2, #0]
 8001e60:	6819      	ldr	r1, [r3, #0]
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <prvResetNextTaskUnblockTime+0x20>)
 8001e64:	b919      	cbnz	r1, 8001e6e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001e66:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001e72:	68d2      	ldr	r2, [r2, #12]
 8001e74:	6852      	ldr	r2, [r2, #4]
 8001e76:	e7f8      	b.n	8001e6a <prvResetNextTaskUnblockTime+0xe>
 8001e78:	20003c54 	.word	0x20003c54
 8001e7c:	20003d28 	.word	0x20003d28

08001e80 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8001e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001e86:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001e8a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8001e8c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001e90:	3a01      	subs	r2, #1
 8001e92:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8001e96:	469a      	mov	sl, r3
 8001e98:	4681      	mov	r9, r0
 8001e9a:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001e9c:	f026 0607 	bic.w	r6, r6, #7
 8001ea0:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8001ea4:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001ea6:	7858      	ldrb	r0, [r3, #1]
 8001ea8:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001eac:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8001eb0:	b108      	cbz	r0, 8001eb6 <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001eb2:	428b      	cmp	r3, r1
 8001eb4:	d1f7      	bne.n	8001ea6 <prvInitialiseNewTask.isra.2+0x26>
 8001eb6:	9d08      	ldr	r5, [sp, #32]
 8001eb8:	2d06      	cmp	r5, #6
 8001eba:	bf28      	it	cs
 8001ebc:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001ebe:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 8001ec0:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001ec2:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001ec4:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001ec6:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8001eca:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001ecc:	f7ff fca0 	bl	8001810 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ed0:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001ed4:	f104 0018 	add.w	r0, r4, #24
 8001ed8:	f7ff fc9a 	bl	8001810 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001edc:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001ede:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ee0:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001ee2:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001ee4:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001ee8:	4652      	mov	r2, sl
 8001eea:	4649      	mov	r1, r9
 8001eec:	4630      	mov	r0, r6
 8001eee:	f7ff fd05 	bl	80018fc <pxPortInitialiseStack>
 8001ef2:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001ef4:	f1b8 0f00 	cmp.w	r8, #0
 8001ef8:	d001      	beq.n	8001efe <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001efa:	f8c8 4000 	str.w	r4, [r8]
 8001efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001f02 <prvDeleteTCB>:
	{
 8001f02:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001f04:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8001f08:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001f0a:	b93b      	cbnz	r3, 8001f1c <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8001f0c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001f0e:	f7ff fef1 	bl	8001cf4 <vPortFree>
				vPortFree( pxTCB );
 8001f12:	4620      	mov	r0, r4
	}
 8001f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8001f18:	f7ff beec 	b.w	8001cf4 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d0f9      	beq.n	8001f14 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d008      	beq.n	8001f36 <prvDeleteTCB+0x34>
 8001f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f28:	f383 8811 	msr	BASEPRI, r3
 8001f2c:	f3bf 8f6f 	isb	sy
 8001f30:	f3bf 8f4f 	dsb	sy
 8001f34:	e7fe      	b.n	8001f34 <prvDeleteTCB+0x32>
 8001f36:	bd10      	pop	{r4, pc}

08001f38 <prvIdleTask>:
{
 8001f38:	b580      	push	{r7, lr}
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001f3a:	4e14      	ldr	r6, [pc, #80]	; (8001f8c <prvIdleTask+0x54>)
				taskYIELD();
 8001f3c:	4f14      	ldr	r7, [pc, #80]	; (8001f90 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f3e:	4c15      	ldr	r4, [pc, #84]	; (8001f94 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8001f40:	4d15      	ldr	r5, [pc, #84]	; (8001f98 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f42:	6823      	ldr	r3, [r4, #0]
 8001f44:	b96b      	cbnz	r3, 8001f62 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <prvIdleTask+0x64>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d906      	bls.n	8001f5c <prvIdleTask+0x24>
				taskYIELD();
 8001f4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	f3bf 8f4f 	dsb	sy
 8001f58:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8001f5c:	f000 fa70 	bl	8002440 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8001f60:	e7ed      	b.n	8001f3e <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8001f62:	f7ff fcf7 	bl	8001954 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001f66:	68f3      	ldr	r3, [r6, #12]
 8001f68:	f8d3 800c 	ldr.w	r8, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f6c:	f108 0004 	add.w	r0, r8, #4
 8001f70:	f7ff fc74 	bl	800185c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001f74:	682b      	ldr	r3, [r5, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001f7a:	6823      	ldr	r3, [r4, #0]
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8001f80:	f7ff fd0a 	bl	8001998 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8001f84:	4640      	mov	r0, r8
 8001f86:	f7ff ffbc 	bl	8001f02 <prvDeleteTCB>
 8001f8a:	e7da      	b.n	8001f42 <prvIdleTask+0xa>
 8001f8c:	20003d5c 	.word	0x20003d5c
 8001f90:	e000ed04 	.word	0xe000ed04
 8001f94:	20003cec 	.word	0x20003cec
 8001f98:	20003ce8 	.word	0x20003ce8
 8001f9c:	20003c5c 	.word	0x20003c5c

08001fa0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001fa2:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001fa4:	4e1b      	ldr	r6, [pc, #108]	; (8002014 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8001fa6:	681d      	ldr	r5, [r3, #0]
{
 8001fa8:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001faa:	6830      	ldr	r0, [r6, #0]
 8001fac:	3004      	adds	r0, #4
{
 8001fae:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001fb0:	f7ff fc54 	bl	800185c <uxListRemove>
 8001fb4:	4633      	mov	r3, r6
 8001fb6:	b940      	cbnz	r0, 8001fca <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001fb8:	6831      	ldr	r1, [r6, #0]
 8001fba:	4e17      	ldr	r6, [pc, #92]	; (8002018 <prvAddCurrentTaskToDelayedList+0x78>)
 8001fbc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001fbe:	6832      	ldr	r2, [r6, #0]
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	4088      	lsls	r0, r1
 8001fc4:	ea22 0200 	bic.w	r2, r2, r0
 8001fc8:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001fca:	1c62      	adds	r2, r4, #1
 8001fcc:	d107      	bne.n	8001fde <prvAddCurrentTaskToDelayedList+0x3e>
 8001fce:	b137      	cbz	r7, 8001fde <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001fd0:	6819      	ldr	r1, [r3, #0]
 8001fd2:	4812      	ldr	r0, [pc, #72]	; (800201c <prvAddCurrentTaskToDelayedList+0x7c>)
 8001fd4:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001fd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001fda:	f7ff bc1c 	b.w	8001816 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001fde:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001fe0:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8001fe2:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001fe4:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8001fe6:	d907      	bls.n	8001ff8 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001fe8:	4a0d      	ldr	r2, [pc, #52]	; (8002020 <prvAddCurrentTaskToDelayedList+0x80>)
 8001fea:	6810      	ldr	r0, [r2, #0]
 8001fec:	6819      	ldr	r1, [r3, #0]
}
 8001fee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ff2:	3104      	adds	r1, #4
 8001ff4:	f7ff bc1b 	b.w	800182e <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ff8:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <prvAddCurrentTaskToDelayedList+0x84>)
 8001ffa:	6810      	ldr	r0, [r2, #0]
 8001ffc:	6819      	ldr	r1, [r3, #0]
 8001ffe:	3104      	adds	r1, #4
 8002000:	f7ff fc15 	bl	800182e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002004:	4b08      	ldr	r3, [pc, #32]	; (8002028 <prvAddCurrentTaskToDelayedList+0x88>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800200a:	bf38      	it	cc
 800200c:	601c      	strcc	r4, [r3, #0]
 800200e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002010:	20003d70 	.word	0x20003d70
 8002014:	20003c50 	.word	0x20003c50
 8002018:	20003cfc 	.word	0x20003cfc
 800201c:	20003d48 	.word	0x20003d48
 8002020:	20003c58 	.word	0x20003c58
 8002024:	20003c54 	.word	0x20003c54
 8002028:	20003d28 	.word	0x20003d28

0800202c <xTaskCreateStatic>:
	{
 800202c:	b570      	push	{r4, r5, r6, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002032:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8002034:	b945      	cbnz	r5, 8002048 <xTaskCreateStatic+0x1c>
 8002036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800203a:	f383 8811 	msr	BASEPRI, r3
 800203e:	f3bf 8f6f 	isb	sy
 8002042:	f3bf 8f4f 	dsb	sy
 8002046:	e7fe      	b.n	8002046 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8002048:	b944      	cbnz	r4, 800205c <xTaskCreateStatic+0x30>
 800204a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800204e:	f383 8811 	msr	BASEPRI, r3
 8002052:	f3bf 8f6f 	isb	sy
 8002056:	f3bf 8f4f 	dsb	sy
 800205a:	e7fe      	b.n	800205a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800205c:	2654      	movs	r6, #84	; 0x54
 800205e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002060:	9e04      	ldr	r6, [sp, #16]
 8002062:	2e54      	cmp	r6, #84	; 0x54
 8002064:	d008      	beq.n	8002078 <xTaskCreateStatic+0x4c>
 8002066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800206a:	f383 8811 	msr	BASEPRI, r3
 800206e:	f3bf 8f6f 	isb	sy
 8002072:	f3bf 8f4f 	dsb	sy
 8002076:	e7fe      	b.n	8002076 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002078:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800207a:	2502      	movs	r5, #2
 800207c:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002080:	ad05      	add	r5, sp, #20
 8002082:	9501      	str	r5, [sp, #4]
 8002084:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002086:	9402      	str	r4, [sp, #8]
 8002088:	9500      	str	r5, [sp, #0]
 800208a:	f7ff fef9 	bl	8001e80 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800208e:	4620      	mov	r0, r4
 8002090:	f7ff fe68 	bl	8001d64 <prvAddNewTaskToReadyList>
	}
 8002094:	9805      	ldr	r0, [sp, #20]
 8002096:	b006      	add	sp, #24
 8002098:	bd70      	pop	{r4, r5, r6, pc}

0800209a <xTaskCreate>:
	{
 800209a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800209e:	4607      	mov	r7, r0
 80020a0:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020a2:	0090      	lsls	r0, r2, #2
	{
 80020a4:	4688      	mov	r8, r1
 80020a6:	4616      	mov	r6, r2
 80020a8:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020aa:	f7ff fd95 	bl	8001bd8 <pvPortMalloc>
			if( pxStack != NULL )
 80020ae:	4605      	mov	r5, r0
 80020b0:	b1e8      	cbz	r0, 80020ee <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80020b2:	2054      	movs	r0, #84	; 0x54
 80020b4:	f7ff fd90 	bl	8001bd8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80020b8:	4604      	mov	r4, r0
 80020ba:	b1a8      	cbz	r0, 80020e8 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80020bc:	2300      	movs	r3, #0
 80020be:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80020c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 80020c4:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80020ca:	9002      	str	r0, [sp, #8]
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	4632      	mov	r2, r6
 80020d0:	464b      	mov	r3, r9
 80020d2:	4641      	mov	r1, r8
 80020d4:	4638      	mov	r0, r7
 80020d6:	f7ff fed3 	bl	8001e80 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80020da:	4620      	mov	r0, r4
 80020dc:	f7ff fe42 	bl	8001d64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80020e0:	2001      	movs	r0, #1
	}
 80020e2:	b005      	add	sp, #20
 80020e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80020e8:	4628      	mov	r0, r5
 80020ea:	f7ff fe03 	bl	8001cf4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80020ee:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80020f2:	e7f6      	b.n	80020e2 <xTaskCreate+0x48>

080020f4 <vTaskStartScheduler>:
{
 80020f4:	b510      	push	{r4, lr}
 80020f6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80020f8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80020fa:	aa07      	add	r2, sp, #28
 80020fc:	a906      	add	r1, sp, #24
 80020fe:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002100:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002102:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002104:	f000 f99e 	bl	8002444 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002108:	9b05      	ldr	r3, [sp, #20]
 800210a:	9302      	str	r3, [sp, #8]
 800210c:	9b06      	ldr	r3, [sp, #24]
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	9400      	str	r4, [sp, #0]
 8002112:	4623      	mov	r3, r4
 8002114:	9a07      	ldr	r2, [sp, #28]
 8002116:	490d      	ldr	r1, [pc, #52]	; (800214c <vTaskStartScheduler+0x58>)
 8002118:	480d      	ldr	r0, [pc, #52]	; (8002150 <vTaskStartScheduler+0x5c>)
 800211a:	f7ff ff87 	bl	800202c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800211e:	b190      	cbz	r0, 8002146 <vTaskStartScheduler+0x52>
 8002120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002124:	f383 8811 	msr	BASEPRI, r3
 8002128:	f3bf 8f6f 	isb	sy
 800212c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <vTaskStartScheduler+0x60>)
 8002132:	f04f 32ff 	mov.w	r2, #4294967295
 8002136:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002138:	4b07      	ldr	r3, [pc, #28]	; (8002158 <vTaskStartScheduler+0x64>)
 800213a:	2201      	movs	r2, #1
 800213c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <vTaskStartScheduler+0x68>)
 8002140:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8002142:	f7ff fc9f 	bl	8001a84 <xPortStartScheduler>
}
 8002146:	b008      	add	sp, #32
 8002148:	bd10      	pop	{r4, pc}
 800214a:	bf00      	nop
 800214c:	080033d8 	.word	0x080033d8
 8002150:	08001f39 	.word	0x08001f39
 8002154:	20003d28 	.word	0x20003d28
 8002158:	20003d44 	.word	0x20003d44
 800215c:	20003d70 	.word	0x20003d70

08002160 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002160:	4a02      	ldr	r2, [pc, #8]	; (800216c <vTaskSuspendAll+0xc>)
 8002162:	6813      	ldr	r3, [r2, #0]
 8002164:	3301      	adds	r3, #1
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20003cf4 	.word	0x20003cf4

08002170 <xTaskIncrementTick>:
{
 8002170:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002174:	4b3c      	ldr	r3, [pc, #240]	; (8002268 <xTaskIncrementTick+0xf8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d153      	bne.n	8002224 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800217c:	4b3b      	ldr	r3, [pc, #236]	; (800226c <xTaskIncrementTick+0xfc>)
 800217e:	681c      	ldr	r4, [r3, #0]
 8002180:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8002182:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002184:	b9bc      	cbnz	r4, 80021b6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002186:	4b3a      	ldr	r3, [pc, #232]	; (8002270 <xTaskIncrementTick+0x100>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	6812      	ldr	r2, [r2, #0]
 800218c:	b142      	cbz	r2, 80021a0 <xTaskIncrementTick+0x30>
 800218e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002192:	f383 8811 	msr	BASEPRI, r3
 8002196:	f3bf 8f6f 	isb	sy
 800219a:	f3bf 8f4f 	dsb	sy
 800219e:	e7fe      	b.n	800219e <xTaskIncrementTick+0x2e>
 80021a0:	4a34      	ldr	r2, [pc, #208]	; (8002274 <xTaskIncrementTick+0x104>)
 80021a2:	6819      	ldr	r1, [r3, #0]
 80021a4:	6810      	ldr	r0, [r2, #0]
 80021a6:	6018      	str	r0, [r3, #0]
 80021a8:	6011      	str	r1, [r2, #0]
 80021aa:	4a33      	ldr	r2, [pc, #204]	; (8002278 <xTaskIncrementTick+0x108>)
 80021ac:	6813      	ldr	r3, [r2, #0]
 80021ae:	3301      	adds	r3, #1
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	f7ff fe53 	bl	8001e5c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80021b6:	4d31      	ldr	r5, [pc, #196]	; (800227c <xTaskIncrementTick+0x10c>)
 80021b8:	4f31      	ldr	r7, [pc, #196]	; (8002280 <xTaskIncrementTick+0x110>)
 80021ba:	682b      	ldr	r3, [r5, #0]
 80021bc:	429c      	cmp	r4, r3
 80021be:	f04f 0b00 	mov.w	fp, #0
 80021c2:	d33e      	bcc.n	8002242 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021c4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002270 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80021c8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002290 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021cc:	f8d8 2000 	ldr.w	r2, [r8]
 80021d0:	6812      	ldr	r2, [r2, #0]
 80021d2:	bb72      	cbnz	r2, 8002232 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021d4:	f04f 32ff 	mov.w	r2, #4294967295
 80021d8:	602a      	str	r2, [r5, #0]
					break;
 80021da:	e032      	b.n	8002242 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021dc:	f106 0a04 	add.w	sl, r6, #4
 80021e0:	4650      	mov	r0, sl
 80021e2:	f7ff fb3b 	bl	800185c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80021e6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80021e8:	b119      	cbz	r1, 80021f2 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80021ea:	f106 0018 	add.w	r0, r6, #24
 80021ee:	f7ff fb35 	bl	800185c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80021f2:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80021f4:	f8d9 3000 	ldr.w	r3, [r9]
 80021f8:	2201      	movs	r2, #1
 80021fa:	fa02 f100 	lsl.w	r1, r2, r0
 80021fe:	4319      	orrs	r1, r3
 8002200:	4b20      	ldr	r3, [pc, #128]	; (8002284 <xTaskIncrementTick+0x114>)
 8002202:	f8c9 1000 	str.w	r1, [r9]
 8002206:	f04f 0e14 	mov.w	lr, #20
 800220a:	4651      	mov	r1, sl
 800220c:	fb0e 3000 	mla	r0, lr, r0, r3
 8002210:	f7ff fb01 	bl	8001816 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002214:	6838      	ldr	r0, [r7, #0]
 8002216:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002218:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800221a:	4291      	cmp	r1, r2
 800221c:	bf28      	it	cs
 800221e:	f04f 0b01 	movcs.w	fp, #1
 8002222:	e7d3      	b.n	80021cc <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002224:	4a18      	ldr	r2, [pc, #96]	; (8002288 <xTaskIncrementTick+0x118>)
 8002226:	6813      	ldr	r3, [r2, #0]
 8002228:	3301      	adds	r3, #1
 800222a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800222c:	f04f 0b00 	mov.w	fp, #0
 8002230:	e011      	b.n	8002256 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002232:	f8d8 2000 	ldr.w	r2, [r8]
 8002236:	68d2      	ldr	r2, [r2, #12]
 8002238:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800223a:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 800223c:	428c      	cmp	r4, r1
 800223e:	d2cd      	bcs.n	80021dc <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8002240:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <xTaskIncrementTick+0x114>)
 8002246:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002248:	2214      	movs	r2, #20
 800224a:	434a      	muls	r2, r1
 800224c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800224e:	2a02      	cmp	r2, #2
 8002250:	bf28      	it	cs
 8002252:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8002256:	4a0d      	ldr	r2, [pc, #52]	; (800228c <xTaskIncrementTick+0x11c>)
 8002258:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800225a:	2a00      	cmp	r2, #0
 800225c:	bf18      	it	ne
 800225e:	f04f 0b01 	movne.w	fp, #1
}
 8002262:	4658      	mov	r0, fp
 8002264:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002268:	20003cf4 	.word	0x20003cf4
 800226c:	20003d70 	.word	0x20003d70
 8002270:	20003c54 	.word	0x20003c54
 8002274:	20003c58 	.word	0x20003c58
 8002278:	20003d2c 	.word	0x20003d2c
 800227c:	20003d28 	.word	0x20003d28
 8002280:	20003c50 	.word	0x20003c50
 8002284:	20003c5c 	.word	0x20003c5c
 8002288:	20003cf0 	.word	0x20003cf0
 800228c:	20003d74 	.word	0x20003d74
 8002290:	20003cfc 	.word	0x20003cfc

08002294 <xTaskResumeAll>:
{
 8002294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002298:	4c31      	ldr	r4, [pc, #196]	; (8002360 <xTaskResumeAll+0xcc>)
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	b943      	cbnz	r3, 80022b0 <xTaskResumeAll+0x1c>
 800229e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a2:	f383 8811 	msr	BASEPRI, r3
 80022a6:	f3bf 8f6f 	isb	sy
 80022aa:	f3bf 8f4f 	dsb	sy
 80022ae:	e7fe      	b.n	80022ae <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80022b0:	f7ff fb50 	bl	8001954 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80022b4:	6823      	ldr	r3, [r4, #0]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022ba:	6824      	ldr	r4, [r4, #0]
 80022bc:	b12c      	cbz	r4, 80022ca <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80022be:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80022c0:	f7ff fb6a 	bl	8001998 <vPortExitCritical>
}
 80022c4:	4620      	mov	r0, r4
 80022c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80022ca:	4b26      	ldr	r3, [pc, #152]	; (8002364 <xTaskResumeAll+0xd0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f5      	beq.n	80022be <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80022d2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800237c <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 80022d6:	4f24      	ldr	r7, [pc, #144]	; (8002368 <xTaskResumeAll+0xd4>)
 80022d8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002380 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80022dc:	f8d9 3000 	ldr.w	r3, [r9]
 80022e0:	b9e3      	cbnz	r3, 800231c <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 80022e2:	b10c      	cbz	r4, 80022e8 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 80022e4:	f7ff fdba 	bl	8001e5c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80022e8:	4d20      	ldr	r5, [pc, #128]	; (800236c <xTaskResumeAll+0xd8>)
 80022ea:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80022ec:	b144      	cbz	r4, 8002300 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80022ee:	4e20      	ldr	r6, [pc, #128]	; (8002370 <xTaskResumeAll+0xdc>)
 80022f0:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80022f2:	f7ff ff3d 	bl	8002170 <xTaskIncrementTick>
 80022f6:	b100      	cbz	r0, 80022fa <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 80022f8:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80022fa:	3c01      	subs	r4, #1
 80022fc:	d1f9      	bne.n	80022f2 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80022fe:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002300:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <xTaskResumeAll+0xdc>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0da      	beq.n	80022be <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002308:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <xTaskResumeAll+0xe0>)
 800230a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	f3bf 8f4f 	dsb	sy
 8002314:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002318:	2401      	movs	r4, #1
 800231a:	e7d1      	b.n	80022c0 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800231c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002320:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002322:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002324:	f104 0018 	add.w	r0, r4, #24
 8002328:	f7ff fa98 	bl	800185c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800232c:	4630      	mov	r0, r6
 800232e:	f7ff fa95 	bl	800185c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002332:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002334:	6839      	ldr	r1, [r7, #0]
 8002336:	2501      	movs	r5, #1
 8002338:	fa05 f302 	lsl.w	r3, r5, r2
 800233c:	2014      	movs	r0, #20
 800233e:	430b      	orrs	r3, r1
 8002340:	fb00 8002 	mla	r0, r0, r2, r8
 8002344:	4631      	mov	r1, r6
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	f7ff fa65 	bl	8001816 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800234c:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <xTaskResumeAll+0xe4>)
 800234e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8002356:	bf24      	itt	cs
 8002358:	4b05      	ldrcs	r3, [pc, #20]	; (8002370 <xTaskResumeAll+0xdc>)
 800235a:	601d      	strcs	r5, [r3, #0]
 800235c:	e7be      	b.n	80022dc <xTaskResumeAll+0x48>
 800235e:	bf00      	nop
 8002360:	20003cf4 	.word	0x20003cf4
 8002364:	20003ce8 	.word	0x20003ce8
 8002368:	20003cfc 	.word	0x20003cfc
 800236c:	20003cf0 	.word	0x20003cf0
 8002370:	20003d74 	.word	0x20003d74
 8002374:	e000ed04 	.word	0xe000ed04
 8002378:	20003c50 	.word	0x20003c50
 800237c:	20003d30 	.word	0x20003d30
 8002380:	20003c5c 	.word	0x20003c5c

08002384 <vTaskDelay>:
	{
 8002384:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002386:	b940      	cbnz	r0, 800239a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002388:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <vTaskDelay+0x40>)
 800238a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	f3bf 8f4f 	dsb	sy
 8002394:	f3bf 8f6f 	isb	sy
 8002398:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800239a:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <vTaskDelay+0x44>)
 800239c:	6819      	ldr	r1, [r3, #0]
 800239e:	b141      	cbz	r1, 80023b2 <vTaskDelay+0x2e>
 80023a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a4:	f383 8811 	msr	BASEPRI, r3
 80023a8:	f3bf 8f6f 	isb	sy
 80023ac:	f3bf 8f4f 	dsb	sy
 80023b0:	e7fe      	b.n	80023b0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80023b2:	f7ff fed5 	bl	8002160 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80023b6:	f7ff fdf3 	bl	8001fa0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80023ba:	f7ff ff6b 	bl	8002294 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80023be:	2800      	cmp	r0, #0
 80023c0:	d0e2      	beq.n	8002388 <vTaskDelay+0x4>
 80023c2:	bd08      	pop	{r3, pc}
 80023c4:	e000ed04 	.word	0xe000ed04
 80023c8:	20003cf4 	.word	0x20003cf4

080023cc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80023cc:	4b17      	ldr	r3, [pc, #92]	; (800242c <vTaskSwitchContext+0x60>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b17      	ldr	r3, [pc, #92]	; (8002430 <vTaskSwitchContext+0x64>)
{
 80023d2:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80023d4:	b112      	cbz	r2, 80023dc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80023d6:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80023dc:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80023de:	4b15      	ldr	r3, [pc, #84]	; (8002434 <vTaskSwitchContext+0x68>)
 80023e0:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	f1c3 031f 	rsb	r3, r3, #31
 80023ec:	2214      	movs	r2, #20
 80023ee:	4912      	ldr	r1, [pc, #72]	; (8002438 <vTaskSwitchContext+0x6c>)
 80023f0:	435a      	muls	r2, r3
 80023f2:	1888      	adds	r0, r1, r2
 80023f4:	588c      	ldr	r4, [r1, r2]
 80023f6:	b944      	cbnz	r4, 800240a <vTaskSwitchContext+0x3e>
	__asm volatile
 80023f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023fc:	f383 8811 	msr	BASEPRI, r3
 8002400:	f3bf 8f6f 	isb	sy
 8002404:	f3bf 8f4f 	dsb	sy
 8002408:	e7fe      	b.n	8002408 <vTaskSwitchContext+0x3c>
 800240a:	6844      	ldr	r4, [r0, #4]
 800240c:	3208      	adds	r2, #8
 800240e:	6864      	ldr	r4, [r4, #4]
 8002410:	6044      	str	r4, [r0, #4]
 8002412:	440a      	add	r2, r1
 8002414:	4294      	cmp	r4, r2
 8002416:	bf04      	itt	eq
 8002418:	6862      	ldreq	r2, [r4, #4]
 800241a:	6042      	streq	r2, [r0, #4]
 800241c:	2214      	movs	r2, #20
 800241e:	fb02 1303 	mla	r3, r2, r3, r1
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	4b05      	ldr	r3, [pc, #20]	; (800243c <vTaskSwitchContext+0x70>)
 8002428:	e7d6      	b.n	80023d8 <vTaskSwitchContext+0xc>
 800242a:	bf00      	nop
 800242c:	20003cf4 	.word	0x20003cf4
 8002430:	20003d74 	.word	0x20003d74
 8002434:	20003cfc 	.word	0x20003cfc
 8002438:	20003c5c 	.word	0x20003c5c
 800243c:	20003c50 	.word	0x20003c50

08002440 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8002440:	4770      	bx	lr
	...

08002444 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002444:	4b03      	ldr	r3, [pc, #12]	; (8002454 <vApplicationGetIdleTaskMemory+0x10>)
 8002446:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <vApplicationGetIdleTaskMemory+0x14>)
 800244a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	20003f78 	.word	0x20003f78
 8002458:	20003d78 	.word	0x20003d78

0800245c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800245c:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
      LD2_TOGGLE();
 800245e:	4c04      	ldr	r4, [pc, #16]	; (8002470 <StartDefaultTask+0x14>)
 8002460:	6963      	ldr	r3, [r4, #20]
 8002462:	f083 0320 	eor.w	r3, r3, #32
 8002466:	6163      	str	r3, [r4, #20]
      vTaskDelay(100);
 8002468:	2064      	movs	r0, #100	; 0x64
 800246a:	f7ff ff8b 	bl	8002384 <vTaskDelay>
 800246e:	e7f7      	b.n	8002460 <StartDefaultTask+0x4>
 8002470:	40020000 	.word	0x40020000

08002474 <Start_ds18b20_task>:
*/
/* USER CODE END Header_Start_ds18b20_task */


void Start_ds18b20_task(void const * argument)
{
 8002474:	b583      	push	{r0, r1, r7, lr}
  {
	  	    if (TM_DS18B20_Is(DS_ROM)) {
	  	  	              /* Everything is done */
	  	  	              if (TM_DS18B20_AllDone(&OW)) {
	  	  	                  /* Read temperature from device */
	  	  	                  if (TM_DS18B20_Read(&OW, DS_ROM, &temp)) {
 8002476:	4c1b      	ldr	r4, [pc, #108]	; (80024e4 <Start_ds18b20_task+0x70>)
	  	  	                      TM_DS18B20_StartAll(&OW);

	  	  	                      temp_int_units = ((uint8_t) temp) % 10;
	  	  	                      temp_int_decimals = ((uint8_t) temp) / 10;

	  	  	                      GPIOB->ODR=numbers[temp_int_decimals];
 8002478:	4d1b      	ldr	r5, [pc, #108]	; (80024e8 <Start_ds18b20_task+0x74>)
	  	    if (TM_DS18B20_Is(DS_ROM)) {
 800247a:	4f1c      	ldr	r7, [pc, #112]	; (80024ec <Start_ds18b20_task+0x78>)
	  	  	              if (TM_DS18B20_AllDone(&OW)) {
 800247c:	4e1c      	ldr	r6, [pc, #112]	; (80024f0 <Start_ds18b20_task+0x7c>)
	  	    if (TM_DS18B20_Is(DS_ROM)) {
 800247e:	481b      	ldr	r0, [pc, #108]	; (80024ec <Start_ds18b20_task+0x78>)
 8002480:	f000 fc1e 	bl	8002cc0 <TM_DS18B20_Is>
 8002484:	2800      	cmp	r0, #0
 8002486:	d0fa      	beq.n	800247e <Start_ds18b20_task+0xa>
	  	  	              if (TM_DS18B20_AllDone(&OW)) {
 8002488:	4819      	ldr	r0, [pc, #100]	; (80024f0 <Start_ds18b20_task+0x7c>)
 800248a:	f000 fcc3 	bl	8002e14 <TM_DS18B20_AllDone>
 800248e:	2800      	cmp	r0, #0
 8002490:	d0f5      	beq.n	800247e <Start_ds18b20_task+0xa>
	  	  	                  if (TM_DS18B20_Read(&OW, DS_ROM, &temp)) {
 8002492:	4622      	mov	r2, r4
 8002494:	4639      	mov	r1, r7
 8002496:	4630      	mov	r0, r6
 8002498:	f000 fb28 	bl	8002aec <TM_DS18B20_Read>
 800249c:	2800      	cmp	r0, #0
 800249e:	d0ee      	beq.n	800247e <Start_ds18b20_task+0xa>
	  	  	                      TM_DS18B20_StartAll(&OW);
 80024a0:	4813      	ldr	r0, [pc, #76]	; (80024f0 <Start_ds18b20_task+0x7c>)
 80024a2:	f000 fb15 	bl	8002ad0 <TM_DS18B20_StartAll>
	  	  	                      temp_int_units = ((uint8_t) temp) % 10;
 80024a6:	edd4 7a00 	vldr	s15, [r4]
 80024aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024ae:	230a      	movs	r3, #10
 80024b0:	edcd 7a01 	vstr	s15, [sp, #4]
 80024b4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80024b8:	fbb1 f2f3 	udiv	r2, r1, r3
 80024bc:	fb03 1312 	mls	r3, r3, r2, r1
 80024c0:	490c      	ldr	r1, [pc, #48]	; (80024f4 <Start_ds18b20_task+0x80>)
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	700b      	strb	r3, [r1, #0]
	  	  	                      temp_int_decimals = ((uint8_t) temp) / 10;
 80024c6:	490c      	ldr	r1, [pc, #48]	; (80024f8 <Start_ds18b20_task+0x84>)
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	700a      	strb	r2, [r1, #0]
	  	  	                      GPIOB->ODR=numbers[temp_int_decimals];
 80024cc:	490b      	ldr	r1, [pc, #44]	; (80024fc <Start_ds18b20_task+0x88>)
 80024ce:	5c8a      	ldrb	r2, [r1, r2]
 80024d0:	616a      	str	r2, [r5, #20]
	  	  	                      GPIOC->ODR=numbers[temp_int_units];
 80024d2:	5cca      	ldrb	r2, [r1, r3]
 80024d4:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <Start_ds18b20_task+0x8c>)


	  	  	                      /* Check temperature */

	  	  	                      vTaskDelay(500);
 80024d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	  	  	                      GPIOC->ODR=numbers[temp_int_units];
 80024da:	615a      	str	r2, [r3, #20]
	  	  	                      vTaskDelay(500);
 80024dc:	f7ff ff52 	bl	8002384 <vTaskDelay>
 80024e0:	e7cb      	b.n	800247a <Start_ds18b20_task+0x6>
 80024e2:	bf00      	nop
 80024e4:	20004074 	.word	0x20004074
 80024e8:	40020400 	.word	0x40020400
 80024ec:	2000406c 	.word	0x2000406c
 80024f0:	2000407c 	.word	0x2000407c
 80024f4:	200040d4 	.word	0x200040d4
 80024f8:	20004078 	.word	0x20004078
 80024fc:	20000004 	.word	0x20000004
 8002500:	40020800 	.word	0x40020800

08002504 <SystemClock_Config>:
{
 8002504:	b530      	push	{r4, r5, lr}
 8002506:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002508:	2234      	movs	r2, #52	; 0x34
 800250a:	2100      	movs	r1, #0
 800250c:	a807      	add	r0, sp, #28
 800250e:	f000 ff2f 	bl	8003370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002512:	2100      	movs	r1, #0
 8002514:	2214      	movs	r2, #20
 8002516:	a802      	add	r0, sp, #8
 8002518:	f000 ff2a 	bl	8003370 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 800251c:	2500      	movs	r5, #0
 800251e:	4b1d      	ldr	r3, [pc, #116]	; (8002594 <SystemClock_Config+0x90>)
 8002520:	9500      	str	r5, [sp, #0]
 8002522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002524:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002528:	641a      	str	r2, [r3, #64]	; 0x40
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002534:	4b18      	ldr	r3, [pc, #96]	; (8002598 <SystemClock_Config+0x94>)
 8002536:	9501      	str	r5, [sp, #4]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002542:	950e      	str	r5, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002544:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002548:	9301      	str	r3, [sp, #4]
 800254a:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800254c:	2301      	movs	r3, #1
 800254e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002550:	2310      	movs	r3, #16
 8002552:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002554:	2308      	movs	r3, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002556:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002558:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800255a:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLN = 180;
 800255c:	23b4      	movs	r3, #180	; 0xb4
 800255e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002560:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002562:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002564:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002566:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002568:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800256a:	f7fe fbe9 	bl	8000d40 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800256e:	f7fe fa85 	bl	8000a7c <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002572:	230f      	movs	r3, #15
 8002574:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002576:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800257a:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800257c:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800257e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002582:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002584:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002586:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002588:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800258a:	f7fe fab3 	bl	8000af4 <HAL_RCC_ClockConfig>
}
 800258e:	b015      	add	sp, #84	; 0x54
 8002590:	bd30      	pop	{r4, r5, pc}
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	40007000 	.word	0x40007000

0800259c <main>:
{
 800259c:	b500      	push	{lr}
 800259e:	b095      	sub	sp, #84	; 0x54
	TM_RCC_InitSystem();
 80025a0:	f000 fe4a 	bl	8003238 <TM_RCC_InitSystem>
	GPIOC->ODR=0xff;
 80025a4:	4c73      	ldr	r4, [pc, #460]	; (8002774 <main+0x1d8>)
	GPIOB->ODR=0xff;
 80025a6:	4a74      	ldr	r2, [pc, #464]	; (8002778 <main+0x1dc>)
	GPIOC->ODR=0xff;
 80025a8:	23ff      	movs	r3, #255	; 0xff
 80025aa:	6163      	str	r3, [r4, #20]
	GPIOB->ODR=0xff;
 80025ac:	6153      	str	r3, [r2, #20]
  HAL_Init();
 80025ae:	f7fd ffb7 	bl	8000520 <HAL_Init>
  TM_OneWire_Init(&OW, GPIOC, GPIO_PIN_9);
 80025b2:	4872      	ldr	r0, [pc, #456]	; (800277c <main+0x1e0>)
 80025b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025b8:	4621      	mov	r1, r4
 80025ba:	f000 fcfb 	bl	8002fb4 <TM_OneWire_Init>
  if (TM_OneWire_First(&OW)) {
 80025be:	486f      	ldr	r0, [pc, #444]	; (800277c <main+0x1e0>)
 80025c0:	f000 fdfa 	bl	80031b8 <TM_OneWire_First>
 80025c4:	b118      	cbz	r0, 80025ce <main+0x32>
      TM_OneWire_GetFullROM(&OW, DS_ROM);
 80025c6:	496e      	ldr	r1, [pc, #440]	; (8002780 <main+0x1e4>)
 80025c8:	486c      	ldr	r0, [pc, #432]	; (800277c <main+0x1e0>)
 80025ca:	f000 fe0c 	bl	80031e6 <TM_OneWire_GetFullROM>
  if (TM_DS18B20_Is(DS_ROM)) {
 80025ce:	486c      	ldr	r0, [pc, #432]	; (8002780 <main+0x1e4>)
 80025d0:	f000 fb76 	bl	8002cc0 <TM_DS18B20_Is>
 80025d4:	b190      	cbz	r0, 80025fc <main+0x60>
          TM_DS18B20_SetResolution(&OW, DS_ROM, TM_DS18B20_Resolution_9bits);
 80025d6:	2209      	movs	r2, #9
 80025d8:	4969      	ldr	r1, [pc, #420]	; (8002780 <main+0x1e4>)
 80025da:	4868      	ldr	r0, [pc, #416]	; (800277c <main+0x1e0>)
 80025dc:	f000 fb08 	bl	8002bf0 <TM_DS18B20_SetResolution>
          TM_DS18B20_SetAlarmHighTemperature(&OW, DS_ROM, 30);
 80025e0:	221e      	movs	r2, #30
 80025e2:	4967      	ldr	r1, [pc, #412]	; (8002780 <main+0x1e4>)
 80025e4:	4865      	ldr	r0, [pc, #404]	; (800277c <main+0x1e0>)
 80025e6:	f000 fbc3 	bl	8002d70 <TM_DS18B20_SetAlarmHighTemperature>
          TM_DS18B20_SetAlarmLowTemperature(&OW, DS_ROM, 10);
 80025ea:	4965      	ldr	r1, [pc, #404]	; (8002780 <main+0x1e4>)
 80025ec:	4863      	ldr	r0, [pc, #396]	; (800277c <main+0x1e0>)
 80025ee:	220a      	movs	r2, #10
 80025f0:	f000 fb6c 	bl	8002ccc <TM_DS18B20_SetAlarmLowTemperature>
          TM_DS18B20_Start(&OW, DS_ROM);
 80025f4:	4962      	ldr	r1, [pc, #392]	; (8002780 <main+0x1e4>)
 80025f6:	4861      	ldr	r0, [pc, #388]	; (800277c <main+0x1e0>)
 80025f8:	f000 fa56 	bl	8002aa8 <TM_DS18B20_Start>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025fc:	2400      	movs	r4, #0
 80025fe:	4d61      	ldr	r5, [pc, #388]	; (8002784 <main+0x1e8>)
  SystemClock_Config();
 8002600:	f7ff ff80 	bl	8002504 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	2214      	movs	r2, #20
 8002606:	2100      	movs	r1, #0
 8002608:	a80d      	add	r0, sp, #52	; 0x34
 800260a:	f000 feb1 	bl	8003370 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800260e:	9402      	str	r4, [sp, #8]
 8002610:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, A_Pin|B_Pin|C_Pin|D_Pin 
 8002612:	4858      	ldr	r0, [pc, #352]	; (8002774 <main+0x1d8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002614:	f043 0304 	orr.w	r3, r3, #4
 8002618:	632b      	str	r3, [r5, #48]	; 0x30
 800261a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	9302      	str	r3, [sp, #8]
 8002622:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002624:	9403      	str	r4, [sp, #12]
 8002626:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800262c:	632b      	str	r3, [r5, #48]	; 0x30
 800262e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002634:	9303      	str	r3, [sp, #12]
 8002636:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002638:	9404      	str	r4, [sp, #16]
 800263a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	632b      	str	r3, [r5, #48]	; 0x30
 8002642:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	9304      	str	r3, [sp, #16]
 800264a:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800264c:	9405      	str	r4, [sp, #20]
 800264e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002650:	f043 0302 	orr.w	r3, r3, #2
 8002654:	632b      	str	r3, [r5, #48]	; 0x30
 8002656:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, A_Pin|B_Pin|C_Pin|D_Pin 
 800265e:	4622      	mov	r2, r4
 8002660:	f240 21ff 	movw	r1, #767	; 0x2ff
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002664:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, A_Pin|B_Pin|C_Pin|D_Pin 
 8002666:	f7fe fa03 	bl	8000a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, A1_Pin|B1_Pin|C1_Pin|D1_Pin|BlueB_Pin
 800266a:	4622      	mov	r2, r4
 800266c:	f242 017f 	movw	r1, #8319	; 0x207f
 8002670:	4841      	ldr	r0, [pc, #260]	; (8002778 <main+0x1dc>)
 8002672:	f7fe f9fd 	bl	8000a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002676:	4622      	mov	r2, r4
 8002678:	2120      	movs	r1, #32
 800267a:	4843      	ldr	r0, [pc, #268]	; (8002788 <main+0x1ec>)
 800267c:	f7fe f9f8 	bl	8000a70 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8002680:	2302      	movs	r3, #2
 8002682:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002684:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002686:	4b41      	ldr	r3, [pc, #260]	; (800278c <main+0x1f0>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002688:	483b      	ldr	r0, [pc, #236]	; (8002778 <main+0x1dc>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800268a:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800268c:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002690:	f7fe f914 	bl	80008bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|D_Pin 
 8002694:	f240 23ff 	movw	r3, #767	; 0x2ff
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002698:	a90d      	add	r1, sp, #52	; 0x34
 800269a:	4836      	ldr	r0, [pc, #216]	; (8002774 <main+0x1d8>)
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|D_Pin 
 800269c:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800269e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a2:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a4:	f7fe f90a 	bl	80008bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 80026a8:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80026aa:	a90d      	add	r1, sp, #52	; 0x34
 80026ac:	4836      	ldr	r0, [pc, #216]	; (8002788 <main+0x1ec>)
  GPIO_InitStruct.Pin = LD2_Pin;
 80026ae:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b0:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b4:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80026b6:	f7fe f901 	bl	80008bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A1_Pin|B1_Pin|C1_Pin|D1_Pin|BlueB_Pin
 80026ba:	f242 037f 	movw	r3, #8319	; 0x207f
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026be:	a90d      	add	r1, sp, #52	; 0x34
 80026c0:	482d      	ldr	r0, [pc, #180]	; (8002778 <main+0x1dc>)
  GPIO_InitStruct.Pin = A1_Pin|B1_Pin|C1_Pin|D1_Pin|BlueB_Pin
 80026c2:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c4:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c8:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ca:	f7fe f8f7 	bl	80008bc <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026ce:	9401      	str	r4, [sp, #4]
 80026d0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80026d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026d6:	632b      	str	r3, [r5, #48]	; 0x30
 80026d8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  htim7.Instance = TIM7;
 80026da:	4d2d      	ldr	r5, [pc, #180]	; (8002790 <main+0x1f4>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80026e0:	2105      	movs	r1, #5
 80026e2:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026e4:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80026e6:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026e8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80026ea:	f7fd ff45 	bl	8000578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80026ee:	2010      	movs	r0, #16
 80026f0:	f7fd ff76 	bl	80005e0 <HAL_NVIC_EnableIRQ>
  htim7.Init.Prescaler = 179;
 80026f4:	4a27      	ldr	r2, [pc, #156]	; (8002794 <main+0x1f8>)
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f6:	60ac      	str	r4, [r5, #8]
  htim7.Init.Prescaler = 179;
 80026f8:	23b3      	movs	r3, #179	; 0xb3
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80026fa:	4628      	mov	r0, r5
  htim7.Init.Prescaler = 179;
 80026fc:	e885 000c 	stmia.w	r5, {r2, r3}
  htim7.Init.Period = 0;
 8002700:	60ec      	str	r4, [r5, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002702:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002704:	940d      	str	r4, [sp, #52]	; 0x34
 8002706:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002708:	f7fe fdd0 	bl	80012ac <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800270c:	a90d      	add	r1, sp, #52	; 0x34
 800270e:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002710:	940d      	str	r4, [sp, #52]	; 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002712:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002714:	f7fe fde4 	bl	80012e0 <HAL_TIMEx_MasterConfigSynchronization>
  huart2.Instance = USART2;
 8002718:	481f      	ldr	r0, [pc, #124]	; (8002798 <main+0x1fc>)
  huart2.Init.BaudRate = 115200;
 800271a:	4920      	ldr	r1, [pc, #128]	; (800279c <main+0x200>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800271c:	4d20      	ldr	r5, [pc, #128]	; (80027a0 <main+0x204>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800271e:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8002720:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002724:	e880 000a 	stmia.w	r0, {r1, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002728:	230c      	movs	r3, #12
 800272a:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800272c:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800272e:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002730:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002732:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002734:	f7fe ff1c 	bl	8001570 <HAL_UART_Init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8002738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800273a:	ae06      	add	r6, sp, #24
 800273c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800273e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002742:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002746:	4621      	mov	r1, r4
 8002748:	a806      	add	r0, sp, #24
 800274a:	f7ff f82e 	bl	80017aa <osThreadCreate>
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <main+0x208>)
  osThreadDef(ds18b20_task, Start_ds18b20_task, osPriorityNormal, 0, 128);
 8002750:	350c      	adds	r5, #12
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002752:	6018      	str	r0, [r3, #0]
  osThreadDef(ds18b20_task, Start_ds18b20_task, osPriorityNormal, 0, 128);
 8002754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002756:	ae0d      	add	r6, sp, #52	; 0x34
 8002758:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800275a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800275e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  ds18b20_taskHandle = osThreadCreate(osThread(ds18b20_task), NULL);
 8002762:	4621      	mov	r1, r4
 8002764:	a80d      	add	r0, sp, #52	; 0x34
 8002766:	f7ff f820 	bl	80017aa <osThreadCreate>
 800276a:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <main+0x20c>)
 800276c:	6018      	str	r0, [r3, #0]
 osKernelStart();
 800276e:	f7ff f817 	bl	80017a0 <osKernelStart>
 8002772:	e7fe      	b.n	8002772 <main+0x1d6>
 8002774:	40020800 	.word	0x40020800
 8002778:	40020400 	.word	0x40020400
 800277c:	2000407c 	.word	0x2000407c
 8002780:	2000406c 	.word	0x2000406c
 8002784:	40023800 	.word	0x40023800
 8002788:	40020000 	.word	0x40020000
 800278c:	10210000 	.word	0x10210000
 8002790:	200040d8 	.word	0x200040d8
 8002794:	40001400 	.word	0x40001400
 8002798:	20004094 	.word	0x20004094
 800279c:	40004400 	.word	0x40004400
 80027a0:	08003398 	.word	0x08003398
 80027a4:	20004008 	.word	0x20004008
 80027a8:	20004090 	.word	0x20004090

080027ac <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80027ac:	6802      	ldr	r2, [r0, #0]
 80027ae:	4b03      	ldr	r3, [pc, #12]	; (80027bc <HAL_TIM_PeriodElapsedCallback+0x10>)
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d101      	bne.n	80027b8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80027b4:	f000 b93a 	b.w	8002a2c <HAL_IncTick>
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40001000 	.word	0x40001000

080027c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027c0:	4770      	bx	lr
	...

080027c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027c4:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c6:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <HAL_MspInit+0x40>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	9200      	str	r2, [sp, #0]
 80027cc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80027ce:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80027d2:	6459      	str	r1, [r3, #68]	; 0x44
 80027d4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80027d6:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80027da:	9100      	str	r1, [sp, #0]
 80027dc:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027de:	9201      	str	r2, [sp, #4]
 80027e0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80027e2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80027e6:	6419      	str	r1, [r3, #64]	; 0x40
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ee:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027f0:	210f      	movs	r1, #15
 80027f2:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 80027f6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027f8:	f7fd febe 	bl	8000578 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027fc:	b003      	add	sp, #12
 80027fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800

08002808 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM7)
 8002808:	6802      	ldr	r2, [r0, #0]
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <HAL_TIM_Base_MspInit+0x28>)
 800280c:	429a      	cmp	r2, r3
{
 800280e:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM7)
 8002810:	d10b      	bne.n	800282a <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	9301      	str	r3, [sp, #4]
 8002816:	4b07      	ldr	r3, [pc, #28]	; (8002834 <HAL_TIM_Base_MspInit+0x2c>)
 8002818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800281a:	f042 0220 	orr.w	r2, r2, #32
 800281e:	641a      	str	r2, [r3, #64]	; 0x40
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f003 0320 	and.w	r3, r3, #32
 8002826:	9301      	str	r3, [sp, #4]
 8002828:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800282a:	b002      	add	sp, #8
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40001400 	.word	0x40001400
 8002834:	40023800 	.word	0x40023800

08002838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002838:	b570      	push	{r4, r5, r6, lr}
 800283a:	4606      	mov	r6, r0
 800283c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283e:	2214      	movs	r2, #20
 8002840:	2100      	movs	r1, #0
 8002842:	a803      	add	r0, sp, #12
 8002844:	f000 fd94 	bl	8003370 <memset>
  if(huart->Instance==USART2)
 8002848:	6832      	ldr	r2, [r6, #0]
 800284a:	4b26      	ldr	r3, [pc, #152]	; (80028e4 <HAL_UART_MspInit+0xac>)
 800284c:	429a      	cmp	r2, r3
 800284e:	d146      	bne.n	80028de <HAL_UART_MspInit+0xa6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002850:	2500      	movs	r5, #0
 8002852:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002856:	9501      	str	r5, [sp, #4]
 8002858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285a:	4823      	ldr	r0, [pc, #140]	; (80028e8 <HAL_UART_MspInit+0xb0>)

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800285c:	4c23      	ldr	r4, [pc, #140]	; (80028ec <HAL_UART_MspInit+0xb4>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800285e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002862:	641a      	str	r2, [r3, #64]	; 0x40
 8002864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002866:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800286a:	9201      	str	r2, [sp, #4]
 800286c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286e:	9502      	str	r5, [sp, #8]
 8002870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	631a      	str	r2, [r3, #48]	; 0x30
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	9302      	str	r3, [sp, #8]
 8002880:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002882:	230c      	movs	r3, #12
 8002884:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002886:	2302      	movs	r3, #2
 8002888:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800288a:	2301      	movs	r3, #1
 800288c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288e:	2303      	movs	r3, #3
 8002890:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002892:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002894:	2307      	movs	r3, #7
 8002896:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002898:	f7fe f810 	bl	80008bc <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800289c:	4a14      	ldr	r2, [pc, #80]	; (80028f0 <HAL_UART_MspInit+0xb8>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800289e:	60a5      	str	r5, [r4, #8]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80028a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80028a4:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ac:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80028ae:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80028b0:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028b4:	60e5      	str	r5, [r4, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028b6:	6165      	str	r5, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028b8:	61a5      	str	r5, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80028ba:	61e3      	str	r3, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028bc:	6225      	str	r5, [r4, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028be:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80028c0:	f7fd feb2 	bl	8000628 <HAL_DMA_Init>
 80028c4:	b108      	cbz	r0, 80028ca <HAL_UART_MspInit+0x92>
    {
      Error_Handler();
 80028c6:	f7ff ff7b 	bl	80027c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80028ca:	6374      	str	r4, [r6, #52]	; 0x34

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80028cc:	2026      	movs	r0, #38	; 0x26
 80028ce:	2200      	movs	r2, #0
 80028d0:	2105      	movs	r1, #5
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80028d2:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80028d4:	f7fd fe50 	bl	8000578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80028d8:	2026      	movs	r0, #38	; 0x26
 80028da:	f7fd fe81 	bl	80005e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028de:	b008      	add	sp, #32
 80028e0:	bd70      	pop	{r4, r5, r6, pc}
 80028e2:	bf00      	nop
 80028e4:	40004400 	.word	0x40004400
 80028e8:	40020000 	.word	0x40020000
 80028ec:	2000400c 	.word	0x2000400c
 80028f0:	40026088 	.word	0x40026088

080028f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028f4:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80028f6:	4601      	mov	r1, r0
{
 80028f8:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80028fa:	2200      	movs	r2, #0
 80028fc:	2036      	movs	r0, #54	; 0x36
 80028fe:	f7fd fe3b 	bl	8000578 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8002902:	2036      	movs	r0, #54	; 0x36
 8002904:	f7fd fe6c 	bl	80005e0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002908:	2500      	movs	r5, #0
 800290a:	4b15      	ldr	r3, [pc, #84]	; (8002960 <HAL_InitTick+0x6c>)
 800290c:	9502      	str	r5, [sp, #8]
 800290e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002910:	4c14      	ldr	r4, [pc, #80]	; (8002964 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002912:	f042 0210 	orr.w	r2, r2, #16
 8002916:	641a      	str	r2, [r3, #64]	; 0x40
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f003 0310 	and.w	r3, r3, #16
 800291e:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002920:	a901      	add	r1, sp, #4
 8002922:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002924:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002926:	f7fe f9a5 	bl	8000c74 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800292a:	f7fe f983 	bl	8000c34 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 800292e:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <HAL_InitTick+0x74>)
 8002930:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002932:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002936:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002938:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800293a:	4b0c      	ldr	r3, [pc, #48]	; (800296c <HAL_InitTick+0x78>)
 800293c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002940:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8002942:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002944:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8002946:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002948:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800294a:	f7fe fcaf 	bl	80012ac <HAL_TIM_Base_Init>
 800294e:	b920      	cbnz	r0, 800295a <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002950:	4620      	mov	r0, r4
 8002952:	f7fe fb8f 	bl	8001074 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002956:	b009      	add	sp, #36	; 0x24
 8002958:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 800295a:	2001      	movs	r0, #1
 800295c:	e7fb      	b.n	8002956 <HAL_InitTick+0x62>
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800
 8002964:	20004118 	.word	0x20004118
 8002968:	40001000 	.word	0x40001000
 800296c:	000f4240 	.word	0x000f4240

08002970 <NMI_Handler>:
 8002970:	4770      	bx	lr

08002972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002972:	e7fe      	b.n	8002972 <HardFault_Handler>

08002974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002974:	e7fe      	b.n	8002974 <MemManage_Handler>

08002976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002976:	e7fe      	b.n	8002976 <BusFault_Handler>

08002978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002978:	e7fe      	b.n	8002978 <UsageFault_Handler>

0800297a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800297a:	4770      	bx	lr

0800297c <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800297c:	4801      	ldr	r0, [pc, #4]	; (8002984 <DMA1_Stream5_IRQHandler+0x8>)
 800297e:	f7fd bee3 	b.w	8000748 <HAL_DMA_IRQHandler>
 8002982:	bf00      	nop
 8002984:	2000400c 	.word	0x2000400c

08002988 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002988:	4801      	ldr	r0, [pc, #4]	; (8002990 <USART2_IRQHandler+0x8>)
 800298a:	f7fe be61 	b.w	8001650 <HAL_UART_IRQHandler>
 800298e:	bf00      	nop
 8002990:	20004094 	.word	0x20004094

08002994 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002994:	4801      	ldr	r0, [pc, #4]	; (800299c <TIM6_DAC_IRQHandler+0x8>)
 8002996:	f7fe bb81 	b.w	800109c <HAL_TIM_IRQHandler>
 800299a:	bf00      	nop
 800299c:	20004118 	.word	0x20004118

080029a0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029a0:	490f      	ldr	r1, [pc, #60]	; (80029e0 <SystemInit+0x40>)
 80029a2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80029a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80029ae:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <SystemInit+0x44>)
 80029b0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80029b2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80029b4:	f042 0201 	orr.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80029ba:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80029c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80029c6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80029c8:	4a07      	ldr	r2, [pc, #28]	; (80029e8 <SystemInit+0x48>)
 80029ca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029d2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80029d4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80029da:	608b      	str	r3, [r1, #8]
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	e000ed00 	.word	0xe000ed00
 80029e4:	40023800 	.word	0x40023800
 80029e8:	24003010 	.word	0x24003010

080029ec <TM_DELAY_Init>:
uint32_t TM_DELAY_Init(void) {
#if !defined(STM32F0xx)
	uint32_t c;
	
    /* Enable TRC */
    CoreDebug->DEMCR &= ~0x01000000;
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <TM_DELAY_Init+0x34>)
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80029f4:	60da      	str	r2, [r3, #12]
    CoreDebug->DEMCR |=  0x01000000;
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80029fc:	60da      	str	r2, [r3, #12]
	
    /* Enable counter */
    DWT->CTRL &= ~0x00000001;
 80029fe:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <TM_DELAY_Init+0x38>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	f022 0201 	bic.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
    DWT->CTRL |=  0x00000001;
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	f042 0201 	orr.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]
	
    /* Reset counter */
    DWT->CYCCNT = 0;
 8002a10:	2200      	movs	r2, #0
 8002a12:	605a      	str	r2, [r3, #4]
	
	/* Check if DWT has started */
	c = DWT->CYCCNT;
 8002a14:	685a      	ldr	r2, [r3, #4]
	
	/* 2 dummys */
	__ASM volatile ("NOP");
 8002a16:	bf00      	nop
	__ASM volatile ("NOP");
 8002a18:	bf00      	nop
	
	/* Return difference, if result is zero, DWT has not started */
	return (DWT->CYCCNT - c);
 8002a1a:	6858      	ldr	r0, [r3, #4]
#else
	/* Return OK */
	return 1;
#endif
}
 8002a1c:	1a80      	subs	r0, r0, r2
 8002a1e:	4770      	bx	lr
 8002a20:	e000edf0 	.word	0xe000edf0
 8002a24:	e0001000 	.word	0xe0001000

08002a28 <TM_DELAY_1msHandler>:
	/* Return pointer */
	return Timer;
}

/* 1ms function called when systick makes interrupt */
__weak void TM_DELAY_1msHandler(void) {
 8002a28:	4770      	bx	lr
	...

08002a2c <HAL_IncTick>:
/* Called from Systick handler */
void HAL_IncTick(void) {
	uint8_t i;
	
	/* Increase system time */
	TM_Time++;
 8002a2c:	4a18      	ldr	r2, [pc, #96]	; (8002a90 <HAL_IncTick+0x64>)
void HAL_IncTick(void) {
 8002a2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TM_Time++;
 8002a30:	6813      	ldr	r3, [r2, #0]
 8002a32:	3301      	adds	r3, #1
 8002a34:	6013      	str	r3, [r2, #0]
	
	/* Decrease other system time */
	if (TM_Time2) {
 8002a36:	4b17      	ldr	r3, [pc, #92]	; (8002a94 <HAL_IncTick+0x68>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	b112      	cbz	r2, 8002a42 <HAL_IncTick+0x16>
		TM_Time2--;
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	3a01      	subs	r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
	}
	
	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8002a42:	4e15      	ldr	r6, [pc, #84]	; (8002a98 <HAL_IncTick+0x6c>)
void HAL_IncTick(void) {
 8002a44:	2500      	movs	r5, #0
 8002a46:	4637      	mov	r7, r6
	for (i = 0; i < CustomTimers.Count; i++) {
 8002a48:	7833      	ldrb	r3, [r6, #0]
 8002a4a:	b2ec      	uxtb	r4, r5
 8002a4c:	42a3      	cmp	r3, r4
 8002a4e:	d802      	bhi.n	8002a56 <HAL_IncTick+0x2a>
			}
		}
	}
	
	/* Call 1ms interrupt handler function */
	TM_DELAY_1msHandler();
 8002a50:	f7ff ffea 	bl	8002a28 <TM_DELAY_1msHandler>
 8002a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8002a56:	00a4      	lsls	r4, r4, #2
 8002a58:	1933      	adds	r3, r6, r4
 8002a5a:	6858      	ldr	r0, [r3, #4]
		if (
 8002a5c:	b1b0      	cbz	r0, 8002a8c <HAL_IncTick+0x60>
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8002a5e:	7803      	ldrb	r3, [r0, #0]
 8002a60:	079b      	lsls	r3, r3, #30
 8002a62:	d513      	bpl.n	8002a8c <HAL_IncTick+0x60>
			if (CustomTimers.Timers[i]->CNT) {
 8002a64:	6883      	ldr	r3, [r0, #8]
 8002a66:	b10b      	cbz	r3, 8002a6c <HAL_IncTick+0x40>
				CustomTimers.Timers[i]->CNT--;
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	6083      	str	r3, [r0, #8]
			if (CustomTimers.Timers[i]->CNT == 0) {
 8002a6c:	6883      	ldr	r3, [r0, #8]
 8002a6e:	b96b      	cbnz	r3, 8002a8c <HAL_IncTick+0x60>
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8002a70:	443c      	add	r4, r7
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i], CustomTimers.Timers[i]->UserParameters);
 8002a72:	68c3      	ldr	r3, [r0, #12]
 8002a74:	6901      	ldr	r1, [r0, #16]
 8002a76:	4798      	blx	r3
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8002a78:	6862      	ldr	r2, [r4, #4]
 8002a7a:	6853      	ldr	r3, [r2, #4]
 8002a7c:	6093      	str	r3, [r2, #8]
				if (!CustomTimers.Timers[i]->Flags.F.AREN) {
 8002a7e:	7813      	ldrb	r3, [r2, #0]
 8002a80:	f013 0101 	ands.w	r1, r3, #1
					CustomTimers.Timers[i]->Flags.F.CNTEN = 0;
 8002a84:	bf04      	itt	eq
 8002a86:	f361 0341 	bfieq	r3, r1, #1, #1
 8002a8a:	7013      	strbeq	r3, [r2, #0]
 8002a8c:	3501      	adds	r5, #1
 8002a8e:	e7db      	b.n	8002a48 <HAL_IncTick+0x1c>
 8002a90:	20003fe4 	.word	0x20003fe4
 8002a94:	20003fe8 	.word	0x20003fe8
 8002a98:	20003fcc 	.word	0x20003fcc

08002a9c <HAL_GetTick>:
	}
}

uint32_t HAL_GetTick(void) {
	/* Return current time in milliseconds */
	return TM_Time;
 8002a9c:	4b01      	ldr	r3, [pc, #4]	; (8002aa4 <HAL_GetTick+0x8>)
 8002a9e:	6818      	ldr	r0, [r3, #0]
}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	20003fe4 	.word	0x20003fe4

08002aa8 <TM_DS18B20_Start>:
 * | OTHER DEALINGS IN THE SOFTWARE.
 * |----------------------------------------------------------------------
 */
#include "tm_stm32_ds18b20.h"

uint8_t TM_DS18B20_Start(TM_OneWire_t* OneWire, uint8_t *ROM) {
 8002aa8:	b538      	push	{r3, r4, r5, lr}
	return 1;
}

uint8_t TM_DS18B20_Is(uint8_t *ROM) {
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002aaa:	780b      	ldrb	r3, [r1, #0]
 8002aac:	2b28      	cmp	r3, #40	; 0x28
uint8_t TM_DS18B20_Start(TM_OneWire_t* OneWire, uint8_t *ROM) {
 8002aae:	4604      	mov	r4, r0
 8002ab0:	460d      	mov	r5, r1
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002ab2:	d001      	beq.n	8002ab8 <TM_DS18B20_Start+0x10>
		return 0;
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	bd38      	pop	{r3, r4, r5, pc}
	TM_OneWire_Reset(OneWire);
 8002ab8:	f000 fa8e 	bl	8002fd8 <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002abc:	4629      	mov	r1, r5
 8002abe:	4620      	mov	r0, r4
 8002ac0:	f000 fb81 	bl	80031c6 <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8002ac4:	4620      	mov	r0, r4
 8002ac6:	2144      	movs	r1, #68	; 0x44
 8002ac8:	f000 faea 	bl	80030a0 <TM_OneWire_WriteByte>
	return 1;
 8002acc:	2001      	movs	r0, #1
}
 8002ace:	bd38      	pop	{r3, r4, r5, pc}

08002ad0 <TM_DS18B20_StartAll>:
void TM_DS18B20_StartAll(TM_OneWire_t* OneWire) {
 8002ad0:	b510      	push	{r4, lr}
 8002ad2:	4604      	mov	r4, r0
	TM_OneWire_Reset(OneWire);
 8002ad4:	f000 fa80 	bl	8002fd8 <TM_OneWire_Reset>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8002ad8:	4620      	mov	r0, r4
 8002ada:	21cc      	movs	r1, #204	; 0xcc
 8002adc:	f000 fae0 	bl	80030a0 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	2144      	movs	r1, #68	; 0x44
}
 8002ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8002ae8:	f000 bada 	b.w	80030a0 <TM_OneWire_WriteByte>

08002aec <TM_DS18B20_Read>:
uint8_t TM_DS18B20_Read(TM_OneWire_t* OneWire, uint8_t *ROM, float *destination) {
 8002aec:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002aee:	780b      	ldrb	r3, [r1, #0]
 8002af0:	2b28      	cmp	r3, #40	; 0x28
uint8_t TM_DS18B20_Read(TM_OneWire_t* OneWire, uint8_t *ROM, float *destination) {
 8002af2:	b085      	sub	sp, #20
 8002af4:	4607      	mov	r7, r0
 8002af6:	460c      	mov	r4, r1
 8002af8:	4615      	mov	r5, r2
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002afa:	d010      	beq.n	8002b1e <TM_DS18B20_Read+0x32>
		return 0;
 8002afc:	2000      	movs	r0, #0
}
 8002afe:	b005      	add	sp, #20
 8002b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
			decimal = (temperature >> 1) & 0x07;
 8002b02:	f3c4 0242 	ubfx	r2, r4, #1, #3
 8002b06:	ee07 2a90 	vmov	s15, r2
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8002b0a:	eefa 7aee 	vcvt.f32.s32	s15, s15, #3
		} break;
 8002b0e:	e05d      	b.n	8002bcc <TM_DS18B20_Read+0xe0>
			decimal = temperature & 0x0F;
 8002b10:	f004 020f 	and.w	r2, r4, #15
 8002b14:	ee07 2a90 	vmov	s15, r2
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8002b18:	eefa 7ace 	vcvt.f32.s32	s15, s15, #4
		} break;
 8002b1c:	e056      	b.n	8002bcc <TM_DS18B20_Read+0xe0>
	if (!TM_OneWire_ReadBit(OneWire)) {
 8002b1e:	f000 faa1 	bl	8003064 <TM_OneWire_ReadBit>
 8002b22:	2800      	cmp	r0, #0
 8002b24:	d0ea      	beq.n	8002afc <TM_DS18B20_Read+0x10>
	TM_OneWire_Reset(OneWire);
 8002b26:	4638      	mov	r0, r7
 8002b28:	f000 fa56 	bl	8002fd8 <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002b2c:	4621      	mov	r1, r4
 8002b2e:	4638      	mov	r0, r7
 8002b30:	f000 fb49 	bl	80031c6 <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002b34:	21be      	movs	r1, #190	; 0xbe
 8002b36:	4638      	mov	r0, r7
 8002b38:	f000 fab2 	bl	80030a0 <TM_OneWire_WriteByte>
 8002b3c:	2400      	movs	r4, #0
		data[i] = TM_OneWire_ReadByte(OneWire);
 8002b3e:	ae01      	add	r6, sp, #4
 8002b40:	4638      	mov	r0, r7
 8002b42:	f000 fabd 	bl	80030c0 <TM_OneWire_ReadByte>
 8002b46:	5530      	strb	r0, [r6, r4]
 8002b48:	3401      	adds	r4, #1
	for (i = 0; i < 9; i++) {
 8002b4a:	2c09      	cmp	r4, #9
 8002b4c:	d1f8      	bne.n	8002b40 <TM_DS18B20_Read+0x54>
	crc = TM_OneWire_CRC8(data, 8);
 8002b4e:	2108      	movs	r1, #8
 8002b50:	4630      	mov	r0, r6
 8002b52:	f000 fb53 	bl	80031fc <TM_OneWire_CRC8>
	if (crc != data[8]) {
 8002b56:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002b5a:	4283      	cmp	r3, r0
 8002b5c:	d1ce      	bne.n	8002afc <TM_DS18B20_Read+0x10>
	temperature = data[0] | (data[1] << 8);
 8002b5e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002b62:	f89d 6004 	ldrb.w	r6, [sp, #4]
 8002b66:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 8002b6a:	b236      	sxth	r6, r6
	TM_OneWire_Reset(OneWire);
 8002b6c:	4638      	mov	r0, r7
 8002b6e:	f000 fa33 	bl	8002fd8 <TM_OneWire_Reset>
	temperature = data[0] | (data[1] << 8);
 8002b72:	b2b4      	uxth	r4, r6
	if (temperature & 0x8000) {
 8002b74:	2e00      	cmp	r6, #0
		temperature = ~temperature + 1;
 8002b76:	bfbc      	itt	lt
 8002b78:	4264      	neglt	r4, r4
 8002b7a:	b2a4      	uxthlt	r4, r4
	digit |= ((temperature >> 8) & 0x7) << 4;
 8002b7c:	ea4f 1314 	mov.w	r3, r4, lsr #4
 8002b80:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b84:	f344 1307 	sbfx	r3, r4, #4, #8
 8002b88:	ea43 0302 	orr.w	r3, r3, r2
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8002b8c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8002b90:	f3c2 1241 	ubfx	r2, r2, #5, #2
	switch (resolution) {
 8002b94:	f102 0209 	add.w	r2, r2, #9
		minus = 1;
 8002b98:	bfb4      	ite	lt
 8002b9a:	2101      	movlt	r1, #1
	int8_t digit, minus = 0;
 8002b9c:	2100      	movge	r1, #0
	switch (resolution) {
 8002b9e:	2a0b      	cmp	r2, #11
 8002ba0:	d0af      	beq.n	8002b02 <TM_DS18B20_Read+0x16>
 8002ba2:	2a0c      	cmp	r2, #12
 8002ba4:	d0b4      	beq.n	8002b10 <TM_DS18B20_Read+0x24>
 8002ba6:	2a0a      	cmp	r2, #10
			decimal = (temperature >> 3) & 0x01;
 8002ba8:	bf1b      	ittet	ne
 8002baa:	f3c4 02c0 	ubfxne	r2, r4, #3, #1
 8002bae:	ee07 2a90 	vmovne	s15, r2
			decimal = (temperature >> 2) & 0x03;
 8002bb2:	f3c4 0281 	ubfxeq	r2, r4, #2, #2
			decimal = (temperature >> 3) & 0x01;
 8002bb6:	eef8 7ae7 	vcvtne.f32.s32	s15, s15
			decimal = (temperature >> 2) & 0x03;
 8002bba:	bf0d      	iteet	eq
 8002bbc:	ee07 2a90 	vmoveq	s15, r2
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8002bc0:	eeb6 7a00 	vmovne.f32	s14, #96	; 0x3f000000  0.5
 8002bc4:	ee67 7a87 	vmulne.f32	s15, s15, s14
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8002bc8:	eefa 7acf 	vcvteq.f32.s32	s15, s15, #2
	decimal = digit + decimal;
 8002bcc:	ee07 3a10 	vmov	s14, r3
 8002bd0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
	if (minus) {
 8002bd8:	b119      	cbz	r1, 8002be2 <TM_DS18B20_Read+0xf6>
		decimal = 0 - decimal;
 8002bda:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002bec <TM_DS18B20_Read+0x100>
 8002bde:	ee77 7a67 	vsub.f32	s15, s14, s15
	*destination = decimal;
 8002be2:	edc5 7a00 	vstr	s15, [r5]
	return 1;
 8002be6:	2001      	movs	r0, #1
 8002be8:	e789      	b.n	8002afe <TM_DS18B20_Read+0x12>
 8002bea:	bf00      	nop
 8002bec:	00000000 	.word	0x00000000

08002bf0 <TM_DS18B20_SetResolution>:
uint8_t TM_DS18B20_SetResolution(TM_OneWire_t* OneWire, uint8_t *ROM, TM_DS18B20_Resolution_t resolution) {
 8002bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002bf4:	780b      	ldrb	r3, [r1, #0]
 8002bf6:	2b28      	cmp	r3, #40	; 0x28
uint8_t TM_DS18B20_SetResolution(TM_OneWire_t* OneWire, uint8_t *ROM, TM_DS18B20_Resolution_t resolution) {
 8002bf8:	4604      	mov	r4, r0
 8002bfa:	460e      	mov	r6, r1
 8002bfc:	4691      	mov	r9, r2
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002bfe:	d019      	beq.n	8002c34 <TM_DS18B20_SetResolution+0x44>
		return 0;
 8002c00:	2000      	movs	r0, #0
 8002c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (resolution == TM_DS18B20_Resolution_10bits) {
 8002c06:	f1b9 0f0a 	cmp.w	r9, #10
 8002c0a:	d104      	bne.n	8002c16 <TM_DS18B20_SetResolution+0x26>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002c0c:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002c10:	f045 0520 	orr.w	r5, r5, #32
 8002c14:	e02f      	b.n	8002c76 <TM_DS18B20_SetResolution+0x86>
	} else if (resolution == TM_DS18B20_Resolution_11bits) {
 8002c16:	f1b9 0f0b 	cmp.w	r9, #11
 8002c1a:	d104      	bne.n	8002c26 <TM_DS18B20_SetResolution+0x36>
 8002c1c:	f005 05df 	and.w	r5, r5, #223	; 0xdf
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002c20:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8002c24:	e027      	b.n	8002c76 <TM_DS18B20_SetResolution+0x86>
	} else if (resolution == TM_DS18B20_Resolution_12bits) {
 8002c26:	f1b9 0f0c 	cmp.w	r9, #12
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002c2a:	bf04      	itt	eq
 8002c2c:	f045 0560 	orreq.w	r5, r5, #96	; 0x60
 8002c30:	b2ed      	uxtbeq	r5, r5
 8002c32:	e020      	b.n	8002c76 <TM_DS18B20_SetResolution+0x86>
	TM_OneWire_Reset(OneWire);
 8002c34:	f000 f9d0 	bl	8002fd8 <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002c38:	4631      	mov	r1, r6
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	f000 fac3 	bl	80031c6 <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002c40:	21be      	movs	r1, #190	; 0xbe
 8002c42:	4620      	mov	r0, r4
 8002c44:	f000 fa2c 	bl	80030a0 <TM_OneWire_WriteByte>
	TM_OneWire_ReadByte(OneWire);
 8002c48:	4620      	mov	r0, r4
 8002c4a:	f000 fa39 	bl	80030c0 <TM_OneWire_ReadByte>
	TM_OneWire_ReadByte(OneWire);
 8002c4e:	4620      	mov	r0, r4
 8002c50:	f000 fa36 	bl	80030c0 <TM_OneWire_ReadByte>
	th = TM_OneWire_ReadByte(OneWire);
 8002c54:	4620      	mov	r0, r4
 8002c56:	f000 fa33 	bl	80030c0 <TM_OneWire_ReadByte>
 8002c5a:	4607      	mov	r7, r0
	tl = TM_OneWire_ReadByte(OneWire);
 8002c5c:	4620      	mov	r0, r4
 8002c5e:	f000 fa2f 	bl	80030c0 <TM_OneWire_ReadByte>
 8002c62:	4680      	mov	r8, r0
	conf = TM_OneWire_ReadByte(OneWire);
 8002c64:	4620      	mov	r0, r4
 8002c66:	f000 fa2b 	bl	80030c0 <TM_OneWire_ReadByte>
	if (resolution == TM_DS18B20_Resolution_9bits) {
 8002c6a:	f1b9 0f09 	cmp.w	r9, #9
	conf = TM_OneWire_ReadByte(OneWire);
 8002c6e:	4605      	mov	r5, r0
	if (resolution == TM_DS18B20_Resolution_9bits) {
 8002c70:	d1c9      	bne.n	8002c06 <TM_DS18B20_SetResolution+0x16>
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002c72:	f005 059f 	and.w	r5, r5, #159	; 0x9f
	TM_OneWire_Reset(OneWire);
 8002c76:	4620      	mov	r0, r4
 8002c78:	f000 f9ae 	bl	8002fd8 <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002c7c:	4631      	mov	r1, r6
 8002c7e:	4620      	mov	r0, r4
 8002c80:	f000 faa1 	bl	80031c6 <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002c84:	4620      	mov	r0, r4
 8002c86:	214e      	movs	r1, #78	; 0x4e
 8002c88:	f000 fa0a 	bl	80030a0 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, th);
 8002c8c:	4639      	mov	r1, r7
 8002c8e:	4620      	mov	r0, r4
 8002c90:	f000 fa06 	bl	80030a0 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, tl);
 8002c94:	4641      	mov	r1, r8
 8002c96:	4620      	mov	r0, r4
 8002c98:	f000 fa02 	bl	80030a0 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, conf);
 8002c9c:	4629      	mov	r1, r5
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	f000 f9fe 	bl	80030a0 <TM_OneWire_WriteByte>
	TM_OneWire_Reset(OneWire);
 8002ca4:	4620      	mov	r0, r4
 8002ca6:	f000 f997 	bl	8002fd8 <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002caa:	4631      	mov	r1, r6
 8002cac:	4620      	mov	r0, r4
 8002cae:	f000 fa8a 	bl	80031c6 <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	2148      	movs	r1, #72	; 0x48
 8002cb6:	f000 f9f3 	bl	80030a0 <TM_OneWire_WriteByte>
	return 1;
 8002cba:	2001      	movs	r0, #1
 8002cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002cc0 <TM_DS18B20_Is>:
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002cc0:	7800      	ldrb	r0, [r0, #0]
		return 1;
	}
	return 0;
}
 8002cc2:	f1a0 0328 	sub.w	r3, r0, #40	; 0x28
 8002cc6:	4258      	negs	r0, r3
 8002cc8:	4158      	adcs	r0, r3
 8002cca:	4770      	bx	lr

08002ccc <TM_DS18B20_SetAlarmLowTemperature>:

uint8_t TM_DS18B20_SetAlarmLowTemperature(TM_OneWire_t* OneWire, uint8_t *ROM, int8_t temp) {
 8002ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002cd0:	780b      	ldrb	r3, [r1, #0]
 8002cd2:	2b28      	cmp	r3, #40	; 0x28
uint8_t TM_DS18B20_SetAlarmLowTemperature(TM_OneWire_t* OneWire, uint8_t *ROM, int8_t temp) {
 8002cd4:	4604      	mov	r4, r0
 8002cd6:	460e      	mov	r6, r1
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002cd8:	d002      	beq.n	8002ce0 <TM_DS18B20_SetAlarmLowTemperature+0x14>
	uint8_t tl, th, conf;
	if (!TM_DS18B20_Is(ROM)) {
		return 0;
 8002cda:	2000      	movs	r0, #0
 8002cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ce0:	f06f 0536 	mvn.w	r5, #54	; 0x36
 8002ce4:	4295      	cmp	r5, r2
 8002ce6:	bfb8      	it	lt
 8002ce8:	4615      	movlt	r5, r2
	} 
	if (temp < -55) {
		temp = -55;
	}
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002cea:	f000 f975 	bl	8002fd8 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002cee:	4631      	mov	r1, r6
 8002cf0:	4620      	mov	r0, r4
 8002cf2:	f000 fa68 	bl	80031c6 <TM_OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002cf6:	21be      	movs	r1, #190	; 0xbe
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	f000 f9d1 	bl	80030a0 <TM_OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	TM_OneWire_ReadByte(OneWire);
 8002cfe:	4620      	mov	r0, r4
 8002d00:	f000 f9de 	bl	80030c0 <TM_OneWire_ReadByte>
	TM_OneWire_ReadByte(OneWire);
 8002d04:	4620      	mov	r0, r4
 8002d06:	f000 f9db 	bl	80030c0 <TM_OneWire_ReadByte>
	
	th = TM_OneWire_ReadByte(OneWire);
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	f000 f9d8 	bl	80030c0 <TM_OneWire_ReadByte>
 8002d10:	4680      	mov	r8, r0
	tl = TM_OneWire_ReadByte(OneWire);
 8002d12:	4620      	mov	r0, r4
 8002d14:	f000 f9d4 	bl	80030c0 <TM_OneWire_ReadByte>
	conf = TM_OneWire_ReadByte(OneWire);
 8002d18:	4620      	mov	r0, r4
 8002d1a:	f000 f9d1 	bl	80030c0 <TM_OneWire_ReadByte>
 8002d1e:	4607      	mov	r7, r0
	
	tl = (uint8_t)temp; 

	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002d20:	4620      	mov	r0, r4
 8002d22:	f000 f959 	bl	8002fd8 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002d26:	4631      	mov	r1, r6
 8002d28:	4620      	mov	r0, r4
 8002d2a:	f000 fa4c 	bl	80031c6 <TM_OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002d2e:	4620      	mov	r0, r4
 8002d30:	214e      	movs	r1, #78	; 0x4e
 8002d32:	f000 f9b5 	bl	80030a0 <TM_OneWire_WriteByte>
	
	/* Write bytes */
	TM_OneWire_WriteByte(OneWire, th);
 8002d36:	4641      	mov	r1, r8
 8002d38:	4620      	mov	r0, r4
 8002d3a:	f000 f9b1 	bl	80030a0 <TM_OneWire_WriteByte>
	tl = (uint8_t)temp; 
 8002d3e:	2d7d      	cmp	r5, #125	; 0x7d
 8002d40:	bfa8      	it	ge
 8002d42:	257d      	movge	r5, #125	; 0x7d
	TM_OneWire_WriteByte(OneWire, tl);
 8002d44:	b2e9      	uxtb	r1, r5
 8002d46:	4620      	mov	r0, r4
 8002d48:	f000 f9aa 	bl	80030a0 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, conf);
 8002d4c:	4639      	mov	r1, r7
 8002d4e:	4620      	mov	r0, r4
 8002d50:	f000 f9a6 	bl	80030a0 <TM_OneWire_WriteByte>
	
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002d54:	4620      	mov	r0, r4
 8002d56:	f000 f93f 	bl	8002fd8 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002d5a:	4631      	mov	r1, r6
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	f000 fa32 	bl	80031c6 <TM_OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002d62:	4620      	mov	r0, r4
 8002d64:	2148      	movs	r1, #72	; 0x48
 8002d66:	f000 f99b 	bl	80030a0 <TM_OneWire_WriteByte>
	
	return 1;
 8002d6a:	2001      	movs	r0, #1
}
 8002d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002d70 <TM_DS18B20_SetAlarmHighTemperature>:

uint8_t TM_DS18B20_SetAlarmHighTemperature(TM_OneWire_t* OneWire, uint8_t *ROM, int8_t temp) {
 8002d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002d74:	780b      	ldrb	r3, [r1, #0]
 8002d76:	2b28      	cmp	r3, #40	; 0x28
uint8_t TM_DS18B20_SetAlarmHighTemperature(TM_OneWire_t* OneWire, uint8_t *ROM, int8_t temp) {
 8002d78:	4604      	mov	r4, r0
 8002d7a:	460e      	mov	r6, r1
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002d7c:	d002      	beq.n	8002d84 <TM_DS18B20_SetAlarmHighTemperature+0x14>
	uint8_t tl, th, conf;
	if (!TM_DS18B20_Is(ROM)) {
		return 0;
 8002d7e:	2000      	movs	r0, #0
 8002d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d84:	f06f 0536 	mvn.w	r5, #54	; 0x36
 8002d88:	4295      	cmp	r5, r2
 8002d8a:	bfb8      	it	lt
 8002d8c:	4615      	movlt	r5, r2
	} 
	if (temp < -55) {
		temp = -55;
	}
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002d8e:	f000 f923 	bl	8002fd8 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002d92:	4631      	mov	r1, r6
 8002d94:	4620      	mov	r0, r4
 8002d96:	f000 fa16 	bl	80031c6 <TM_OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002d9a:	21be      	movs	r1, #190	; 0xbe
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	f000 f97f 	bl	80030a0 <TM_OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	TM_OneWire_ReadByte(OneWire);
 8002da2:	4620      	mov	r0, r4
 8002da4:	f000 f98c 	bl	80030c0 <TM_OneWire_ReadByte>
	TM_OneWire_ReadByte(OneWire);
 8002da8:	4620      	mov	r0, r4
 8002daa:	f000 f989 	bl	80030c0 <TM_OneWire_ReadByte>
	
	th = TM_OneWire_ReadByte(OneWire);
 8002dae:	4620      	mov	r0, r4
 8002db0:	f000 f986 	bl	80030c0 <TM_OneWire_ReadByte>
	tl = TM_OneWire_ReadByte(OneWire);
 8002db4:	4620      	mov	r0, r4
 8002db6:	f000 f983 	bl	80030c0 <TM_OneWire_ReadByte>
 8002dba:	4680      	mov	r8, r0
	conf = TM_OneWire_ReadByte(OneWire);
 8002dbc:	4620      	mov	r0, r4
 8002dbe:	f000 f97f 	bl	80030c0 <TM_OneWire_ReadByte>
 8002dc2:	4607      	mov	r7, r0
	
	th = (uint8_t)temp; 

	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	f000 f907 	bl	8002fd8 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002dca:	4631      	mov	r1, r6
 8002dcc:	4620      	mov	r0, r4
 8002dce:	f000 f9fa 	bl	80031c6 <TM_OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	214e      	movs	r1, #78	; 0x4e
 8002dd6:	f000 f963 	bl	80030a0 <TM_OneWire_WriteByte>
	th = (uint8_t)temp; 
 8002dda:	2d7d      	cmp	r5, #125	; 0x7d
 8002ddc:	bfa8      	it	ge
 8002dde:	257d      	movge	r5, #125	; 0x7d
	
	/* Write bytes */
	TM_OneWire_WriteByte(OneWire, th);
 8002de0:	b2e9      	uxtb	r1, r5
 8002de2:	4620      	mov	r0, r4
 8002de4:	f000 f95c 	bl	80030a0 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, tl);
 8002de8:	4641      	mov	r1, r8
 8002dea:	4620      	mov	r0, r4
 8002dec:	f000 f958 	bl	80030a0 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, conf);
 8002df0:	4639      	mov	r1, r7
 8002df2:	4620      	mov	r0, r4
 8002df4:	f000 f954 	bl	80030a0 <TM_OneWire_WriteByte>
	
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002df8:	4620      	mov	r0, r4
 8002dfa:	f000 f8ed 	bl	8002fd8 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002dfe:	4631      	mov	r1, r6
 8002e00:	4620      	mov	r0, r4
 8002e02:	f000 f9e0 	bl	80031c6 <TM_OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002e06:	4620      	mov	r0, r4
 8002e08:	2148      	movs	r1, #72	; 0x48
 8002e0a:	f000 f949 	bl	80030a0 <TM_OneWire_WriteByte>
	
	return 1;
 8002e0e:	2001      	movs	r0, #1
}
 8002e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002e14 <TM_DS18B20_AllDone>:
	return TM_OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t TM_DS18B20_AllDone(TM_OneWire_t* OneWire) {
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return TM_OneWire_ReadBit(OneWire);
 8002e14:	f000 b926 	b.w	8003064 <TM_OneWire_ReadBit>

08002e18 <TM_GPIO_SetPinAsInput>:
			GPIO_UsedPins[ptr] &= ~(1 << i);
		}
	}
}

void TM_GPIO_SetPinAsInput(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8002e18:	b530      	push	{r4, r5, lr}
 8002e1a:	2300      	movs	r3, #0
	/* Go through all pins */
	for (i = 0x00; i < 0x10; i++) {
		/* Pin is set */
		if (GPIO_Pin & (1 << i)) {
			/* Set 00 bits combination for input */
			GPIOx->MODER &= ~(0x03 << (2 * i));
 8002e1c:	2503      	movs	r5, #3
		if (GPIO_Pin & (1 << i)) {
 8002e1e:	fa41 f203 	asr.w	r2, r1, r3
 8002e22:	07d2      	lsls	r2, r2, #31
 8002e24:	d506      	bpl.n	8002e34 <TM_GPIO_SetPinAsInput+0x1c>
			GPIOx->MODER &= ~(0x03 << (2 * i));
 8002e26:	6802      	ldr	r2, [r0, #0]
 8002e28:	005c      	lsls	r4, r3, #1
 8002e2a:	fa05 f404 	lsl.w	r4, r5, r4
 8002e2e:	ea22 0204 	bic.w	r2, r2, r4
 8002e32:	6002      	str	r2, [r0, #0]
 8002e34:	3301      	adds	r3, #1
	for (i = 0x00; i < 0x10; i++) {
 8002e36:	2b10      	cmp	r3, #16
 8002e38:	d1f1      	bne.n	8002e1e <TM_GPIO_SetPinAsInput+0x6>
		}
	}
}
 8002e3a:	bd30      	pop	{r4, r5, pc}

08002e3c <TM_GPIO_SetPinAsOutput>:

void TM_GPIO_SetPinAsOutput(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8002e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e3e:	2300      	movs	r3, #0
	/* Go through all pins */
	for (i = 0x00; i < 0x10; i++) {
		/* Pin is set */
		if (GPIO_Pin & (1 << i)) {
			/* Set 01 bits combination for output */
			GPIOx->MODER = (GPIOx->MODER & ~(0x03 << (2 * i))) | (0x01 << (2 * i));
 8002e40:	2503      	movs	r5, #3
 8002e42:	2601      	movs	r6, #1
		if (GPIO_Pin & (1 << i)) {
 8002e44:	fa41 f203 	asr.w	r2, r1, r3
 8002e48:	07d2      	lsls	r2, r2, #31
 8002e4a:	d509      	bpl.n	8002e60 <TM_GPIO_SetPinAsOutput+0x24>
			GPIOx->MODER = (GPIOx->MODER & ~(0x03 << (2 * i))) | (0x01 << (2 * i));
 8002e4c:	6802      	ldr	r2, [r0, #0]
 8002e4e:	005c      	lsls	r4, r3, #1
 8002e50:	fa05 f704 	lsl.w	r7, r5, r4
 8002e54:	ea22 0207 	bic.w	r2, r2, r7
 8002e58:	fa06 f404 	lsl.w	r4, r6, r4
 8002e5c:	4322      	orrs	r2, r4
 8002e5e:	6002      	str	r2, [r0, #0]
 8002e60:	3301      	adds	r3, #1
	for (i = 0x00; i < 0x10; i++) {
 8002e62:	2b10      	cmp	r3, #16
 8002e64:	d1ee      	bne.n	8002e44 <TM_GPIO_SetPinAsOutput+0x8>
		}
	}
}
 8002e66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e68 <TM_GPIO_INT_EnableClock>:
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
	/* Set bit according to the 1 << portsourcenumber */
#if defined(STM32F0xx)
	RCC->AHBENR |= (1 << (TM_GPIO_GetPortSource(GPIOx) + 17));
#else
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8002e68:	4a06      	ldr	r2, [pc, #24]	; (8002e84 <TM_GPIO_INT_EnableClock+0x1c>)
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8002e6a:	f100 403f 	add.w	r0, r0, #3204448256	; 0xbf000000
 8002e6e:	f500 007e 	add.w	r0, r0, #16646144	; 0xfe0000
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8002e72:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002e74:	f3c0 238f 	ubfx	r3, r0, #10, #16
 8002e78:	2001      	movs	r0, #1
 8002e7a:	4098      	lsls	r0, r3
 8002e7c:	4308      	orrs	r0, r1
 8002e7e:	6310      	str	r0, [r2, #48]	; 0x30
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40023800 	.word	0x40023800

08002e88 <TM_GPIO_INT_Init>:
#else
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
#endif
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8002e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e8c:	b085      	sub	sp, #20
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8002e8e:	f100 453f 	add.w	r5, r0, #3204448256	; 0xbf000000
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8002e92:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
 8002e96:	9402      	str	r4, [sp, #8]
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8002e98:	f505 057e 	add.w	r5, r5, #16646144	; 0xfe0000
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8002e9c:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8002ea0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002f48 <TM_GPIO_INT_Init+0xc0>
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8002ea4:	9403      	str	r4, [sp, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8002ea6:	f102 3cff 	add.w	ip, r2, #4294967295
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8002eaa:	9301      	str	r3, [sp, #4]
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8002eac:	2400      	movs	r4, #0
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8002eae:	f3c5 2587 	ubfx	r5, r5, #10, #8
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8002eb2:	f04f 0a03 	mov.w	sl, #3
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8002eb6:	fa5f fc8c 	uxtb.w	ip, ip
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8002eba:	fa41 f604 	asr.w	r6, r1, r4
 8002ebe:	07f3      	lsls	r3, r6, #31
 8002ec0:	d53b      	bpl.n	8002f3a <TM_GPIO_INT_Init+0xb2>
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	f838 6015 	ldrh.w	r6, [r8, r5, lsl #1]
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8002ec8:	f8d0 e00c 	ldr.w	lr, [r0, #12]
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8002ecc:	fa03 f904 	lsl.w	r9, r3, r4
 8002ed0:	ea49 0606 	orr.w	r6, r9, r6
 8002ed4:	f828 6015 	strh.w	r6, [r8, r5, lsl #1]
 8002ed8:	fa04 f603 	lsl.w	r6, r4, r3
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8002edc:	fa0a f706 	lsl.w	r7, sl, r6
 8002ee0:	9b02      	ldr	r3, [sp, #8]
 8002ee2:	43ff      	mvns	r7, r7
 8002ee4:	fa03 fb06 	lsl.w	fp, r3, r6
 8002ee8:	ea07 0e0e 	and.w	lr, r7, lr
 8002eec:	ea4e 0e0b 	orr.w	lr, lr, fp
 8002ef0:	f8c0 e00c 	str.w	lr, [r0, #12]
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8002ef4:	f8d0 e000 	ldr.w	lr, [r0]
 8002ef8:	fa02 fb06 	lsl.w	fp, r2, r6
 8002efc:	ea0e 0e07 	and.w	lr, lr, r7
 8002f00:	ea4e 0e0b 	orr.w	lr, lr, fp
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8002f04:	f1bc 0f01 	cmp.w	ip, #1
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8002f08:	f8c0 e000 	str.w	lr, [r0]
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8002f0c:	d815      	bhi.n	8002f3a <TM_GPIO_INT_Init+0xb2>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8002f0e:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8002f12:	9b01      	ldr	r3, [sp, #4]
 8002f14:	ea2e 0909 	bic.w	r9, lr, r9
 8002f18:	fa03 fe04 	lsl.w	lr, r3, r4
 8002f1c:	fa1f fe8e 	uxth.w	lr, lr
 8002f20:	ea49 090e 	orr.w	r9, r9, lr
 8002f24:	f8c0 9004 	str.w	r9, [r0, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8002f28:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8002f2c:	9b03      	ldr	r3, [sp, #12]
 8002f2e:	ea07 070e 	and.w	r7, r7, lr
 8002f32:	fa03 f606 	lsl.w	r6, r3, r6
 8002f36:	4337      	orrs	r7, r6
 8002f38:	6087      	str	r7, [r0, #8]
 8002f3a:	3401      	adds	r4, #1
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8002f3c:	2c10      	cmp	r4, #16
 8002f3e:	d1bc      	bne.n	8002eba <TM_GPIO_INT_Init+0x32>
		}
	}
}
 8002f40:	b005      	add	sp, #20
 8002f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f46:	bf00      	nop
 8002f48:	20003fec 	.word	0x20003fec

08002f4c <TM_GPIO_Init>:
void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8002f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f50:	4605      	mov	r5, r0
 8002f52:	4616      	mov	r6, r2
 8002f54:	461f      	mov	r7, r3
 8002f56:	f89d 8020 	ldrb.w	r8, [sp, #32]
 8002f5a:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	if (GPIO_Pin == 0x00) {
 8002f5e:	460c      	mov	r4, r1
 8002f60:	b169      	cbz	r1, 8002f7e <TM_GPIO_Init+0x32>
	TM_GPIO_INT_EnableClock(GPIOx);
 8002f62:	f7ff ff81 	bl	8002e68 <TM_GPIO_INT_EnableClock>
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8002f66:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8002f6a:	f8cd 8020 	str.w	r8, [sp, #32]
 8002f6e:	463b      	mov	r3, r7
 8002f70:	4632      	mov	r2, r6
 8002f72:	4621      	mov	r1, r4
 8002f74:	4628      	mov	r0, r5
}
 8002f76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8002f7a:	f7ff bf85 	b.w	8002e88 <TM_GPIO_INT_Init>
 8002f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08002f84 <Delay>:
/**
 * @brief  Delays for amount of micro seconds
 * @param  micros: Number of microseconds for delay
 * @retval None
 */
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 8002f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if !defined(STM32F0xx)
	uint32_t start = DWT->CYCCNT;
 8002f86:	4c09      	ldr	r4, [pc, #36]	; (8002fac <Delay+0x28>)
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 8002f88:	9001      	str	r0, [sp, #4]
	uint32_t start = DWT->CYCCNT;
 8002f8a:	6865      	ldr	r5, [r4, #4]
	
	/* Go to number of cycles for system */
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002f8c:	f7fd fe4c 	bl	8000c28 <HAL_RCC_GetHCLKFreq>
 8002f90:	9b01      	ldr	r3, [sp, #4]
 8002f92:	4a07      	ldr	r2, [pc, #28]	; (8002fb0 <Delay+0x2c>)
 8002f94:	fbb0 f0f2 	udiv	r0, r0, r2
 8002f98:	4343      	muls	r3, r0
 8002f9a:	9301      	str	r3, [sp, #4]
	
	/* Delay till end */
	while ((DWT->CYCCNT - start) < micros);
 8002f9c:	6863      	ldr	r3, [r4, #4]
 8002f9e:	9a01      	ldr	r2, [sp, #4]
 8002fa0:	1b5b      	subs	r3, r3, r5
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d3fa      	bcc.n	8002f9c <Delay+0x18>
	micros *= (SystemCoreClock / 1000000) / 5;
	
	/* Wait till done */
	while (micros--);
#endif
}
 8002fa6:	b003      	add	sp, #12
 8002fa8:	bd30      	pop	{r4, r5, pc}
 8002faa:	bf00      	nop
 8002fac:	e0001000 	.word	0xe0001000
 8002fb0:	000f4240 	.word	0x000f4240

08002fb4 <TM_OneWire_Init>:
#include "tm_stm32_onewire.h"
#include "tm_stm32_delay.h"
#include "defines.h"
#include "tm_stm32_gpio.h"

void TM_OneWire_Init(TM_OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8002fb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002fb6:	460e      	mov	r6, r1
 8002fb8:	4615      	mov	r5, r2
 8002fba:	4604      	mov	r4, r0
	/* Initialize delay if it was not already */
	TM_DELAY_Init();
 8002fbc:	f7ff fd16 	bl	80029ec <TM_DELAY_Init>

	/* Init GPIO pin */
	TM_GPIO_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium);
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	9201      	str	r2, [sp, #4]
 8002fc4:	9200      	str	r2, [sp, #0]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	4629      	mov	r1, r5
 8002fca:	4630      	mov	r0, r6
 8002fcc:	f7ff ffbe 	bl	8002f4c <TM_GPIO_Init>
	
	/* Save settings */
	OneWireStruct->GPIOx = GPIOx;
 8002fd0:	6026      	str	r6, [r4, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8002fd2:	80a5      	strh	r5, [r4, #4]
}
 8002fd4:	b002      	add	sp, #8
 8002fd6:	bd70      	pop	{r4, r5, r6, pc}

08002fd8 <TM_OneWire_Reset>:

uint8_t TM_OneWire_Reset(TM_OneWire_t* OneWireStruct) {
 8002fd8:	b510      	push	{r4, lr}
 8002fda:	4604      	mov	r4, r0
	uint8_t i;
	
	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8002fdc:	6800      	ldr	r0, [r0, #0]
 8002fde:	88a1      	ldrh	r1, [r4, #4]
 8002fe0:	040b      	lsls	r3, r1, #16
 8002fe2:	6183      	str	r3, [r0, #24]
	ONEWIRE_OUTPUT(OneWireStruct);
 8002fe4:	f7ff ff2a 	bl	8002e3c <TM_GPIO_SetPinAsOutput>
	ONEWIRE_DELAY(480);
 8002fe8:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8002fec:	f7ff ffca 	bl	8002f84 <Delay>
	
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 8002ff0:	88a1      	ldrh	r1, [r4, #4]
 8002ff2:	6820      	ldr	r0, [r4, #0]
 8002ff4:	f7ff ff10 	bl	8002e18 <TM_GPIO_SetPinAsInput>
	ONEWIRE_DELAY(70);
 8002ff8:	2046      	movs	r0, #70	; 0x46
 8002ffa:	f7ff ffc3 	bl	8002f84 <Delay>
	
	/* Check bit value */
	i = TM_GPIO_GetInputPinValue(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8002ffe:	6823      	ldr	r3, [r4, #0]
 8003000:	88a2      	ldrh	r2, [r4, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	421a      	tst	r2, r3
 8003006:	bf14      	ite	ne
 8003008:	2401      	movne	r4, #1
 800300a:	2400      	moveq	r4, #0
	
	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 800300c:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8003010:	f7ff ffb8 	bl	8002f84 <Delay>
	
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
}
 8003014:	4620      	mov	r0, r4
 8003016:	bd10      	pop	{r4, pc}

08003018 <TM_OneWire_WriteBit>:

void TM_OneWire_WriteBit(TM_OneWire_t* OneWireStruct, uint8_t bit) {
 8003018:	b510      	push	{r4, lr}
 800301a:	4604      	mov	r4, r0
 800301c:	6800      	ldr	r0, [r0, #0]
 800301e:	88a3      	ldrh	r3, [r4, #4]
	if (bit) {
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 8003020:	041a      	lsls	r2, r3, #16
 8003022:	6182      	str	r2, [r0, #24]
	if (bit) {
 8003024:	b191      	cbz	r1, 800304c <TM_OneWire_WriteBit+0x34>
		ONEWIRE_OUTPUT(OneWireStruct);
 8003026:	4619      	mov	r1, r3
 8003028:	f7ff ff08 	bl	8002e3c <TM_GPIO_SetPinAsOutput>
		ONEWIRE_DELAY(10);
 800302c:	200a      	movs	r0, #10
 800302e:	f7ff ffa9 	bl	8002f84 <Delay>
		
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 8003032:	6820      	ldr	r0, [r4, #0]
 8003034:	88a1      	ldrh	r1, [r4, #4]
 8003036:	f7ff feef 	bl	8002e18 <TM_GPIO_SetPinAsInput>
		
		/* Wait for 55 us and release the line */
		ONEWIRE_DELAY(55);
 800303a:	2037      	movs	r0, #55	; 0x37
		
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
		
		/* Wait for 5 us and release the line */
		ONEWIRE_DELAY(5);
 800303c:	f7ff ffa2 	bl	8002f84 <Delay>
		ONEWIRE_INPUT(OneWireStruct);
 8003040:	88a1      	ldrh	r1, [r4, #4]
 8003042:	6820      	ldr	r0, [r4, #0]
	}
}
 8003044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ONEWIRE_INPUT(OneWireStruct);
 8003048:	f7ff bee6 	b.w	8002e18 <TM_GPIO_SetPinAsInput>
		ONEWIRE_OUTPUT(OneWireStruct);
 800304c:	4619      	mov	r1, r3
 800304e:	f7ff fef5 	bl	8002e3c <TM_GPIO_SetPinAsOutput>
		ONEWIRE_DELAY(65);
 8003052:	2041      	movs	r0, #65	; 0x41
 8003054:	f7ff ff96 	bl	8002f84 <Delay>
		ONEWIRE_INPUT(OneWireStruct);
 8003058:	6820      	ldr	r0, [r4, #0]
 800305a:	88a1      	ldrh	r1, [r4, #4]
 800305c:	f7ff fedc 	bl	8002e18 <TM_GPIO_SetPinAsInput>
		ONEWIRE_DELAY(5);
 8003060:	2005      	movs	r0, #5
 8003062:	e7eb      	b.n	800303c <TM_OneWire_WriteBit+0x24>

08003064 <TM_OneWire_ReadBit>:

uint8_t TM_OneWire_ReadBit(TM_OneWire_t* OneWireStruct) {
 8003064:	b510      	push	{r4, lr}
 8003066:	4604      	mov	r4, r0
	uint8_t bit = 0;
	
	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8003068:	6800      	ldr	r0, [r0, #0]
 800306a:	88a1      	ldrh	r1, [r4, #4]
 800306c:	040b      	lsls	r3, r1, #16
 800306e:	6183      	str	r3, [r0, #24]
	ONEWIRE_OUTPUT(OneWireStruct);
 8003070:	f7ff fee4 	bl	8002e3c <TM_GPIO_SetPinAsOutput>
	ONEWIRE_DELAY(3);
 8003074:	2003      	movs	r0, #3
 8003076:	f7ff ff85 	bl	8002f84 <Delay>
	
	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 800307a:	88a1      	ldrh	r1, [r4, #4]
 800307c:	6820      	ldr	r0, [r4, #0]
 800307e:	f7ff fecb 	bl	8002e18 <TM_GPIO_SetPinAsInput>
	ONEWIRE_DELAY(10);
 8003082:	200a      	movs	r0, #10
 8003084:	f7ff ff7e 	bl	8002f84 <Delay>
	
	/* Read line value */
	if (TM_GPIO_GetInputPinValue(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8003088:	6823      	ldr	r3, [r4, #0]
 800308a:	88a2      	ldrh	r2, [r4, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	421a      	tst	r2, r3
	uint8_t bit = 0;
 8003090:	bf14      	ite	ne
 8003092:	2401      	movne	r4, #1
 8003094:	2400      	moveq	r4, #0
		/* Bit is HIGH */
		bit = 1;
	}
	
	/* Wait 50us to complete 60us period */
	ONEWIRE_DELAY(50);
 8003096:	2032      	movs	r0, #50	; 0x32
 8003098:	f7ff ff74 	bl	8002f84 <Delay>
	
	/* Return bit value */
	return bit;
}
 800309c:	4620      	mov	r0, r4
 800309e:	bd10      	pop	{r4, pc}

080030a0 <TM_OneWire_WriteByte>:

void TM_OneWire_WriteByte(TM_OneWire_t* OneWireStruct, uint8_t byte) {
 80030a0:	b570      	push	{r4, r5, r6, lr}
 80030a2:	4606      	mov	r6, r0
 80030a4:	460d      	mov	r5, r1
	uint8_t i = 8;
	/* Write 8 bits */
	while (i--) {
 80030a6:	2409      	movs	r4, #9
 80030a8:	3c01      	subs	r4, #1
 80030aa:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80030ae:	d100      	bne.n	80030b2 <TM_OneWire_WriteByte+0x12>
		/* LSB bit is first */
		TM_OneWire_WriteBit(OneWireStruct, byte & 0x01);
		byte >>= 1;
	}
}
 80030b0:	bd70      	pop	{r4, r5, r6, pc}
		TM_OneWire_WriteBit(OneWireStruct, byte & 0x01);
 80030b2:	f005 0101 	and.w	r1, r5, #1
 80030b6:	4630      	mov	r0, r6
 80030b8:	f7ff ffae 	bl	8003018 <TM_OneWire_WriteBit>
		byte >>= 1;
 80030bc:	086d      	lsrs	r5, r5, #1
 80030be:	e7f3      	b.n	80030a8 <TM_OneWire_WriteByte+0x8>

080030c0 <TM_OneWire_ReadByte>:

uint8_t TM_OneWire_ReadByte(TM_OneWire_t* OneWireStruct) {
 80030c0:	b570      	push	{r4, r5, r6, lr}
 80030c2:	4606      	mov	r6, r0
	uint8_t i = 8, byte = 0;
	while (i--) {
 80030c4:	2509      	movs	r5, #9
	uint8_t i = 8, byte = 0;
 80030c6:	2400      	movs	r4, #0
 80030c8:	3d01      	subs	r5, #1
	while (i--) {
 80030ca:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80030ce:	d101      	bne.n	80030d4 <TM_OneWire_ReadByte+0x14>
		byte >>= 1;
		byte |= (TM_OneWire_ReadBit(OneWireStruct) << 7);
	}
	
	return byte;
}
 80030d0:	4620      	mov	r0, r4
 80030d2:	bd70      	pop	{r4, r5, r6, pc}
		byte |= (TM_OneWire_ReadBit(OneWireStruct) << 7);
 80030d4:	4630      	mov	r0, r6
 80030d6:	f7ff ffc5 	bl	8003064 <TM_OneWire_ReadBit>
		byte >>= 1;
 80030da:	0864      	lsrs	r4, r4, #1
		byte |= (TM_OneWire_ReadBit(OneWireStruct) << 7);
 80030dc:	ea44 14c0 	orr.w	r4, r4, r0, lsl #7
 80030e0:	b2e4      	uxtb	r4, r4
 80030e2:	e7f1      	b.n	80030c8 <TM_OneWire_ReadByte+0x8>

080030e4 <TM_OneWire_Search>:
	OneWireStruct->LastDiscrepancy = 0;
	OneWireStruct->LastDeviceFlag = 0;
	OneWireStruct->LastFamilyDiscrepancy = 0;
}

uint8_t TM_OneWire_Search(TM_OneWire_t* OneWireStruct, uint8_t command) {
 80030e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	rom_byte_number = 0;
	rom_byte_mask = 1;
	search_result = 0;

	/* Check if any devices */
	if (!OneWireStruct->LastDeviceFlag) {
 80030e8:	7a03      	ldrb	r3, [r0, #8]
uint8_t TM_OneWire_Search(TM_OneWire_t* OneWireStruct, uint8_t command) {
 80030ea:	4604      	mov	r4, r0
 80030ec:	460d      	mov	r5, r1
	if (!OneWireStruct->LastDeviceFlag) {
 80030ee:	b91b      	cbnz	r3, 80030f8 <TM_OneWire_Search+0x14>
		/* 1-Wire reset */
		if (TM_OneWire_Reset(OneWireStruct)) {
 80030f0:	f7ff ff72 	bl	8002fd8 <TM_OneWire_Reset>
 80030f4:	4681      	mov	r9, r0
 80030f6:	b128      	cbz	r0, 8003104 <TM_OneWire_Search+0x20>
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 80030f8:	2000      	movs	r0, #0
 80030fa:	71a0      	strb	r0, [r4, #6]
			OneWireStruct->LastDeviceFlag = 0;
 80030fc:	7220      	strb	r0, [r4, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 80030fe:	71e0      	strb	r0, [r4, #7]
			return 0;
 8003100:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		}

		/* Issue the search command */
		TM_OneWire_WriteByte(OneWireStruct, command);  
 8003104:	4629      	mov	r1, r5
 8003106:	4620      	mov	r0, r4
 8003108:	f7ff ffca 	bl	80030a0 <TM_OneWire_WriteByte>
	rom_byte_mask = 1;
 800310c:	2601      	movs	r6, #1
	rom_byte_number = 0;
 800310e:	464f      	mov	r7, r9
	id_bit_number = 1;
 8003110:	4635      	mov	r5, r6

		/* Loop to do the search */
		do {
			/* Read a bit and its complement */
			id_bit = TM_OneWire_ReadBit(OneWireStruct);
 8003112:	4620      	mov	r0, r4
 8003114:	f7ff ffa6 	bl	8003064 <TM_OneWire_ReadBit>
 8003118:	4680      	mov	r8, r0
			cmp_id_bit = TM_OneWire_ReadBit(OneWireStruct);
 800311a:	4620      	mov	r0, r4
 800311c:	f7ff ffa2 	bl	8003064 <TM_OneWire_ReadBit>

			/* Check for no devices on 1-wire */
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8003120:	f1b8 0f01 	cmp.w	r8, #1
 8003124:	d110      	bne.n	8003148 <TM_OneWire_Search+0x64>
 8003126:	2801      	cmp	r0, #1
 8003128:	d12e      	bne.n	8003188 <TM_OneWire_Search+0xa4>
			}
		/* Loop until through all ROM bytes 0-7 */
		} while (rom_byte_number < 8);

		/* If the search was successful then */
		if (!(id_bit_number < 65)) {
 800312a:	2d40      	cmp	r5, #64	; 0x40
 800312c:	d9e4      	bls.n	80030f8 <TM_OneWire_Search+0x14>
			/* Search successful so set LastDiscrepancy, LastDeviceFlag, search_result */
			OneWireStruct->LastDiscrepancy = last_zero;
 800312e:	f884 9006 	strb.w	r9, [r4, #6]

			/* Check for last device */
			if (OneWireStruct->LastDiscrepancy == 0) {
 8003132:	f1b9 0f00 	cmp.w	r9, #0
 8003136:	d101      	bne.n	800313c <TM_OneWire_Search+0x58>
				OneWireStruct->LastDeviceFlag = 1;
 8003138:	2301      	movs	r3, #1
 800313a:	7223      	strb	r3, [r4, #8]
			search_result = 1;
		}
	}

	/* If no device found then reset counters so next 'search' will be like a first */
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 800313c:	7a63      	ldrb	r3, [r4, #9]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0da      	beq.n	80030f8 <TM_OneWire_Search+0x14>
 8003142:	2001      	movs	r0, #1
		OneWireStruct->LastFamilyDiscrepancy = 0;
		search_result = 0;
	}

	return search_result;
}
 8003144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (id_bit != cmp_id_bit) {
 8003148:	4580      	cmp	r8, r0
 800314a:	eb04 0307 	add.w	r3, r4, r7
 800314e:	d110      	bne.n	8003172 <TM_OneWire_Search+0x8e>
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 8003150:	79a2      	ldrb	r2, [r4, #6]
 8003152:	4295      	cmp	r5, r2
 8003154:	d212      	bcs.n	800317c <TM_OneWire_Search+0x98>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8003156:	7a5a      	ldrb	r2, [r3, #9]
 8003158:	4216      	tst	r6, r2
 800315a:	bf14      	ite	ne
 800315c:	f04f 0801 	movne.w	r8, #1
 8003160:	f04f 0800 	moveq.w	r8, #0
					if (search_direction == 0) {
 8003164:	f1b8 0f00 	cmp.w	r8, #0
 8003168:	d10e      	bne.n	8003188 <TM_OneWire_Search+0xa4>
						if (last_zero < 9) {
 800316a:	2d08      	cmp	r5, #8
 800316c:	d800      	bhi.n	8003170 <TM_OneWire_Search+0x8c>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 800316e:	71e5      	strb	r5, [r4, #7]
 8003170:	46a9      	mov	r9, r5
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8003172:	7a5a      	ldrb	r2, [r3, #9]
 8003174:	ea22 0206 	bic.w	r2, r2, r6
 8003178:	725a      	strb	r2, [r3, #9]
 800317a:	e00b      	b.n	8003194 <TM_OneWire_Search+0xb0>
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 800317c:	bf0c      	ite	eq
 800317e:	f04f 0801 	moveq.w	r8, #1
 8003182:	f04f 0800 	movne.w	r8, #0
 8003186:	e7ed      	b.n	8003164 <TM_OneWire_Search+0x80>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8003188:	19e2      	adds	r2, r4, r7
 800318a:	f04f 0801 	mov.w	r8, #1
 800318e:	7a53      	ldrb	r3, [r2, #9]
 8003190:	4333      	orrs	r3, r6
 8003192:	7253      	strb	r3, [r2, #9]
				TM_OneWire_WriteBit(OneWireStruct, search_direction);
 8003194:	4641      	mov	r1, r8
 8003196:	4620      	mov	r0, r4
				rom_byte_mask <<= 1;
 8003198:	0076      	lsls	r6, r6, #1
				TM_OneWire_WriteBit(OneWireStruct, search_direction);
 800319a:	f7ff ff3d 	bl	8003018 <TM_OneWire_WriteBit>
				if (rom_byte_mask == 0) {
 800319e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
					rom_byte_number++;
 80031a2:	bf04      	itt	eq
 80031a4:	3701      	addeq	r7, #1
 80031a6:	b2ff      	uxtbeq	r7, r7
				id_bit_number++;
 80031a8:	f105 0501 	add.w	r5, r5, #1
					rom_byte_mask = 1;
 80031ac:	bf08      	it	eq
 80031ae:	2601      	moveq	r6, #1
		} while (rom_byte_number < 8);
 80031b0:	2f07      	cmp	r7, #7
				id_bit_number++;
 80031b2:	b2ed      	uxtb	r5, r5
		} while (rom_byte_number < 8);
 80031b4:	d9ad      	bls.n	8003112 <TM_OneWire_Search+0x2e>
 80031b6:	e7b8      	b.n	800312a <TM_OneWire_Search+0x46>

080031b8 <TM_OneWire_First>:
	OneWireStruct->LastDiscrepancy = 0;
 80031b8:	2200      	movs	r2, #0
 80031ba:	7182      	strb	r2, [r0, #6]
	OneWireStruct->LastDeviceFlag = 0;
 80031bc:	7202      	strb	r2, [r0, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 80031be:	71c2      	strb	r2, [r0, #7]
	return TM_OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 80031c0:	21f0      	movs	r1, #240	; 0xf0
 80031c2:	f7ff bf8f 	b.w	80030e4 <TM_OneWire_Search>

080031c6 <TM_OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		TM_OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void TM_OneWire_SelectWithPointer(TM_OneWire_t* OneWireStruct, uint8_t *ROM) {
 80031c6:	b570      	push	{r4, r5, r6, lr}
 80031c8:	460c      	mov	r4, r1
	uint8_t i;
	TM_OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 80031ca:	2155      	movs	r1, #85	; 0x55
void TM_OneWire_SelectWithPointer(TM_OneWire_t* OneWireStruct, uint8_t *ROM) {
 80031cc:	4606      	mov	r6, r0
	TM_OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 80031ce:	f7ff ff67 	bl	80030a0 <TM_OneWire_WriteByte>
 80031d2:	1e65      	subs	r5, r4, #1
 80031d4:	3407      	adds	r4, #7
	
	for (i = 0; i < 8; i++) {
		TM_OneWire_WriteByte(OneWireStruct, *(ROM + i));
 80031d6:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80031da:	4630      	mov	r0, r6
 80031dc:	f7ff ff60 	bl	80030a0 <TM_OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 80031e0:	42a5      	cmp	r5, r4
 80031e2:	d1f8      	bne.n	80031d6 <TM_OneWire_SelectWithPointer+0x10>
	}	
}
 80031e4:	bd70      	pop	{r4, r5, r6, pc}

080031e6 <TM_OneWire_GetFullROM>:

void TM_OneWire_GetFullROM(TM_OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 80031e6:	f100 0309 	add.w	r3, r0, #9
 80031ea:	3901      	subs	r1, #1
 80031ec:	3011      	adds	r0, #17
	uint8_t i;
	for (i = 0; i < 8; i++) {
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 80031ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031f2:	f801 2f01 	strb.w	r2, [r1, #1]!
	for (i = 0; i < 8; i++) {
 80031f6:	4283      	cmp	r3, r0
 80031f8:	d1f9      	bne.n	80031ee <TM_OneWire_GetFullROM+0x8>
	}
}
 80031fa:	4770      	bx	lr

080031fc <TM_OneWire_CRC8>:

uint8_t TM_OneWire_CRC8(uint8_t *addr, uint8_t len) {
 80031fc:	b530      	push	{r4, r5, lr}
 80031fe:	4401      	add	r1, r0
	uint8_t crc = 0, inbyte, i, mix;
 8003200:	2300      	movs	r3, #0
	
	while (len--) {
 8003202:	4288      	cmp	r0, r1
 8003204:	d101      	bne.n	800320a <TM_OneWire_CRC8+0xe>
		}
	}
	
	/* Return calculated CRC */
	return crc;
}
 8003206:	4618      	mov	r0, r3
 8003208:	bd30      	pop	{r4, r5, pc}
		inbyte = *addr++;
 800320a:	f810 4b01 	ldrb.w	r4, [r0], #1
 800320e:	2208      	movs	r2, #8
			mix = (crc ^ inbyte) & 0x01;
 8003210:	ea83 0504 	eor.w	r5, r3, r4
			if (mix) {
 8003214:	f015 0f01 	tst.w	r5, #1
 8003218:	ea4f 0353 	mov.w	r3, r3, lsr #1
				crc ^= 0x8C;
 800321c:	bf18      	it	ne
 800321e:	f083 038c 	eorne.w	r3, r3, #140	; 0x8c
 8003222:	f102 32ff 	add.w	r2, r2, #4294967295
 8003226:	bf18      	it	ne
 8003228:	b2db      	uxtbne	r3, r3
		for (i = 8; i; i--) {
 800322a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
			inbyte >>= 1;
 800322e:	ea4f 0454 	mov.w	r4, r4, lsr #1
		for (i = 8; i; i--) {
 8003232:	d1ed      	bne.n	8003210 <TM_OneWire_CRC8+0x14>
 8003234:	e7e5      	b.n	8003202 <TM_OneWire_CRC8+0x6>
	...

08003238 <TM_RCC_InitSystem>:
 * | OTHER DEALINGS IN THE SOFTWARE.
 * |----------------------------------------------------------------------
 */
#include "tm_stm32_rcc.h"

TM_RCC_Result_t TM_RCC_InitSystem(void) {
 8003238:	b510      	push	{r4, lr}
 800323a:	b094      	sub	sp, #80	; 0x50
	/* Enable D-Cache */
	SCB_EnableDCache();
#endif
	
	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 800323c:	2300      	movs	r3, #0
 800323e:	4a23      	ldr	r2, [pc, #140]	; (80032cc <TM_RCC_InitSystem+0x94>)
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003244:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003248:	6411      	str	r1, [r2, #64]	; 0x40
 800324a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800324c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003250:	9200      	str	r2, [sp, #0]
 8003252:	9a00      	ldr	r2, [sp, #0]

#if !defined(STM32F0xx)
	/* Set voltage scaling */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003254:	4a1e      	ldr	r2, [pc, #120]	; (80032d0 <TM_RCC_InitSystem+0x98>)
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	6811      	ldr	r1, [r2, #0]
 800325a:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800325e:	6011      	str	r1, [r2, #0]
 8003260:	6812      	ldr	r2, [r2, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE;
	
	/* Select proper PLL input clock */
	if (RCC_OSCILLATORTYPE == RCC_OSCILLATORTYPE_HSE) {	
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
		RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8003262:	930a      	str	r3, [sp, #40]	; 0x28
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003264:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
		RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003268:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800326c:	9201      	str	r2, [sp, #4]
		RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800326e:	930e      	str	r3, [sp, #56]	; 0x38
	
	/* Set PLL parameters */
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	
#if !defined(STM32F0xx)
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM;
 8003270:	2308      	movs	r3, #8
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003272:	9a01      	ldr	r2, [sp, #4]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM;
 8003274:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE;
 8003276:	2201      	movs	r2, #1
	RCC_OscInitStruct.PLL.PLLN = RCC_PLLN;
 8003278:	f44f 73b4 	mov.w	r3, #360	; 0x168
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800327c:	2402      	movs	r4, #2
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE;
 800327e:	9207      	str	r2, [sp, #28]
	RCC_OscInitStruct.PLL.PLLN = RCC_PLLN;
 8003280:	9310      	str	r3, [sp, #64]	; 0x40
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003282:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP;
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ;
 8003286:	2307      	movs	r3, #7
	RCC_OscInitStruct.PLL.PLLR = 7;
#endif
#endif
	
	/* Try to init */
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003288:	a807      	add	r0, sp, #28
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800328a:	9208      	str	r2, [sp, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800328c:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP;
 800328e:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ;
 8003290:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 7;
 8003292:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003294:	f7fd fd54 	bl	8000d40 <HAL_RCC_OscConfig>
 8003298:	b110      	cbz	r0, 80032a0 <TM_RCC_InitSystem+0x68>
		return TM_RCC_Result_Error;
 800329a:	2001      	movs	r0, #1
		return TM_RCC_Result_Error;
	}
	
	/* Return OK */
	return TM_RCC_Result_Ok;
}
 800329c:	b014      	add	sp, #80	; 0x50
 800329e:	bd10      	pop	{r4, pc}
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80032a0:	f7fd fbec 	bl	8000a7c <HAL_PWREx_EnableOverDrive>
 80032a4:	2800      	cmp	r0, #0
 80032a6:	d1f8      	bne.n	800329a <TM_RCC_InitSystem+0x62>
	RCC_ClkInitStruct.ClockType |= RCC_CLOCKTYPE_PCLK2;
 80032a8:	230f      	movs	r3, #15
 80032aa:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 80032ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032b0:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 80032b2:	9305      	str	r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 80032b4:	2106      	movs	r1, #6
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80032b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 80032ba:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032bc:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80032be:	9306      	str	r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 80032c0:	f7fd fc18 	bl	8000af4 <HAL_RCC_ClockConfig>
		return TM_RCC_Result_Error;
 80032c4:	3000      	adds	r0, #0
 80032c6:	bf18      	it	ne
 80032c8:	2001      	movne	r0, #1
 80032ca:	e7e7      	b.n	800329c <TM_RCC_InitSystem+0x64>
 80032cc:	40023800 	.word	0x40023800
 80032d0:	40007000 	.word	0x40007000

080032d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80032d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800330c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80032d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80032da:	e003      	b.n	80032e4 <LoopCopyDataInit>

080032dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80032dc:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80032de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032e2:	3104      	adds	r1, #4

080032e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80032e4:	480b      	ldr	r0, [pc, #44]	; (8003314 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80032e6:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80032e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032ec:	d3f6      	bcc.n	80032dc <CopyDataInit>
  ldr  r2, =_sbss
 80032ee:	4a0b      	ldr	r2, [pc, #44]	; (800331c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80032f0:	e002      	b.n	80032f8 <LoopFillZerobss>

080032f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80032f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80032f4:	f842 3b04 	str.w	r3, [r2], #4

080032f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80032f8:	4b09      	ldr	r3, [pc, #36]	; (8003320 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80032fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032fc:	d3f9      	bcc.n	80032f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032fe:	f7ff fb4f 	bl	80029a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003302:	f000 f811 	bl	8003328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003306:	f7ff f949 	bl	800259c <main>
  bx  lr    
 800330a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800330c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003310:	08003420 	.word	0x08003420
  ldr  r0, =_sdata
 8003314:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003318:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 800331c:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8003320:	20004158 	.word	0x20004158

08003324 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003324:	e7fe      	b.n	8003324 <ADC_IRQHandler>
	...

08003328 <__libc_init_array>:
 8003328:	b570      	push	{r4, r5, r6, lr}
 800332a:	4e0d      	ldr	r6, [pc, #52]	; (8003360 <__libc_init_array+0x38>)
 800332c:	4c0d      	ldr	r4, [pc, #52]	; (8003364 <__libc_init_array+0x3c>)
 800332e:	1ba4      	subs	r4, r4, r6
 8003330:	10a4      	asrs	r4, r4, #2
 8003332:	2500      	movs	r5, #0
 8003334:	42a5      	cmp	r5, r4
 8003336:	d109      	bne.n	800334c <__libc_init_array+0x24>
 8003338:	4e0b      	ldr	r6, [pc, #44]	; (8003368 <__libc_init_array+0x40>)
 800333a:	4c0c      	ldr	r4, [pc, #48]	; (800336c <__libc_init_array+0x44>)
 800333c:	f000 f820 	bl	8003380 <_init>
 8003340:	1ba4      	subs	r4, r4, r6
 8003342:	10a4      	asrs	r4, r4, #2
 8003344:	2500      	movs	r5, #0
 8003346:	42a5      	cmp	r5, r4
 8003348:	d105      	bne.n	8003356 <__libc_init_array+0x2e>
 800334a:	bd70      	pop	{r4, r5, r6, pc}
 800334c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003350:	4798      	blx	r3
 8003352:	3501      	adds	r5, #1
 8003354:	e7ee      	b.n	8003334 <__libc_init_array+0xc>
 8003356:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800335a:	4798      	blx	r3
 800335c:	3501      	adds	r5, #1
 800335e:	e7f2      	b.n	8003346 <__libc_init_array+0x1e>
 8003360:	08003418 	.word	0x08003418
 8003364:	08003418 	.word	0x08003418
 8003368:	08003418 	.word	0x08003418
 800336c:	0800341c 	.word	0x0800341c

08003370 <memset>:
 8003370:	4402      	add	r2, r0
 8003372:	4603      	mov	r3, r0
 8003374:	4293      	cmp	r3, r2
 8003376:	d100      	bne.n	800337a <memset+0xa>
 8003378:	4770      	bx	lr
 800337a:	f803 1b01 	strb.w	r1, [r3], #1
 800337e:	e7f9      	b.n	8003374 <memset+0x4>

08003380 <_init>:
 8003380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003382:	bf00      	nop
 8003384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003386:	bc08      	pop	{r3}
 8003388:	469e      	mov	lr, r3
 800338a:	4770      	bx	lr

0800338c <_fini>:
 800338c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338e:	bf00      	nop
 8003390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003392:	bc08      	pop	{r3}
 8003394:	469e      	mov	lr, r3
 8003396:	4770      	bx	lr
